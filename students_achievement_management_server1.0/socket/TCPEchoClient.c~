#include <stdio.h>      /* for printf() and fprintf() */
#include <sys/socket.h> /* for socket(), connect(), send(), and recv() */
#include <arpa/inet.h>  /* for sockaddr_in and inet_addr() */
#include <stdlib.h>     /* for atoi() and exit() */
#include <string.h>     /* for memset() */
#include <unistd.h>     /* for close() */


#define RCVBUFSIZE 32 

struct USERINFOR
{
	char userId[20];
	char password[20];
	int power;
};

struct stu
{
	
}

void DieWithError(char *errorMessage);

int main(int argc, char *argv[])
{
    int sock;
    struct sockaddr_in echoServAddr; 
    unsigned short echoServPort; 
    char *servIP;  
    char *echoString;  
    char echoBuffer[RCVBUFSIZE]; 
    unsigned int echoStringLen;  
    int bytesRcvd, totalBytesRcvd;

	USERINFOR userInfor;
	    

    if ((argc < 2) || (argc > 3)) 
    {
       fprintf(stderr, "Usage: %s <Server IP> [<Echo Port>]\n",
               argv[0]);
       exit(1);
    }

    servIP = argv[1];

    if (argc == 3)
        echoServPort = atoi(argv[2]); 
    else
        echoServPort = 8888; 

    if ((sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0)
        DieWithError("socket() failed");

    memset(&echoServAddr, 0, sizeof(echoServAddr)); 
    echoServAddr.sin_family      = AF_INET;           
    echoServAddr.sin_addr.s_addr = inet_addr(servIP);   
    echoServAddr.sin_port        = htons(echoServPort); 


    if (connect(sock, (struct sockaddr *) &echoServAddr, sizeof(echoServAddr)) < 0)
        DieWithError("connect() failed");

	printf("Connection success,please login\n");
	printf("Student 0\n");
	printf("Teacher 1\n");
	printf("Office of Academic Affairs 2\n");
	printf("Administrator 3\n");
	printf("Then press Enter\n");

	int var;
	var = getchar();
	
	switch(var)
	{
		case 0:
			
			printf("Enter ID number\n");
			userInfor.userId = getchar();
			printf("Enter password\n");
			userInfor.password = getchar();
			userInfor.power = 0;

			
		case 1:

			printf("Enter ID number\n");
			userInfor.userId = getchar();
			printf("Enter password\n");
			userInfor.password = getchar();
			userInfor.power = 1;
			
		case 2:

			printf("Enter ID number\n");
			userInfor.userId = getchar();
			printf("Enter password\n");
			userInfor.password = getchar();
			userInfor.power = 2;
			
		case 3:

			printf("Enter ID number\n");
			userInfor.userId = getchar();
			printf("Enter password\n");
			userInfor.password = getchar();
			userInfor.power = 3;
			
		default:
			printf("Wrong number,please reenter\n");
			break;
	
	}
    echoStringLen = strlen(echoString);          /* Determine input length */

    /* Send the string to the server */
    if (send(sock, echoString, echoStringLen, 0) != echoStringLen)
        DieWithError("send() sent a different number of bytes than expected");

    /* Receive the same string back from the server */
    totalBytesRcvd = 0;
    printf("Received: ");                /* Setup to print the echoed string */
    while (totalBytesRcvd < echoStringLen)
    {
        /* Receive up to the buffer size (minus 1 to leave space for
           a null terminator) bytes from the sender */
        if ((bytesRcvd = recv(sock, echoBuffer, RCVBUFSIZE - 1, 0)) <= 0)
            DieWithError("recv() failed or connection closed prematurely");
        totalBytesRcvd += bytesRcvd;   /* Keep tally of total bytes */
        echoBuffer[bytesRcvd] = '\0';  /* Terminate the string! */
        printf("%s", echoBuffer);      /* Print the echo buffer */
    }

    printf("\n");    /* Print a final linefeed */

    close(sock);
    exit(0);
}
