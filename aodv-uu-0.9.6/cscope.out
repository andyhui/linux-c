cscope 15 $HOME/software/aodv-uu-0.9.6-backup -q 0000001707 0000191747
	@Makefile

2 
	gAODVDIR
=
	$$
(
shñl
 
pwd
)

3 
NS_DIR
=
ns
-2

5 
SRC
 = 
maö
.
c
 
li°
.¯
debug
.¯
timî_queue
.¯
aodv_sockë
.¯
aodv_hñlo
.c \

6 
aodv_√ighb‹
.
c
 
aodv_timeout
.¯
routög_èbÀ
.¯
£ek_li°
.c \

7 
aodv_ºeq
.
c
 
aodv_ºï
.¯
aodv_ªº
.¯
∆
.c

9 
SRC_NS
 = 
debug
.
c
 
li°
.¯
timî_queue
.¯
aodv_sockë
.¯
aodv_hñlo
.c \

10 
aodv_√ighb‹
.
c
 
aodv_timeout
.¯
routög_èbÀ
.¯
£ek_li°
.c \

11 
aodv_ºeq
.
c
 
aodv_ºï
.¯
aodv_ªº
.c

13 
SRC_NS_CPP
 = 
	`$
(
NS_DIR
)/
aodv
-
uu
.
cc
 $(NS_DIR)/
∑ckë_queue
.c¯$(NS_DIR)/
∑ckë_öput
.cc

15 
OBJS
 = 
	`$
(
SRC
:%.
c
=%.
o
)

16 
OBJS_ARM
 = 
	`$
(
SRC
:%.
c
=%-
¨m
.
o
)

17 
OBJS_MIPS
 = 
	`$
(
SRC
:%.
c
=%-
mùs
.
o
)

18 
OBJS_NS
 = 
	`$
(
SRC_NS
:%.
c
=%-
ns
.
o
)

19 
OBJS_NS_CPP
 = 
	`$
(
SRC_NS_CPP
:%.
cc
=%-
ns
.
o
)

21 
KERNEL
=
	`$
(
shñl
 
u«me
 -
r
)

22 #Ch™gê
to
 
compûe
 
agaö°
 
dif„ª¡
 
	`kî√l
 (
ˇn
 
be
 
ovîriddí
):

23 
KERNEL_DIR
=/
lib
/
moduÀs
/
	`$
(
KERNEL
)/
buûd


24 
KERNEL_INC
=
	`$
(
KERNEL_DIR
)/
ö˛ude


26 #Compûî 
™d
 
›ti⁄s
:

27 ###### 
RCP
 
u£
: 
big
-
ídün


28 
CC
=
gcc


29 
LD
=
ld


30 
ARM_CC
=
¨m
-
löux
-
gcc


31 
ARM_CCFLAGS
=-
mbig
-
ídün


32 
ARM_LD
=
¨m
-
löux
-
ld


33 
MIPS_CC
=
mù£l
-
löux
-
gcc


34 
MIPS_LD
=
mù£l
-
löux
-
ld


35 
CPP
=
g
++

36 
OPTS
=-
WÆl
 -
O3


37 
CPP_OPTS
=-
WÆl


39 
exp‹t
 
CC
 
ARM_CC
 
MIPS_CC


41 #Commíà
out
 
to
 
dißbÀ
 
debug
 
›î©i⁄
...

42 
DEBUG
=-
g
 -
DDEBUG


43 #Add 
exåa
 
fun˘i⁄Æôy
. 
Uncommít
 
‹
 
u£
 "makêXDEFS=-D<„©uª>" 
⁄


44 #thê
comm™d
 
löe
.

45 
XDEFS
=-
DDEBUG


46 
DEFS
=-
DCONFIG_GATEWAY
 #-
DLLFEEDBACK


47 
CFLAGS
=
	`$
(
OPTS
Ë$(
DEBUG
Ë$(
DEFS
Ë
	$$
(
XDEFS
)

48 
LD_OPTS
=

50 
	`i‚eq
 (,
	`$
(
föd°rög
 
CONFIG_GATEWAY
,
	$$
(
DEFS
)))

51 
SRC
:=
	$$
(
SRC
Ë
loˇlôy
.
c


52 
ídif


53 
	`i‚eq
 (,
	`$
(
föd°rög
 
LLFEEDBACK
,
	$$
(
DEFS
)))

54 
SRC
:=
	$$
(
SRC
Ë
Œf
.
c


55 
LD_OPTS
:=
	`$
(LD_OPTSË-
liw


56 
ídif


58 #ARM 
•ecific
 
c⁄figuøti⁄
 
g€s
 
hîe
:

60 
ARM_INC
=

62 #NS 
•ecific
 
c⁄figuøti⁄
 
g€s
 
hîe
:

64 
NS_DEFS
= #DON'T CHANGE (overridden by NS Makefile)

66 #Së 
exåa
 
DEFINES
 
hîe
. 
Lök
 
œyî
 
„edback
 
is
 
now
 
a
 
ru¡ime
 
›ti⁄
.

67 
EXTRA_NS_DEFS
=-
DCONFIG_GATEWAY


69 
	`i‚eq
 (,
	`$
(
föd°rög
 
CONFIG_GATEWAY
,
	$$
(
EXTRA_NS_DEFS
)))

70 
SRC_NS
:=
	$$
(
SRC_NS
Ë
loˇlôy
.
c


71 
ídif


73 #NŸe: 
OPTS
 
is
 
ovîriddí
 
by
 
NS
 
Makefûe


74 
NS_CFLAGS
=
	`$
(
OPTS
Ë$(
CPP_OPTS
Ë$(
DEBUG
Ë$(
NS_DEFS
Ë
	$$
(
EXTRA_NS_DEFS
)

76 
NS_INC
= #DON'T CHANGE (overridden by NS Makefile)

78 
NS_TARGET
=
libaodv
-
uu
.
a


80 #Archivî 
™d
 
›ti⁄s


81 
AR
=
¨


82 
AR_FLAGS
=
rc


84 .
PHONY
:  
˛ón
 
ö°Æl
 
unö°Æl
 
dïíd
 
ègs
 
aodvd
-
¨m
 
docs
 
kaodv
 kaodv-¨m kaodv-
mùs


86 : 
aodvd
 
kaodv


88 
¨m
: 
aodvd
-¨m 
kaodv
-arm

90 
mùs
: 
aodvd
-mù†
kaodv
-mips

92 
ídün
.
h
:

93 
	`$
(
CC
Ë$(
CFLAGS
Ë-
o
 
ídün
Éndün.
c


94 ./
ídün
 >Éndün.
h


96 
	$$
(
OBJS
): %.
o
: %.
c
 
Makefûe


97 
	`$
(
CC
Ë$(
CFLAGS
Ë-
c
 -
o
 
$
@ $<

99 
	$$
(
OBJS_ARM
): %-
¨m
.
o
: %.
c
 
Makefûe


100 
	`$
(
ARM_CC
Ë$(
ARM_CCFLAGS
Ë$(
CFLAGS
Ë-
DARM
 $(
ARM_INC
Ë-
c
 -
o
 
$
@ $<

102 
	$$
(
OBJS_MIPS
): %-
mùs
.
o
: %.
c
 
Makefûe


103 
	`$
(
MIPS_CC
Ë$(
MIPS_CCFLAGS
Ë$(
CFLAGS
Ë-
DMIPS
 $(
MIPS_INC
Ë-
c
 -
o
 
$
@ $<

105 
	$$
(
OBJS_NS
): %-
ns
.
o
: %.
c
 
Makefûe


106 
	`$
(
CPP
Ë$(
NS_CFLAGS
Ë$(
NS_INC
Ë-
c
 -
o
 
$
@ $<

108 
	$$
(
OBJS_NS_CPP
): %-
ns
.
o
: %.
cc
 
Makefûe


109 
	`$
(
CPP
Ë$(
NS_CFLAGS
Ë$(
NS_INC
Ë-
c
 -
o
 
$
@ $<

111 
aodvd
: 
	$$
(
OBJS
Ë
Makefûe


112 
	`$
(
CC
Ë$(
CFLAGS
Ë-
o
 
$
@ $(
OBJS
Ë
	$$
(
LD_OPTS
)

114 
aodvd
-
¨m
: 
	$$
(
OBJS_ARM
Ë
Makefûe


115 
	`$
(
ARM_CC
Ë$(
ARM_CCFLAGS
Ë$(
CFLAGS
Ë-
DARM
 -
o
 $(@:%-
¨m
=%Ë$(
OBJS_ARM
Ë
	$$
(
LD_OPTS
)

117 
aodvd
-
mùs
: 
	$$
(
OBJS_MIPS
Ë
Makefûe


118 
	`$
(
MIPS_CC
Ë$(
MIPS_CCFLAGS
Ë$(
CFLAGS
Ë-
DMIPS
 -
o
 $(@:%-
mùs
=%Ë$(
OBJS_MIPS
Ë$(
LD_OPTS
)

120 
	$$
(
NS_TARGET
): 
	`$
(
OBJS_NS_CPP
Ë
	$$
(
OBJS_NS
Ë
ídün
.
h


121 
	`$
(
AR
Ë$(
AR_FLAGS
Ë
$
@ $(
OBJS_NS_CPP
Ë$(
OBJS_NS
Ë> /
dev
/
nuŒ


123 #Kî√»
moduÀ
:

124 
kaodv
:

125 
	`$
(
MAKE
Ë-
C
 $(
AODVDIR
)/
 x
 
KERNEL_DIR
=
	$$
(
KERNEL_DIR
Ë
KCC
=
	$$
(
CC
Ë
XDEFS
=
	$$
(
XDEFS
)

127 
kaodv
-
¨m
:

128 
	`$
(
MAKE
Ë-
C
 $(
AODVDIR
)/
 x
 
KERNEL_DIR
=
	$$
(
KERNEL_DIR
Ë
KCC
=
	$$
(
ARM_CC
Ë
LD
=
	$$
(
ARM_LD
Ë
XDEFS
=
	$$
(
XDEFS
Ë
kaodv
-
¨m


130 
kaodv
-
mùs
:

131 
	`$
(
MAKE
Ë-
C
 $(
AODVDIR
)/
 x
 
KERNEL_DIR
=
	$$
(
KERNEL_DIR
Ë
KCC
=
	$$
(
MIPS_CC
Ë
LD
=
	$$
(
MIPS_LD
Ë
XDEFS
=
	$$
(
XDEFS
Ë
kaodv
-
mùs


133 
ègs
: 
TAGS


134 
TAGS
: 
 x
/TAGS

135 
ëags
 *.
c
 *.
h


137 
 x
/
TAGS
:

138 
cd
 
 x
 && 
	$$
(
MAKE
Ë
TAGS


140 
ödít
:

141 
ödít
 -
kr
 -
l
 80 *.
c
 \

142 
	`$
(
fûãr
-
out
 $(
SRC_NS_CPP
:%.
cc
=%.
h
),$(
wûdˇrd
 *.h))

143 
	`$
(
MAKE
Ë-
C
 
 x
 
ödít


144 
dïíd
:

145 @
echo
 "Updating Makefile dependencies..."

146 @
makedïíd
 -
Y
./ -- 
	`$
(
DEFS
Ë-- $(
SRC
Ë&>/
dev
/
nuŒ


147 @
makedïíd
 -
a
 -
Y
./ -- 
	$$
(
KDEFS
Ë
kaodv
.
c
 &>/
dev
/
nuŒ


149 
ö°Æl
: 

150 
ö°Æl
 -
s
 -
m
 755 
aodvd
 /
u§
/
sbö
/aodvd

151 @[ ! -
d
 /
lib
/
moduÀs
/
	`$
(
KERNEL
)/
aodv
 ]; 
thí
 \

152 
mkdú
 /
lib
/
moduÀs
/
	`$
(
KERNEL
)/
aodv
; \

153 
fi


155 @
echo
 "Installing kernel module in /lib/modules/$(KERNEL)/aodv/";

156 @[ -
f
 ./
kaodv
.
ko
 ]; 
thí
 \

157 
ö°Æl
 -
m
 644 
kaodv
.
ko
 /
lib
/
moduÀs
/
	`$
(
KERNEL
)/
aodv
/kaodv.ko; \

159 
ö°Æl
 -
m
 644 
kaodv
.
o
 /
lib
/
moduÀs
/
	`$
(
KERNEL
)/
aodv
/kaodv.o; \

160 
fi


161 /
sbö
/
dïmod
 -
a


162 
unö°Æl
:

163 
rm
 -
f
 /
u§
/
sbö
/
aodvd


164 
rm
 -
rf
 /
lib
/
moduÀs
/
	`$
(
KERNEL
)/
aodv


166 
docs
:

167 
cd
 
docs
 && 
	$$
(
MAKE
Ë
Æl


168 
˛ón
:

169 
rm
 -
f
 
aodvd
 *~ *.
o
 
c‹e
 *.
log
 
	$$
(
NS_TARGET
Ë
kaodv
.
ko
 
ídün
Éndün.
h
 
	`$
(
NS_DIR
)

	@aodv_hello.c

24 #ifde‡
NS_PORT


25 
	~"ns-2/aodv-uu.h
"

27 
	~<√töë/ö.h
>

28 
	~"aodv_hñlo.h
"

29 
	~"aodv_timeout.h
"

30 
	~"aodv_ºï.h
"

31 
	~"aodv_ºeq.h
"

32 
	~"routög_èbÀ.h
"

33 
	~"timî_queue.h
"

34 
	~"∑øms.h
"

35 
	~"aodv_sockë.h
"

36 
	~"defs.h
"

37 
	~"debug.h
"

39 
unidú_hack
, 
ª˚ive_n_hñlos
, 
hñlo_jôãrög
, 
›timized_hñlos
;

40 
timî
 
	ghñlo_timî
;

47 
NS_CLASS
 
	$hñlo_jôãr
()

49 i‡(
hñlo_jôãrög
) {

50 #ifde‡
NS_PORT


51  (Ë(((Ë
R™dom
::
	`öãgî
(
RAND_MAX
 + 1) / RAND_MAX - 0.5)

52 * 
JITTER_INTERVAL
);

54  (Ë(((Ë
	`øndom
(Ë/ 
RAND_MAX
 - 0.5Ë* 
JITTER_INTERVAL
);

58 
	}
}

60 
NS_CLASS
 
	$hñlo_°¨t
()

62 i‡(
hñlo_timî
.
u£d
)

65 
	`gëtimeofday
(&
this_ho°
.
fwd_time
, 
NULL
);

67 
	`DEBUG
(
LOG_DEBUG
, 0, "StartingÅo send HELLOs!");

68 
	`timî_öô
(&
hñlo_timî
, &
NS_CLASS
 
hñlo_£nd
, 
NULL
);

70 
	`hñlo_£nd
(
NULL
);

71 
	}
}

73 
NS_CLASS
 
	$hñlo_°›
()

75 
	`DEBUG
(
LOG_DEBUG
, 0,

77 
	`timî_ªmove
(&
hñlo_timî
);

78 
	}
}

80 
NS_CLASS
 
	$hñlo_£nd
(*
¨g
)

82 
RREP
 *
ºï
;

83 
AODV_ext
 *
ext
 = 
NULL
;

84 
u_öt8_t
 
Êags
 = 0;

85 
ö_addr
 
de°
;

86 
time_diff
, 
jôãr
;

87 
timevÆ
 
now
;

88 
msg_size
 = 
RREP_SIZE
;

89 
i
;

91 
	`gëtimeofday
(&
now
, 
NULL
);

93 i‡(
›timized_hñlos
 &&

94 
	`timevÆ_diff
(&
now
, &
this_ho°
.
fwd_time
Ë> 
ACTIVE_ROUTE_TIMEOUT
) {

95 
	`hñlo_°›
();

99 
time_diff
 = 
	`timevÆ_diff
(&
now
, &
this_ho°
.
bˇ°_time
);

100 
jôãr
 = 
	`hñlo_jôãr
();

104 i‡(
time_diff
 >
HELLO_INTERVAL
) {

106 
i
 = 0; i < 
MAX_NR_INTERFACES
; i++) {

107 i‡(!
	`DEV_NR
(
i
).
íabÀd
)

109 #ifde‡
DEBUG_HELLO


110 
	`DEBUG
(
LOG_DEBUG
, 0, "sending HelloÅo 255.255.255.255");

112 
ºï
 = 
	`ºï_¸óã
(
Êags
, 0, 0, 
	`DEV_NR
(
i
).
ùaddr
,

113 
this_ho°
.
£qno
,

114 
	`DEV_NR
(
i
).
ùaddr
,

115 
ALLOWED_HELLO_LOSS
 * 
HELLO_INTERVAL
);

118 i‡(
unidú_hack
) {

119 
i
;

121 i‡(
ext
)

122 
ext
 = 
	`AODV_EXT_NEXT
(ext);

124 
ext
 = (
AODV_ext
 *Ë((*Ë
ºï
 + 
RREP_SIZE
);

126 
ext
->
ty≥
 = 
RREP_HELLO_NEIGHBOR_SET_EXT
;

127 
ext
->
Àngth
 = 0;

129 
i
 = 0; i < 
RT_TABLESIZE
; i++) {

130 
li°_t
 *
pos
;

131 
	`li°_f‹óch
(
pos
, &
π_tbl
.
tbl
[
i
]) {

132 
π_èbÀ_t
 *
π
 = (π_èbÀ_à*Ë
pos
;

136 i‡(
π
->
hñlo_timî
.
u£d
) {

137 #ifde‡
DEBUG_HELLO


138 
	`DEBUG
(
LOG_INFO
, 0,

140 
	`ù_to_°r
(
π
->
de°_addr
));

142 
	`mem˝y
(
	`AODV_EXT_DATA
(
ext
), &
π
->
de°_addr
,

143 (
ö_addr
));

144 
ext
->
Àngth
 +(
ö_addr
);

148 i‡(
ext
->
Àngth
)

149 
msg_size
 = 
RREP_SIZE
 + 
	`AODV_EXT_SIZE
(
ext
);

151 
de°
.
s_addr
 = 
AODV_BROADCAST
;

152 
	`aodv_sockë_£nd
((
AODV_msg
 *Ë
ºï
, 
de°
, 
msg_size
, 1, &
	`DEV_NR
(
i
));

155 
	`timî_£t_timeout
(&
hñlo_timî
, 
HELLO_INTERVAL
 + 
jôãr
);

157 i‡(
HELLO_INTERVAL
 - 
time_diff
 + 
jôãr
 < 0)

158 
	`timî_£t_timeout
(&
hñlo_timî
,

159 
HELLO_INTERVAL
 - 
time_diff
 - 
jôãr
);

161 
	`timî_£t_timeout
(&
hñlo_timî
,

162 
HELLO_INTERVAL
 - 
time_diff
 + 
jôãr
);

164 
	}
}

168 
NS_CLASS
 
	$hñlo_¥o˚ss
(
RREP
 * 
hñlo
, 
ºïÀn
, 
ifödex
)

170 
u_öt32_t
 
hñlo_£qno
, 
timeout
, 
hñlo_öãrvÆ
 = 
HELLO_INTERVAL
;

171 
u_öt8_t
 
°©e
, 
Êags
 = 0;

172 
ö_addr
 
ext_√ighb‹
, 
hñlo_de°
;

173 
π_èbÀ_t
 *
π
;

174 
AODV_ext
 *
ext
 = 
NULL
;

175 
i
;

176 
timevÆ
 
now
;

178 
	`gëtimeofday
(&
now
, 
NULL
);

180 
hñlo_de°
.
s_addr
 = 
hñlo
->
de°_addr
;

181 
hñlo_£qno
 = 
	`¡ohl
(
hñlo
->
de°_£qno
);

183 
π
 = 
	`π_èbÀ_föd
(
hñlo_de°
);

185 i‡(
π
)

186 
Êags
 = 
π
->flags;

188 i‡(
unidú_hack
)

189 
Êags
 |
RT_UNIDIR
;

192 
ext
 = (
AODV_ext
 *Ë((*Ë
hñlo
 + 
RREP_SIZE
);

194 
ºïÀn
 > (Ë
RREP_SIZE
) {

195 
ext
->
ty≥
) {

196 
RREP_HELLO_INTERVAL_EXT
:

197 i‡(
ext
->
Àngth
 == 4) {

198 
	`mem˝y
(&
hñlo_öãrvÆ
, 
	`AODV_EXT_DATA
(
ext
), 4);

199 
hñlo_öãrvÆ
 = 
	`¡ohl
(hello_interval);

200 #ifde‡
DEBUG_HELLO


201 
	`DEBUG
(
LOG_INFO
, 0, "HelloÉxtension interval=%lu!",

202 
hñlo_öãrvÆ
);

206 
	`Æog
(
LOG_WARNING
, 0,

207 
__FUNCTION__
, "Bad hello intervalÉxtension!");

209 
RREP_HELLO_NEIGHBOR_SET_EXT
:

211 #ifde‡
DEBUG_HELLO


212 
	`DEBUG
(
LOG_INFO
, 0, "RREP_HELLO_NEIGHBOR_SET_EXT");

214 
i
 = 0; i < 
ext
->
Àngth
; i = i + 4) {

215 
ext_√ighb‹
.
s_addr
 =

216 *(
ö_addr_t
 *Ë((*Ë
	`AODV_EXT_DATA
(
ext
Ë+ 
i
);

218 i‡(
ext_√ighb‹
.
s_addr
 =
	`DEV_IFINDEX
(
ifödex
).
ùaddr
.s_addr)

219 
Êags
 &~
RT_UNIDIR
;

223 
	`Æog
(
LOG_WARNING
, 0, 
__FUNCTION__
,

224 "BadÉxãnsi⁄!!Åy≥=%d,Üígth=%d", 
ext
->
ty≥
,Éxt->
Àngth
);

225 
ext
 = 
NULL
;

228 i‡(
ext
 =
NULL
)

231 
ºïÀn
 -
	`AODV_EXT_SIZE
(
ext
);

232 
ext
 = 
	`AODV_EXT_NEXT
(ext);

235 #ifde‡
DEBUG_HELLO


236 
	`DEBUG
(
LOG_DEBUG
, 0, "rcvd HELLO from %s, seqno %lu",

237 
	`ù_to_°r
(
hñlo_de°
), 
hñlo_£qno
);

241 i‡(
ª˚ive_n_hñlos
)

242 
°©e
 = 
INVALID
;

244 
°©e
 = 
VALID
;

246 
timeout
 = 
ALLOWED_HELLO_LOSS
 * 
hñlo_öãrvÆ
 + 
ROUTE_TIMEOUT_SLACK
;

248 i‡(!
π
) {

252 
π
 = 
	`π_èbÀ_ö£π
(
hñlo_de°
, hello_dest, 1,

253 
hñlo_£qno
, 
timeout
, 
°©e
, 
Êags
, 
ifödex
);

255 i‡(
Êags
 & 
RT_UNIDIR
) {

256 
	`DEBUG
(
LOG_INFO
, 0, "%sÇew NEIGHBOR,Üink UNI-DIR",

257 
	`ù_to_°r
(
π
->
de°_addr
));

259 
	`DEBUG
(
LOG_INFO
, 0, "%†√w NEIGHBOR!", 
	`ù_to_°r
(
π
->
de°_addr
));

261 
π
->
hñlo_˙t
 = 1;

265 i‡((
Êags
 & 
RT_UNIDIR
Ë&& 
π
->
°©e
 =
VALID
 &&Ñt->
h˙t
 > 1) {

266 
hñlo_upd©e
;

269 i‡(
ª˚ive_n_hñlos
 && 
π
->
hñlo_˙t
 < (receive_n_hellos - 1)) {

270 i‡(
	`timevÆ_diff
(&
now
, &
π
->
œ°_hñlo_time
) <

271 (Ë(
hñlo_öãrvÆ
 + hello_interval / 2))

272 
π
->
hñlo_˙t
++;

274 
π
->
hñlo_˙t
 = 1;

276 
	`mem˝y
(&
π
->
œ°_hñlo_time
, &
now
, (
timevÆ
));

279 
	`π_èbÀ_upd©e
(
π
, 
hñlo_de°
, 1, 
hñlo_£qno
, 
timeout
, 
VALID
, 
Êags
);

282 
hñlo_upd©e
:

284 
	`hñlo_upd©e_timeout
(
π
, &
now
, 
ALLOWED_HELLO_LOSS
 * 
hñlo_öãrvÆ
);

286 
	}
}

289 
	#HELLO_DELAY
 50

	)

293 
NS_INLINE
 
NS_CLASS
 
	$hñlo_upd©e_timeout
(
π_èbÀ_t
 * 
π
,

294 
timevÆ
 *
now
, 
time
)

296 
	`timî_£t_timeout
(&
π
->
hñlo_timî
, 
time
 + 
HELLO_DELAY
);

297 
	`mem˝y
(&
π
->
œ°_hñlo_time
, 
now
, (
timevÆ
));

298 
	}
}

	@aodv_hello.h

23 #i‚de‡
_AODV_HELLO_H


24 
	#_AODV_HELLO_H


	)

26 #i‚de‡
NS_NO_GLOBALS


27 
	~"defs.h
"

28 
	~"aodv_ºï.h
"

29 
	~"routög_èbÀ.h
"

32 #i‚de‡
NS_NO_DECLARATIONS


34 
	#ROUTE_TIMEOUT_SLACK
 100

	)

35 
	#JITTER_INTERVAL
 100

	)

37 
hñlo_°¨t
();

38 
hñlo_°›
();

39 
hñlo_£nd
(*
¨g
);

40 
hñlo_¥o˚ss
(
RREP
 * 
hñlo
, 
ºïÀn
, 
ifödex
);

41 
hñlo_¥o˚ss_n⁄_hñlo
(
AODV_msg
 * 
aodv_msg
, 
ö_addr
 
sour˚
,

42 
ifödex
);

43 
NS_INLINE
 
hñlo_upd©e_timeout
(
π_èbÀ_t
 * 
π
, 
timevÆ
 *
now
,

44 
time
);

46 #ifde‡
NS_PORT


47 
hñlo_jôãr
();

	@aodv_neighbor.c

23 #ifde‡
NS_PORT


24 
	~"ns-2/aodv-uu.h
"

26 
	~"aodv_√ighb‹.h
"

27 
	~"aodv_ªº.h
"

28 
	~"aodv_hñlo.h
"

29 
	~"aodv_sockë.h
"

30 
	~"routög_èbÀ.h
"

31 
	~"∑øms.h
"

32 
	~"defs.h
"

33 
	~"debug.h
"

35 
Œ„edback
;

40 
NS_CLASS
 
	$√ighb‹_add
(
AODV_msg
 * 
aodv_msg
, 
ö_addr
 
sour˚
,

41 
ifödex
)

43 
timevÆ
 
now
;

44 
π_èbÀ_t
 *
π
 = 
NULL
;

45 
u_öt32_t
 
£qno
 = 0;

47 
	`gëtimeofday
(&
now
, 
NULL
);

49 
π
 = 
	`π_èbÀ_föd
(
sour˚
);

51 i‡(!
π
) {

52 
	`DEBUG
(
LOG_DEBUG
, 0, "%†√w NEIGHBOR!", 
	`ù_to_°r
(
sour˚
));

53 
π
 = 
	`π_èbÀ_ö£π
(
sour˚
, source, 1, 0,

54 
ACTIVE_ROUTE_TIMEOUT
, 
VALID
, 0, 
ifödex
);

57 i‡(
π
->
Êags
 & 
RT_UNIDIR
)

60 i‡(
π
->
de°_£qno
 != 0)

61 
£qno
 = 
π
->
de°_£qno
;

63 
	`π_èbÀ_upd©e
(
π
, 
sour˚
, 1, 
£qno
, 
ACTIVE_ROUTE_TIMEOUT
,

64 
VALID
, 
π
->
Êags
);

67 i‡(!
Œ„edback
 && 
π
->
hñlo_timî
.
u£d
)

68 
	`hñlo_upd©e_timeout
(
π
, &
now
, 
ALLOWED_HELLO_LOSS
 * 
HELLO_INTERVAL
);

71 
	}
}

73 
NS_CLASS
 
	$√ighb‹_lök_bªak
(
π_èbÀ_t
 * 
π
)

77 
RERR
 *
ªº
 = 
NULL
;

78 
π_èbÀ_t
 *
π_u
;

79 
ö_addr
 
ªº_uniˇ°_de°
;

80 
i
;

82 
ªº_uniˇ°_de°
.
s_addr
 = 0;

84 i‡(!
π
)

87 i‡(
π
->
h˙t
 != 1) {

88 
	`DEBUG
(
LOG_DEBUG
, 0, "%s isÇotáÇeighbor, hcnt=%d!!!",

89 
	`ù_to_°r
(
π
->
de°_addr
),Ñt->
h˙t
);

93 
	`DEBUG
(
LOG_DEBUG
, 0, "Lök %†down!", 
	`ù_to_°r
(
π
->
de°_addr
));

96 
	`π_èbÀ_övÆid©e
(
π
);

99 i‡(
π
->
≈ªc
 && !‘t->
Êags
 & 
RT_REPAIR
)) {

100 
ªº
 = 
	`ªº_¸óã
(0, 
π
->
de°_addr
,Ñt->
de°_£qno
);

101 
	`DEBUG
(
LOG_DEBUG
, 0, "Added %sás unreachable, seqno=%lu",

102 
	`ù_to_°r
(
π
->
de°_addr
),Ñt->
de°_£qno
);

104 i‡(
π
->
≈ªc
 == 1)

105 
ªº_uniˇ°_de°
 = 
	`FIRST_PREC
(
π
->
¥ecurs‹s
)->
√ighb‹
;

109 i‡(!(
π
->
Êags
 & 
RT_REPAIR
))

110 
	`¥ecurs‹_li°_de°roy
(
π
);

116 
i
 = 0; i < 
RT_TABLESIZE
; i++) {

117 
li°_t
 *
pos
;

118 
	`li°_f‹óch
(
pos
, &
π_tbl
.
tbl
[
i
]) {

119 
π_èbÀ_t
 *
π_u
 = (π_èbÀ_à*Ë
pos
;

121 i‡(
π_u
->
°©e
 =
VALID
 &&

122 
π_u
->
√xt_h›
.
s_addr
 =
π
->
de°_addr
.s_addr &&

123 
π_u
->
de°_addr
.
s_addr
 !
π
->dest_addr.s_addr) {

129 i‡((
π
->
Êags
 & 
RT_REPAIR
Ë&& 
π_u
->
h˙t
 <
MAX_REPAIR_TTL
) {

131 
π_u
->
Êags
 |
RT_REPAIR
;

132 
	`DEBUG
(
LOG_DEBUG
, 0, "Marking %s for REPAIR",

133 
	`ù_to_°r
(
π_u
->
de°_addr
));

135 
	`π_èbÀ_övÆid©e
(
π_u
);

139 
	`π_èbÀ_övÆid©e
(
π_u
);

141 i‡(
π_u
->
≈ªc
) {

143 i‡(!
ªº
) {

144 
ªº
 =

145 
	`ªº_¸óã
(0, 
π_u
->
de°_addr
,Ñt_u->
de°_£qno
);

147 i‡(
π_u
->
≈ªc
 == 1)

148 
ªº_uniˇ°_de°
 =

149 
	`FIRST_PREC
(
π_u
->
¥ecurs‹s
)->
√ighb‹
;

151 
	`DEBUG
(
LOG_DEBUG
, 0,

153 
	`ù_to_°r
(
π_u
->
de°_addr
),Ñt_u->
de°_£qno
);

157 
	`ªº_add_ude°
(
ªº
, 
π_u
->
de°_addr
,Ñt_u->
de°_£qno
);

159 i‡(
ªº_uniˇ°_de°
.
s_addr
) {

160 
li°_t
 *
pos2
;

161 
	`li°_f‹óch
(
pos2
, &
π_u
->
¥ecurs‹s
) {

162 
¥ecurs‹_t
 *
¥
 = (¥ecurs‹_à*Ë
pos2
;

163 i‡(
¥
->
√ighb‹
.
s_addr
 !=

164 
ªº_uniˇ°_de°
.
s_addr
) {

165 
ªº_uniˇ°_de°
.
s_addr
 = 0;

170 
	`DEBUG
(
LOG_DEBUG
, 0,

172 
	`ù_to_°r
(
π_u
->
de°_addr
),Ñt_u->
de°_£qno
);

175 
	`¥ecurs‹_li°_de°roy
(
π_u
);

180 i‡(
ªº
) {

181 
	`DEBUG
(
LOG_DEBUG
, 0, "RERR cª©ed, %d byãs.", 
	`RERR_CALC_SIZE
(
ªº
));

183 
π_u
 = 
	`π_èbÀ_föd
(
ªº_uniˇ°_de°
);

185 i‡(
π_u
 && 
ªº
->
de°_cou¡
 =1 && 
ªº_uniˇ°_de°
.
s_addr
)

186 
	`aodv_sockë_£nd
((
AODV_msg
 *Ë
ªº
,

187 
ªº_uniˇ°_de°
,

188 
	`RERR_CALC_SIZE
(
ªº
), 1,

189 &
	`DEV_IFINDEX
(
π_u
->
ifödex
));

191 i‡(
ªº
->
de°_cou¡
 > 0) {

194 
i
 = 0; i < 
MAX_NR_INTERFACES
; i++) {

195 
ö_addr
 
de°
;

197 i‡(!
	`DEV_NR
(
i
).
íabÀd
)

199 
de°
.
s_addr
 = 
AODV_BROADCAST
;

200 
	`aodv_sockë_£nd
((
AODV_msg
 *Ë
ªº
, 
de°
,

201 
	`RERR_CALC_SIZE
(
ªº
), 1, &
	`DEV_NR
(
i
));

205 
	}
}

	@aodv_neighbor.h

23 #i‚de‡
_AODV_NEIGHBOR_H


24 
	#_AODV_NEIGHBOR_H


	)

26 #i‚de‡
NS_NO_GLOBALS


27 
	~"defs.h
"

28 
	~"routög_èbÀ.h
"

31 #i‚de‡
NS_NO_DECLARATIONS


33 
√ighb‹_add
(
AODV_msg
 * 
aodv_msg
, 
ö_addr
 
sour˚
,

34 
ifödex
);

35 
√ighb‹_lök_bªak
(
π_èbÀ_t
 * 
π
);

	@aodv_rerr.c

24 #ifde‡
NS_PORT


25 
	~"ns-2/aodv-uu.h
"

27 
	~<√töë/ö.h
>

28 
	~"aodv_ªº.h
"

29 
	~"routög_èbÀ.h
"

30 
	~"aodv_sockë.h
"

31 
	~"aodv_timeout.h
"

32 
	~"defs.h
"

33 
	~"debug.h
"

34 
	~"∑øms.h
"

38 
RERR
 *
NS_CLASS
 
	$ªº_¸óã
(
u_öt8_t
 
Êags
, 
ö_addr
 
de°_addr
,

39 
u_öt32_t
 
de°_£qno
)

41 
RERR
 *
ªº
;

43 
	`DEBUG
(
LOG_DEBUG
, 0, "Assembling RERRábout %s seqno=%d",

44 
	`ù_to_°r
(
de°_addr
), 
de°_£qno
);

46 
ªº
 = (
RERR
 *Ë
	`aodv_sockë_√w_msg
();

47 
ªº
->
ty≥
 = 
AODV_RERR
;

48 
ªº
->
n
 = (
Êags
 & 
RERR_NODELETE
 ? 1 : 0);

49 
ªº
->
ªs1
 = 0;

50 
ªº
->
ªs2
 = 0;

51 
ªº
->
de°_addr
 = de°_addr.
s_addr
;

52 
ªº
->
de°_£qno
 = 
	`ht⁄l
(dest_seqno);

53 
ªº
->
de°_cou¡
 = 1;

55  
ªº
;

56 
	}
}

58 
NS_CLASS
 
	$ªº_add_ude°
(
RERR
 * 
ªº
, 
ö_addr
 
ude°
,

59 
u_öt32_t
 
ude°_£qno
)

61 
RERR_ude°
 *
ud
;

63 
ud
 = (
RERR_ude°
 *Ë((*Ë
ªº
 + 
	`RERR_CALC_SIZE
(rerr));

64 
ud
->
de°_addr
 = 
ude°
.
s_addr
;

65 
ud
->
de°_£qno
 = 
	`ht⁄l
(
ude°_£qno
);

66 
ªº
->
de°_cou¡
++;

67 
	}
}

70 
NS_CLASS
 
	$ªº_¥o˚ss
(
RERR
 * 
ªº
, 
ªºÀn
, 
ö_addr
 
ù_§c
,

71 
ö_addr
 
ù_d°
)

73 
RERR
 *
√w_ªº
 = 
NULL
;

74 
RERR_ude°
 *
ude°
;

75 
π_èbÀ_t
 *
π
;

76 
u_öt32_t
 
ªº_de°_£qno
;

77 
ö_addr
 
ude°_addr
, 
ªº_uniˇ°_de°
;

78 
i
;

80 
ªº_uniˇ°_de°
.
s_addr
 = 0;

82 
	`DEBUG
(
LOG_DEBUG
, 0, "ù_§c=%s", 
	`ù_to_°r
(
ù_§c
));

84 
	`log_pkt_fõlds
((
AODV_msg
 *Ë
ªº
);

86 i‡(
ªºÀn
 < ((Ë
	`RERR_CALC_SIZE
(
ªº
))) {

87 
	`Æog
(
LOG_WARNING
, 0, 
__FUNCTION__
,

89 
ªºÀn
, 
	`ù_to_°r
(
ù_§c
), ip_to_°r(
ù_d°
),

90 
	`RERR_CALC_SIZE
(
ªº
));

96 
ude°
 = 
	`RERR_UDEST_FIRST
(
ªº
);

98 
ªº
->
de°_cou¡
) {

100 
ude°_addr
.
s_addr
 = 
ude°
->
de°_addr
;

101 
ªº_de°_£qno
 = 
	`¡ohl
(
ude°
->
de°_£qno
);

102 
	`DEBUG
(
LOG_DEBUG
, 0, "unreachable dest=%s seqno=%lu",

103 
	`ù_to_°r
(
ude°_addr
), 
ªº_de°_£qno
);

105 
π
 = 
	`π_èbÀ_föd
(
ude°_addr
);

107 i‡(
π
 &&Ñt->
°©e
 =
VALID
 &&Ñt->
√xt_h›
.
s_addr
 =
ù_§c
.s_addr) {

112 i‡(0 && (
öt32_t
Ë
π
->
de°_£qno
 > (öt32_tË
ªº_de°_£qno
) {

113 
	`DEBUG
(
LOG_DEBUG
, 0, "Udest ignored because of seqno");

114 
ude°
 = 
	`RERR_UDEST_NEXT
(udest);

115 
ªº
->
de°_cou¡
--;

118 
	`DEBUG
(
LOG_DEBUG
, 0, "removingÑte %s - WAS IN RERR!!",

119 
	`ù_to_°r
(
ude°_addr
));

121 #ifde‡
NS_PORT


122 
	`öãrÁ˚Queue
((
nßddr_t
Ë
ude°_addr
.
s_addr
, 
IFQ_DROP_BY_DEST
);

125 i‡(!
ªº
->
n
) {

126 
	`π_èbÀ_övÆid©e
(
π
);

130 
π
->
de°_£qno
 = 
ªº_de°_£qno
;

135 i‡(
π
->
≈ªc
 && !‘t->
Êags
 & 
RT_REPAIR
)) {

137 i‡(!
√w_ªº
) {

138 
u_öt8_t
 
Êags
 = 0;

140 i‡(
ªº
->
n
)

141 
Êags
 |
RERR_NODELETE
;

143 
√w_ªº
 = 
	`ªº_¸óã
(
Êags
, 
π
->
de°_addr
,

144 
π
->
de°_£qno
);

145 
	`DEBUG
(
LOG_DEBUG
, 0, "Added %sás unreachable, seqno=%lu",

146 
	`ù_to_°r
(
π
->
de°_addr
),Ñt->
de°_£qno
);

148 i‡(
π
->
≈ªc
 == 1)

149 
ªº_uniˇ°_de°
 =

150 
	`FIRST_PREC
(
π
->
¥ecurs‹s
)->
√ighb‹
;

154 
	`ªº_add_ude°
(
√w_ªº
, 
π
->
de°_addr
,Ñt->
de°_£qno
);

156 
	`DEBUG
(
LOG_DEBUG
, 0, "Added %sás unreachable, seqno=%lu",

157 
	`ù_to_°r
(
π
->
de°_addr
),Ñt->
de°_£qno
);

159 i‡(
ªº_uniˇ°_de°
.
s_addr
) {

160 
li°_t
 *
pos2
;

161 
	`li°_f‹óch
(
pos2
, &
π
->
¥ecurs‹s
) {

162 
¥ecurs‹_t
 *
¥
 = (¥ecurs‹_à*Ë
pos2
;

163 i‡(
¥
->
√ighb‹
.
s_addr
 !
ªº_uniˇ°_de°
.s_addr) {

164 
ªº_uniˇ°_de°
.
s_addr
 = 0;

171 
	`DEBUG
(
LOG_DEBUG
, 0,

176 i‡(
π
->
°©e
 =
INVALID
)

177 
	`¥ecurs‹_li°_de°roy
(
π
);

179 
	`DEBUG
(
LOG_DEBUG
, 0, "Ign‹ög UDEST %s", 
	`ù_to_°r
(
ude°_addr
));

181 
ude°
 = 
	`RERR_UDEST_NEXT
(udest);

182 
ªº
->
de°_cou¡
--;

186 i‡(
√w_ªº
) {

188 
π
 = 
	`π_èbÀ_föd
(
ªº_uniˇ°_de°
);

190 i‡(
π
 && 
√w_ªº
->
de°_cou¡
 =1 && 
ªº_uniˇ°_de°
.
s_addr
)

191 
	`aodv_sockë_£nd
((
AODV_msg
 *Ë
√w_ªº
,

192 
ªº_uniˇ°_de°
,

193 
	`RERR_CALC_SIZE
(
√w_ªº
), 1,

194 &
	`DEV_IFINDEX
(
π
->
ifödex
));

196 i‡(
√w_ªº
->
de°_cou¡
 > 0) {

199 
i
 = 0; i < 
MAX_NR_INTERFACES
; i++) {

200 
ö_addr
 
de°
;

202 i‡(!
	`DEV_NR
(
i
).
íabÀd
)

204 
de°
.
s_addr
 = 
AODV_BROADCAST
;

205 
	`aodv_sockë_£nd
((
AODV_msg
 *Ë
√w_ªº
, 
de°
,

206 
	`RERR_CALC_SIZE
(
√w_ªº
), 1, &
	`DEV_NR
(
i
));

210 
	}
}

	@aodv_rerr.h

23 #i‚de‡
_AODV_RERR_H


24 
	#_AODV_RERR_H


	)

26 #i‚de‡
NS_NO_GLOBALS


27 
	~<ídün.h
>

29 
	~"defs.h
"

30 
	~"routög_èbÀ.h
"

33 
	#RERR_NODELETE
 0x1

	)

36 
u_öt8_t
 
	mty≥
;

37 #i‡
deföed
(
__LITTLE_ENDIAN
)

38 
u_öt8_t
 
	mªs1
:7;

39 
u_öt8_t
 
	mn
:1;

40 #ñi‡
deföed
(
__BIG_ENDIAN
)

41 
u_öt8_t
 
	mn
:1;

42 
u_öt8_t
 
	mªs1
:7;

46 
u_öt8_t
 
	mªs2
;

47 
u_öt8_t
 
	mde°_cou¡
;

48 
u_öt32_t
 
	mde°_addr
;

49 
u_öt32_t
 
	mde°_£qno
;

50 } 
	tRERR
;

52 
	#RERR_SIZE
 (
RERR
)

	)

56 
u_öt32_t
 
	mde°_addr
;

57 
u_öt32_t
 
	mde°_£qno
;

58 } 
	tRERR_ude°
;

60 
	#RERR_UDEST_SIZE
 (
RERR_ude°
)

	)

64 
	#RERR_CALC_SIZE
(
ªº
Ë(
RERR_SIZE
 + (ªº->
de°_cou¡
-1)*
RERR_UDEST_SIZE
)

	)

65 
	#RERR_UDEST_FIRST
(
ªº
Ë((
RERR_ude°
 *)&ªº->
de°_addr
)

	)

66 
	#RERR_UDEST_NEXT
(
ude°
Ë((
RERR_ude°
 *)((*)ude° + 
RERR_UDEST_SIZE
))

	)

69 #i‚de‡
NS_NO_DECLARATIONS


70 
RERR
 *
ªº_¸óã
(
u_öt8_t
 
Êags
, 
ö_addr
 
de°_addr
,

71 
u_öt32_t
 
de°_£qno
);

72 
ªº_add_ude°
(
RERR
 * 
ªº
, 
ö_addr
 
ude°
, 
u_öt32_t
 
ude°_£qno
);

73 
ªº_¥o˚ss
(
RERR
 * 
ªº
, 
ªºÀn
, 
ö_addr
 
ù_§c
,

74 
ö_addr
 
ù_d°
);

	@aodv_rrep.c

24 #ifde‡
NS_PORT


25 
	~"ns-2/aodv-uu.h
"

27 
	~<√töë/ö.h
>

28 
	~"aodv_ºï.h
"

29 
	~"aodv_√ighb‹.h
"

30 
	~"aodv_hñlo.h
"

31 
	~"routög_èbÀ.h
"

32 
	~"aodv_timeout.h
"

33 
	~"timî_queue.h
"

34 
	~"aodv_sockë.h
"

35 
	~"defs.h
"

36 
	~"debug.h
"

37 
	~"∑øms.h
"

39 
unidú_hack
, 
›timized_hñlos
, 
Œ„edback
;

43 
RREP
 *
NS_CLASS
 
	$ºï_¸óã
(
u_öt8_t
 
Êags
,

44 
u_öt8_t
 
¥efix
,

45 
u_öt8_t
 
h˙t
,

46 
ö_addr
 
de°_addr
,

47 
u_öt32_t
 
de°_£qno
,

48 
ö_addr
 
‹ig_addr
, 
u_öt32_t
 
li„
)

50 
RREP
 *
ºï
;

52 
ºï
 = (
RREP
 *Ë
	`aodv_sockë_√w_msg
();

53 
ºï
->
ty≥
 = 
AODV_RREP
;

54 
ºï
->
ªs1
 = 0;

55 
ºï
->
ªs2
 = 0;

56 
ºï
->
¥efix
 =Örefix;

57 
ºï
->
h˙t
 = hcnt;

58 
ºï
->
de°_addr
 = de°_addr.
s_addr
;

59 
ºï
->
de°_£qno
 = 
	`ht⁄l
(dest_seqno);

60 
ºï
->
‹ig_addr
 = orig_addr.
s_addr
;

61 
ºï
->
li„time
 = 
	`ht⁄l
(
li„
);

63 i‡(
Êags
 & 
RREP_REPAIR
)

64 
ºï
->
r
 = 1;

65 i‡(
Êags
 & 
RREP_ACK
)

66 
ºï
->
a
 = 1;

69 #ifde‡
DEBUG_OUTPUT


70 i‡(
ºï
->
de°_addr
 !ºï->
‹ig_addr
) {

71 
	`DEBUG
(
LOG_DEBUG
, 0, "Assembled RREP:");

72 
	`log_pkt_fõlds
((
AODV_msg
 *Ë
ºï
);

76  
ºï
;

77 
	}
}

79 
RREP_ack
 *
NS_CLASS
 
	$ºï_ack_¸óã
()

81 
RREP_ack
 *
ºï_ack
;

83 
ºï_ack
 = (
RREP_ack
 *Ë
	`aodv_sockë_√w_msg
();

84 
ºï_ack
->
ty≥
 = 
AODV_RREP_ACK
;

86 
	`DEBUG
(
LOG_DEBUG
, 0, "Assembled RREP_ack");

88  
ºï_ack
;

89 
	}
}

91 
NS_CLASS
 
	$ºï_ack_¥o˚ss
(
RREP_ack
 * 
ºï_ack
, 
ºï_ackÀn
,

92 
ö_addr
 
ù_§c
, ö_add∏
ù_d°
)

94 
π_èbÀ_t
 *
π
;

96 
π
 = 
	`π_èbÀ_föd
(
ù_§c
);

98 i‡(
π
 =
NULL
) {

99 
	`DEBUG
(
LOG_WARNING
, 0, "NÿRREP_ACKÉx≥˘ed f‹ %s", 
	`ù_to_°r
(
ù_§c
));

103 
	`DEBUG
(
LOG_DEBUG
, 0, "Re˚ived RREP_ACK from %s", 
	`ù_to_°r
(
ù_§c
));

106 
	`timî_ªmove
(&
π
->
ack_timî
);

107 
	}
}

109 
AODV_ext
 *
NS_CLASS
 
	$ºï_add_ext
(
RREP
 * 
ºï
, 
ty≥
, 
off£t
,

110 
Àn
, *
d©a
)

112 
AODV_ext
 *
ext
 = 
NULL
;

114 i‡(
off£t
 < 
RREP_SIZE
)

115  
NULL
;

117 
ext
 = (
AODV_ext
 *Ë((*Ë
ºï
 + 
off£t
);

119 
ext
->
ty≥
 =Åype;

120 
ext
->
Àngth
 = 
Àn
;

122 
	`mem˝y
(
	`AODV_EXT_DATA
(
ext
), 
d©a
, 
Àn
);

124  
ext
;

125 
	}
}

127 
NS_CLASS
 
	$ºï_£nd
(
RREP
 * 
ºï
, 
π_èbÀ_t
 * 
ªv_π
,

128 
π_èbÀ_t
 * 
fwd_π
, 
size
)

130 
u_öt8_t
 
ºï_Êags
 = 0;

131 
ö_addr
 
de°
;

133 i‡(!
ªv_π
) {

134 
	`DEBUG
(
LOG_WARNING
, 0, "Can't send RREP,Ñev_rt = NULL!");

138 
de°
.
s_addr
 = 
ºï
->
de°_addr
;

141 i‡((
ªv_π
->
°©e
 =
VALID
 &&Ñev_π->
Êags
 & 
RT_UNIDIR
) ||

142 (
ªv_π
->
h˙t
 =1 && 
unidú_hack
)) {

143 
π_èbÀ_t
 *
√ighb‹
 = 
	`π_èbÀ_föd
(
ªv_π
->
√xt_h›
);

145 i‡(
√ighb‹
 &&Çeighb‹->
°©e
 =
VALID
 && !√ighb‹->
ack_timî
.
u£d
) {

149 
ºï_Êags
 |
RREP_ACK
;

150 
√ighb‹
->
Êags
 |
RT_UNIDIR
;

155 
	`timî_ªmove
(&
√ighb‹
->
hñlo_timî
);

156 
	`√ighb‹_lök_bªak
(
√ighb‹
);

158 
	`DEBUG
(
LOG_DEBUG
, 0, "LinkÅo %s is unidirectional!",

159 
	`ù_to_°r
(
√ighb‹
->
de°_addr
));

161 
	`timî_£t_timeout
(&
√ighb‹
->
ack_timî
, 
NEXT_HOP_WAIT
);

165 
	`DEBUG
(
LOG_DEBUG
, 0, "Sending RREPÅoÇext hop %sábout %s->%s",

166 
	`ù_to_°r
(
ªv_π
->
√xt_h›
), ip_to_°r‘ev_π->
de°_addr
),

167 
	`ù_to_°r
(
de°
));

169 
	`aodv_sockë_£nd
((
AODV_msg
 *Ë
ºï
, 
ªv_π
->
√xt_h›
, 
size
, 
MAXTTL
,

170 &
	`DEV_IFINDEX
(
ªv_π
->
ifödex
));

173 i‡(
fwd_π
) {

174 
	`¥ecurs‹_add
(
fwd_π
, 
ªv_π
->
√xt_h›
);

175 
	`¥ecurs‹_add
(
ªv_π
, 
fwd_π
->
√xt_h›
);

178 i‡(!
Œ„edback
 && 
›timized_hñlos
)

179 
	`hñlo_°¨t
();

180 
	}
}

182 
NS_CLASS
 
	$ºï_f‹w¨d
(
RREP
 * 
ºï
, 
size
, 
π_èbÀ_t
 * 
ªv_π
,

183 
π_èbÀ_t
 * 
fwd_π
, 
âl
)

186 i‡(!
fwd_π
 || !
ªv_π
) {

187 
	`DEBUG
(
LOG_WARNING
, 0, "CouldÇot forward RREP because of NULLÑoute!");

191 i‡(!
ºï
) {

192 
	`DEBUG
(
LOG_WARNING
, 0, "No RREPÅo forward!");

196 
	`DEBUG
(
LOG_DEBUG
, 0, "F‹w¨dög RREPÅÿ%s", 
	`ù_to_°r
(
ªv_π
->
√xt_h›
));

201 
π_èbÀ_t
 *
√ighb‹
;

206 i‡(
ªv_π
->
de°_addr
.
s_addr
 !ªv_π->
√xt_h›
.s_addr)

207 
√ighb‹
 = 
	`π_èbÀ_föd
(
ªv_π
->
√xt_h›
);

209 
√ighb‹
 = 
ªv_π
;

211 i‡(
√ighb‹
 && !√ighb‹->
ack_timî
.
u£d
) {

215 
ºï
->
a
 = 1;

216 
√ighb‹
->
Êags
 |
RT_UNIDIR
;

218 
	`timî_£t_timeout
(&
√ighb‹
->
ack_timî
, 
NEXT_HOP_WAIT
);

222 
ºï
 = (
RREP
 *Ë
	`aodv_sockë_queue_msg
((
AODV_msg
 *Ëºï, 
size
);

223 
ºï
->
h˙t
 = 
fwd_π
->hcnt;

225 
	`aodv_sockë_£nd
((
AODV_msg
 *Ë
ºï
, 
ªv_π
->
√xt_h›
, 
size
, 
âl
,

226 &
	`DEV_IFINDEX
(
ªv_π
->
ifödex
));

228 
	`¥ecurs‹_add
(
fwd_π
, 
ªv_π
->
√xt_h›
);

229 
	`¥ecurs‹_add
(
ªv_π
, 
fwd_π
->
√xt_h›
);

231 
	`π_èbÀ_upd©e_timeout
(
ªv_π
, 
ACTIVE_ROUTE_TIMEOUT
);

232 
	}
}

235 
NS_CLASS
 
	$ºï_¥o˚ss
(
RREP
 * 
ºï
, 
ºïÀn
, 
ö_addr
 
ù_§c
,

236 
ö_addr
 
ù_d°
, 
ù_âl
,

237 
ifödex
)

239 
u_öt32_t
 
ºï_li„time
, 
ºï_£qno
, 
ºï_√w_h˙t
;

240 
u_öt8_t
 
¥e_ª∑ú_h˙t
 = 0, 
¥e_ª∑ú_Êags
 = 0;

241 
π_èbÀ_t
 *
fwd_π
, *
ªv_π
;

242 
AODV_ext
 *
ext
;

243 
exéí
 = 0;

244 
π_Êags
 = 0;

245 
ö_addr
 
ºï_de°
, 
ºï_‹ig
;

246 #ifde‡
CONFIG_GATEWAY


247 
ö_addr
 
öë_de°_addr
;

248 
öë_ºï
 = 0;

252 
ºï_de°
.
s_addr
 = 
ºï
->
de°_addr
;

253 
ºï_‹ig
.
s_addr
 = 
ºï
->
‹ig_addr
;

254 
ºï_£qno
 = 
	`¡ohl
(
ºï
->
de°_£qno
);

255 
ºï_li„time
 = 
	`¡ohl
(
ºï
->
li„time
);

257 
ºï_√w_h˙t
 = 
ºï
->
h˙t
 + 1;

259 i‡(
ºïÀn
 < (Ë
RREP_SIZE
) {

260 
	`Æog
(
LOG_WARNING
, 0, 
__FUNCTION__
,

262 " from %†tÿ%s", 
ºïÀn
, 
	`ù_to_°r
(
ù_§c
), ip_to_°r(
ù_d°
));

267 i‡(
ºï_de°
.
s_addr
 =
	`DEV_IFINDEX
(
ifödex
).
ùaddr
.s_addr)

270 
	`DEBUG
(
LOG_DEBUG
, 0, "from %sábout %s->%s",

271 
	`ù_to_°r
(
ù_§c
), ip_to_°r(
ºï_‹ig
), ip_to_°r(
ºï_de°
));

272 #ifde‡
DEBUG_OUTPUT


273 
	`log_pkt_fõlds
((
AODV_msg
 *Ë
ºï
);

277 
ext
 = (
AODV_ext
 *Ë((*Ë
ºï
 + 
RREP_SIZE
);

279 (
ºïÀn
 - 
exéí
Ë> 
RREP_SIZE
) {

280 
ext
->
ty≥
) {

281 
RREP_EXT
:

282 
	`DEBUG
(
LOG_INFO
, 0, "RREP include EXTENSION");

285 #ifde‡
CONFIG_GATEWAY


286 
RREP_INET_DEST_EXT
:

287 i‡(
ext
->
Àngth
 =(
u_öt32_t
)) {

291 
	`mem˝y
(&
öë_de°_addr
, 
	`AODV_EXT_DATA
(
ext
),Éxt->
Àngth
);

293 
	`DEBUG
(
LOG_DEBUG
, 0, "RREP_INET_DEST_EXT: <%s>",

294 
	`ù_to_°r
(
öë_de°_addr
));

296 
π_Êags
 |
RT_GATEWAY
;

297 
öë_ºï
 = 1;

302 
	`Æog
(
LOG_WARNING
, 0, 
__FUNCTION__
, "Unknown or badÉxtension %d",

303 
ext
->
ty≥
);

306 
exéí
 +
	`AODV_EXT_SIZE
(
ext
);

307 
ext
 = 
	`AODV_EXT_NEXT
(ext);

312 
fwd_π
 = 
	`π_èbÀ_föd
(
ºï_de°
);

313 
ªv_π
 = 
	`π_èbÀ_föd
(
ºï_‹ig
);

315 i‡(!
fwd_π
) {

317 
fwd_π
 = 
	`π_èbÀ_ö£π
(
ºï_de°
, 
ù_§c
, 
ºï_√w_h˙t
, 
ºï_£qno
,

318 
ºï_li„time
, 
VALID
, 
π_Êags
, 
ifödex
);

319 } i‡(
fwd_π
->
de°_£qno
 == 0 ||

320 (
öt32_t
Ë
ºï_£qno
 > (öt32_tË
fwd_π
->
de°_£qno
 ||

321 (
ºï_£qno
 =
fwd_π
->
de°_£qno
 &&

322 (
fwd_π
->
°©e
 =
INVALID
 || fwd_π->
Êags
 & 
RT_UNIDIR
 ||

323 
ºï_√w_h˙t
 < 
fwd_π
->
h˙t
))) {

324 
¥e_ª∑ú_h˙t
 = 
fwd_π
->
h˙t
;

325 
¥e_ª∑ú_Êags
 = 
fwd_π
->
Êags
;

327 
fwd_π
 = 
	`π_èbÀ_upd©e
(fwd_π, 
ù_§c
, 
ºï_√w_h˙t
, 
ºï_£qno
,

328 
ºï_li„time
, 
VALID
,

329 
π_Êags
 | 
fwd_π
->
Êags
);

331 i‡(
fwd_π
->
h˙t
 > 1) {

332 
	`DEBUG
(
LOG_DEBUG
, 0,

334 
fwd_π
->
h˙t
, fwd_π->
de°_£qno
);

342 i‡(
ºï
->
a
) {

343 
RREP_ack
 *
ºï_ack
;

345 
ºï_ack
 = 
	`ºï_ack_¸óã
();

346 
	`aodv_sockë_£nd
((
AODV_msg
 *Ë
ºï_ack
, 
fwd_π
->
√xt_h›
,

347 
NEXT_HOP_WAIT
, 
MAXTTL
, &
	`DEV_IFINDEX
(
fwd_π
->
ifödex
));

349 
ºï
->
a
 = 0;

354 i‡(
ºï_‹ig
.
s_addr
 =
	`DEV_IFINDEX
(
ifödex
).
ùaddr
.s_addr) {

355 #ifde‡
CONFIG_GATEWAY


356 i‡(
öë_ºï
) {

357 
π_èbÀ_t
 *
öë_π
;

358 
öë_π
 = 
	`π_èbÀ_föd
(
öë_de°_addr
);

363 i‡(!
öë_π
)

364 
	`π_èbÀ_ö£π
(
öë_de°_addr
, 
ºï_de°
, 
ºï_√w_h˙t
, 0,

365 
ºï_li„time
, 
VALID
, 
RT_INET_DEST
, 
ifödex
);

366 i‡(
öë_π
->
°©e
 =
INVALID
 || 
ºï_√w_h˙t
 < i√t_π->
h˙t
) {

367 
	`π_èbÀ_upd©e
(
öë_π
, 
ºï_de°
, 
ºï_√w_h˙t
, 0,

368 
ºï_li„time
, 
VALID
, 
RT_INET_DEST
 |

369 
öë_π
->
Êags
);

371 
	`DEBUG
(
LOG_DEBUG
, 0, "INET Response, butÇo update %s",

372 
	`ù_to_°r
(
öë_de°_addr
));

382 i‡(
¥e_ª∑ú_Êags
 & 
RT_REPAIR
) {

383 i‡(
fwd_π
->
h˙t
 > 
¥e_ª∑ú_h˙t
) {

384 
RERR
 *
ªº
;

385 
u_öt8_t
 
ªº_Êags
 = 0;

386 
ö_addr
 
de°
;

388 
de°
.
s_addr
 = 
AODV_BROADCAST
;

390 
ªº_Êags
 |
RERR_NODELETE
;

391 
ªº
 = 
	`ªº_¸óã
(
ªº_Êags
, 
fwd_π
->
de°_addr
,

392 
fwd_π
->
de°_£qno
);

394 i‡(
fwd_π
->
≈ªc
)

395 
	`aodv_sockë_£nd
((
AODV_msg
 *Ë
ªº
, 
de°
,

396 
	`RERR_CALC_SIZE
(
ªº
), 1,

397 &
	`DEV_IFINDEX
(
fwd_π
->
ifödex
));

402 i‡(
ªv_π
 &&Ñev_π->
°©e
 =
VALID
) {

403 
	`ºï_f‹w¨d
(
ºï
, 
ºïÀn
, 
ªv_π
, 
fwd_π
, --
ù_âl
);

405 
	`DEBUG
(
LOG_DEBUG
, 0, "CouldÇot forward RREP - NO ROUTE!!!");

409 i‡(!
Œ„edback
 && 
›timized_hñlos
)

410 
	`hñlo_°¨t
();

411 
	}
}

417 
	$ºï_add_hñlo_ext
(
RREP
 * 
ºï
, 
off£t
, 
u_öt32_t
 
öãrvÆ
)

419 
AODV_ext
 *
ext
;

421 
ext
 = (
AODV_ext
 *Ë((*Ë
ºï
 + 
RREP_SIZE
 + 
off£t
);

422 
ext
->
ty≥
 = 
RREP_HELLO_INTERVAL_EXT
;

423 
ext
->
Àngth
 = (
öãrvÆ
);

424 
	`mem˝y
(
	`AODV_EXT_DATA
(
ext
), &
öãrvÆ
, (interval));

426  (
off£t
 + 
	`AODV_EXT_SIZE
(
ext
));

427 
	}
}

	@aodv_rrep.h

23 #i‚de‡
_AODV_RREP_H


24 
	#_AODV_RREP_H


	)

26 #i‚de‡
NS_NO_GLOBALS


27 
	~<ídün.h
>

29 
	~"defs.h
"

30 
	~"routög_èbÀ.h
"

34 
	#RREP_ACK
 0x1

	)

35 
	#RREP_REPAIR
 0x2

	)

38 
u_öt8_t
 
	mty≥
;

39 #i‡
deföed
(
__LITTLE_ENDIAN
)

40 
u_öt16_t
 
	mªs1
:6;

41 
u_öt16_t
 
	ma
:1;

42 
u_öt16_t
 
	mr
:1;

43 
u_öt16_t
 
	m¥efix
:5;

44 
u_öt16_t
 
	mªs2
:3;

45 #ñi‡
deföed
(
__BIG_ENDIAN
)

46 
u_öt16_t
 
	mr
:1;

47 
u_öt16_t
 
	ma
:1;

48 
u_öt16_t
 
	mªs1
:6;

49 
u_öt16_t
 
	mªs2
:3;

50 
u_öt16_t
 
	m¥efix
:5;

54 
u_öt8_t
 
	mh˙t
;

55 
u_öt32_t
 
	mde°_addr
;

56 
u_öt32_t
 
	mde°_£qno
;

57 
u_öt32_t
 
	m‹ig_addr
;

58 
u_öt32_t
 
	mli„time
;

59 } 
	tRREP
;

61 
	#RREP_SIZE
 (
RREP
)

	)

64 
u_öt8_t
 
	mty≥
;

65 
u_öt8_t
 
	mª£rved
;

66 } 
	tRREP_ack
;

68 
	#RREP_ACK_SIZE
 (
RREP_ack
)

	)

71 #i‚de‡
NS_NO_DECLARATIONS


72 
RREP
 *
ºï_¸óã
(
u_öt8_t
 
Êags
,

73 
u_öt8_t
 
¥efix
,

74 
u_öt8_t
 
h˙t
,

75 
ö_addr
 
de°_addr
,

76 
u_öt32_t
 
de°_£qno
,

77 
ö_addr
 
‹ig_addr
, 
u_öt32_t
 
li„
);

79 
RREP_ack
 *
ºï_ack_¸óã
();

80 
AODV_ext
 *
ºï_add_ext
(
RREP
 * 
ºï
, 
ty≥
, 
off£t
,

81 
Àn
, *
d©a
);

82 
ºï_£nd
(
RREP
 * 
ºï
, 
π_èbÀ_t
 * 
ªv_π
,Ñt_èbÀ_à* 
fwd_π
, 
size
);

83 
ºï_f‹w¨d
(
RREP
 * 
ºï
, 
size
, 
π_èbÀ_t
 * 
ªv_π
,

84 
π_èbÀ_t
 * 
fwd_π
, 
âl
);

85 
ºï_¥o˚ss
(
RREP
 * 
ºï
, 
ºïÀn
, 
ö_addr
 
ù_§c
,

86 
ö_addr
 
ù_d°
, 
ù_âl
, 
ifödex
);

87 
ºï_ack_¥o˚ss
(
RREP_ack
 * 
ºï_ack
, 
ºïÀn
, 
ö_addr
 
ù_§c
,

88 
ö_addr
 
ù_d°
);

	@aodv_rreq.c

24 #ifde‡
NS_PORT


25 
	~"ns-2/aodv-uu.h
"

27 
	~<√töë/ö.h
>

29 
	~"aodv_ºeq.h
"

30 
	~"aodv_ºï.h
"

31 
	~"routög_èbÀ.h
"

32 
	~"aodv_timeout.h
"

33 
	~"timî_queue.h
"

34 
	~"aodv_sockë.h
"

35 
	~"∑øms.h
"

36 
	~"£ek_li°.h
"

37 
	~"defs.h
"

38 
	~"debug.h
"

40 
	~"loˇlôy.h
"

44 
	#DEBUG_OUTPUT


	)

46 #i‚de‡
NS_PORT


47 
LIST
(
ºeq_ªc‹ds
);

48 
LIST
(
ºeq_bœckli°
);

50 
ºeq_ªc‹d
 *
ºeq_ªc‹d_ö£π
(
ö_addr
 
‹ig_addr
,

51 
u_öt32_t
 
ºeq_id
);

52 
ºeq_ªc‹d
 *
ºeq_ªc‹d_föd
(
ö_addr
 
‹ig_addr
,

53 
u_öt32_t
 
ºeq_id
);

55 
bœckli°
 *
ºeq_bœckli°_föd
(
ö_addr
 
de°_addr
);

57 
ºeq_gøtuôous
, 
ex∑ndög_rög_£¨ch
;

58 
öã∫ë_gw_mode
;

61 
RREQ
 *
NS_CLASS
 
	$ºeq_¸óã
(
u_öt8_t
 
Êags
, 
ö_addr
 
de°_addr
,

62 
u_öt32_t
 
de°_£qno
, 
ö_addr
 
‹ig_addr
)

64 
RREQ
 *
ºeq
;

66 
ºeq
 = (
RREQ
 *Ë
	`aodv_sockë_√w_msg
();

67 
ºeq
->
ty≥
 = 
AODV_RREQ
;

68 
ºeq
->
ªs1
 = 0;

69 
ºeq
->
ªs2
 = 0;

70 
ºeq
->
h˙t
 = 0;

71 
ºeq
->
ºeq_id
 = 
	`ht⁄l
(
this_ho°
.rreq_id++);

72 
ºeq
->
de°_addr
 = de°_addr.
s_addr
;

73 
ºeq
->
de°_£qno
 = 
	`ht⁄l
(dest_seqno);

74 
ºeq
->
‹ig_addr
 = orig_addr.
s_addr
;

78 
	`£qno_ö¸
(
this_ho°
.
£qno
);

79 
ºeq
->
‹ig_£qno
 = 
	`ht⁄l
(
this_ho°
.
£qno
);

81 i‡(
Êags
 & 
RREQ_JOIN
)

82 
ºeq
->
j
 = 1;

83 i‡(
Êags
 & 
RREQ_REPAIR
)

84 
ºeq
->
r
 = 1;

85 i‡(
Êags
 & 
RREQ_GRATUITOUS
)

86 
ºeq
->
g
 = 1;

87 i‡(
Êags
 & 
RREQ_DEST_ONLY
)

88 
ºeq
->
d
 = 1;

90 
	`DEBUG
(
LOG_DEBUG
, 0, "As£mbÀd RREQ %s", 
	`ù_to_°r
(
de°_addr
));

91 #ifde‡
DEBUG_OUTPUT


92 
	`log_pkt_fõlds
((
AODV_msg
 *Ë
ºeq
);

95  
ºeq
;

96 
	}
}

98 
AODV_ext
 *
	$ºeq_add_ext
(
RREQ
 * 
ºeq
, 
ty≥
, 
off£t
,

99 
Àn
, *
d©a
)

101 
AODV_ext
 *
ext
 = 
NULL
;

103 i‡(
off£t
 < 
RREQ_SIZE
)

104  
NULL
;

106 
ext
 = (
AODV_ext
 *Ë((*Ë
ºeq
 + 
off£t
);

108 
ext
->
ty≥
 =Åype;

109 
ext
->
Àngth
 = 
Àn
;

111 
	`mem˝y
(
	`AODV_EXT_DATA
(
ext
), 
d©a
, 
Àn
);

113  
ext
;

114 
	}
}

116 
NS_CLASS
 
	$ºeq_£nd
(
ö_addr
 
de°_addr
, 
u_öt32_t
 
de°_£qno
,

117 
âl
, 
u_öt8_t
 
Êags
)

119 
RREQ
 *
ºeq
;

120 
ö_addr
 
de°
;

121 
i
;

123 
de°
.
s_addr
 = 
AODV_BROADCAST
;

126 i‡(
ºeq_gøtuôous
)

127 
Êags
 |
RREQ_GRATUITOUS
;

130 
i
 = 0; i < 
MAX_NR_INTERFACES
; i++) {

131 i‡(!
	`DEV_NR
(
i
).
íabÀd
)

133 
ºeq
 = 
	`ºeq_¸óã
(
Êags
, 
de°_addr
, 
de°_£qno
, 
	`DEV_NR
(
i
).
ùaddr
);

134 
	`aodv_sockë_£nd
((
AODV_msg
 *Ë
ºeq
, 
de°
, 
RREQ_SIZE
, 
âl
, &
	`DEV_NR
(
i
));

136 
	}
}

138 
NS_CLASS
 
	$ºeq_f‹w¨d
(
RREQ
 * 
ºeq
, 
size
, 
âl
)

140 
ö_addr
 
de°
, 
‹ig
;

141 
i
;

143 
de°
.
s_addr
 = 
AODV_BROADCAST
;

144 
‹ig
.
s_addr
 = 
ºeq
->
‹ig_addr
;

147 
	`DEBUG
(
LOG_INFO
, 0, "forwarding RREQ src=%s,Ñreq_id=%lu",

148 
	`ù_to_°r
(
‹ig
), 
	`¡ohl
(
ºeq
->
ºeq_id
));

151 
ºeq
 = (
RREQ
 *Ë
	`aodv_sockë_queue_msg
((
AODV_msg
 *Ëºeq, 
size
);

153 
ºeq
->
h˙t
++;

157 
i
 = 0; i < 
MAX_NR_INTERFACES
; i++) {

158 i‡(!
	`DEV_NR
(
i
).
íabÀd
)

160 
	`aodv_sockë_£nd
((
AODV_msg
 *Ë
ºeq
, 
de°
, 
size
, 
âl
, &
	`DEV_NR
(
i
));

162 
	}
}

164 
NS_CLASS
 
	$ºeq_¥o˚ss
(
RREQ
 * 
ºeq
, 
ºeqÀn
, 
ö_addr
 
ù_§c
,

165 
ö_addr
 
ù_d°
, 
ù_âl
,

166 
ifödex
)

169 
AODV_ext
 *
ext
;

170 
RREP
 *
ºï
 = 
NULL
;

171 
ºï_size
 = 
RREP_SIZE
;

172 
π_èbÀ_t
 *
ªv_π
, *
fwd_π
 = 
NULL
;

173 
u_öt32_t
 
ºeq_‹ig_£qno
, 
ºeq_de°_£qno
;

174 
u_öt32_t
 
ºeq_id
, 
ºeq_√w_h˙t
, 
li„
;

175 
exéí
 = 0;

176 
ö_addr
 
ºeq_de°
, 
ºeq_‹ig
;

178 
ºeq_de°
.
s_addr
 = 
ºeq
->
de°_addr
;

179 
ºeq_‹ig
.
s_addr
 = 
ºeq
->
‹ig_addr
;

180 
ºeq_id
 = 
	`¡ohl
(
ºeq
->rreq_id);

181 
ºeq_de°_£qno
 = 
	`¡ohl
(
ºeq
->
de°_£qno
);

182 
ºeq_‹ig_£qno
 = 
	`¡ohl
(
ºeq
->
‹ig_£qno
);

183 
ºeq_√w_h˙t
 = 
ºeq
->
h˙t
 + 1;

189 i‡(
ºeq_‹ig
.
s_addr
 =
	`DEV_IFINDEX
(
ifödex
).
ùaddr
.s_addr)

192 
	`DEBUG
(
LOG_DEBUG
, 0, "ip_src=%sÑreq_orig=%sÑreq_dest=%sÅtl=%d",

193 
	`ù_to_°r
(
ù_§c
), ip_to_°r(
ºeq_‹ig
), ip_to_°r(
ºeq_de°
),

194 
ù_âl
);

196 i‡(
ºeqÀn
 < (Ë
RREQ_SIZE
) {

197 
	`Æog
(
LOG_WARNING
, 0,

198 
__FUNCTION__
, "IP data fieldÅoo short (%u bytes)"

199 "‰om %†tÿ%s", 
ºeqÀn
, 
	`ù_to_°r
(
ù_§c
), ip_to_°r(
ù_d°
));

205 i‡(
	`ºeq_bœckli°_föd
(
ù_§c
)) {

206 
	`DEBUG
(
LOG_DEBUG
, 0, "prev hop of RREQ blacklisted, ignoring!");

211 i‡(
	`ºeq_ªc‹d_föd
(
ºeq_‹ig
, 
ºeq_id
))

216 
	`ºeq_ªc‹d_ö£π
(
ºeq_‹ig
, 
ºeq_id
);

219 
ext
 = (
AODV_ext
 *Ë((*Ë
ºeq
 + 
RREQ_SIZE
);

221 (
ºeqÀn
 - 
exéí
Ë> 
RREQ_SIZE
) {

222 
ext
->
ty≥
) {

223 
RREQ_EXT
:

224 
	`DEBUG
(
LOG_INFO
, 0, "RREQ include EXTENSION");

228 
	`Æog
(
LOG_WARNING
, 0, 
__FUNCTION__
, "UnknownÉxtensionÅype %d",

229 
ext
->
ty≥
);

232 
exéí
 +
	`AODV_EXT_SIZE
(
ext
);

233 
ext
 = 
	`AODV_EXT_NEXT
(ext);

235 #ifde‡
DEBUG_OUTPUT


236 
	`log_pkt_fõlds
((
AODV_msg
 *Ë
ºeq
);

241 
ªv_π
 = 
	`π_èbÀ_föd
(
ºeq_‹ig
);

244 
li„
 = 
PATH_DISCOVERY_TIME
 - 2 * 
ºeq_√w_h˙t
 * 
NODE_TRAVERSAL_TIME
;

246 i‡(
ªv_π
 =
NULL
) {

247 
	`DEBUG
(
LOG_DEBUG
, 0, "Creating REVERSEÑouteÉntry, RREQ orig: %s",

248 
	`ù_to_°r
(
ºeq_‹ig
));

250 
ªv_π
 = 
	`π_èbÀ_ö£π
(
ºeq_‹ig
, 
ù_§c
, 
ºeq_√w_h˙t
,

251 
ºeq_‹ig_£qno
, 
li„
, 
VALID
, 0, 
ifödex
);

253 i‡(
ªv_π
->
de°_£qno
 == 0 ||

254 (
öt32_t
Ë
ºeq_‹ig_£qno
 > (öt32_tË
ªv_π
->
de°_£qno
 ||

255 (
ºeq_‹ig_£qno
 =
ªv_π
->
de°_£qno
 &&

256 (
ªv_π
->
°©e
 =
INVALID
 || 
ºeq_√w_h˙t
 <Ñev_π->
h˙t
))) {

257 
ªv_π
 = 
	`π_èbÀ_upd©e
‘ev_π, 
ù_§c
, 
ºeq_√w_h˙t
,

258 
ºeq_‹ig_£qno
, 
li„
, 
VALID
,

259 
ªv_π
->
Êags
);

261 #ifde‡
DISABLED


268 i‡(
ªv_π
->
√xt_h›
.
s_addr
 !
ù_§c
.s_addr) {

269 
	`DEBUG
(
LOG_DEBUG
, 0, "Dropping RREQ dueÅoÑeverseÑoute mismatch!");

276 #ifde‡
CONFIG_GATEWAY


278 i‡(
öã∫ë_gw_mode
) {

280 
	`loˇlôy
(
ºeq_de°
, 
ifödex
)) {

281 
HOST_ADHOC
:

283 
HOST_INET
:

286 
	`£qno_ö¸
(
this_ho°
.
£qno
);

287 
ºï
 = 
	`ºï_¸óã
(0, 0, 0, 
	`DEV_IFINDEX
(
ªv_π
->
ifödex
).
ùaddr
,

288 
this_ho°
.
£qno
, 
ªv_π
->
de°_addr
,

289 
ACTIVE_ROUTE_TIMEOUT
);

291 
ext
 = 
	`ºï_add_ext
(
ºï
, 
RREP_INET_DEST_EXT
, 
ºï_size
,

292 (
ö_addr
), (*Ë&
ºeq_de°
);

294 
ºï_size
 +
	`AODV_EXT_SIZE
(
ext
);

296 
	`DEBUG
(
LOG_DEBUG
, 0,

298 
	`ù_to_°r
(
ºeq_de°
), 
ºï_size
);

300 
	`ºï_£nd
(
ºï
, 
ªv_π
, 
NULL
, 
ºï_size
);

304 
HOST_UNKNOWN
:

306 
	`DEBUG
(
LOG_DEBUG
, 0, "GW: Destination unkown");

312 i‡(
ºeq_de°
.
s_addr
 =
	`DEV_IFINDEX
(
ifödex
).
ùaddr
.s_addr) {

317 i‡(
ºeq_de°_£qno
 != 0) {

318 i‡((
öt32_t
Ë
this_ho°
.
£qno
 < (öt32_tË
ºeq_de°_£qno
)

319 
this_ho°
.
£qno
 = 
ºeq_de°_£qno
;

320 i‡(
this_ho°
.
£qno
 =
ºeq_de°_£qno
)

321 
	`£qno_ö¸
(
this_ho°
.
£qno
);

323 
ºï
 = 
	`ºï_¸óã
(0, 0, 0, 
	`DEV_IFINDEX
(
ªv_π
->
ifödex
).
ùaddr
,

324 
this_ho°
.
£qno
, 
ªv_π
->
de°_addr
,

325 
MY_ROUTE_TIMEOUT
);

327 
	`ºï_£nd
(
ºï
, 
ªv_π
, 
NULL
, 
RREP_SIZE
);

333 
fwd_π
 = 
	`π_èbÀ_föd
(
ºeq_de°
);

335 i‡(
fwd_π
 && fwd_π->
°©e
 =
VALID
 && !
ºeq
->
d
) {

336 
timevÆ
 
now
;

337 
u_öt32_t
 
li„time
;

343 
	`gëtimeofday
(&
now
, 
NULL
);

344 #ifde‡
CONFIG_GATEWAY_DISABLED


345 i‡(
fwd_π
->
Êags
 & 
RT_INET_DEST
) {

346 
π_èbÀ_t
 *
gw_π
;

350 
f‹w¨d
;

352 
gw_π
 = 
	`π_èbÀ_föd
(
fwd_π
->
√xt_h›
);

354 i‡(!
gw_π
 || gw_π->
°©e
 =
INVALID
)

355 
f‹w¨d
;

357 
li„time
 = 
	`timevÆ_diff
(&
gw_π
->
π_timî
.
timeout
, &
now
);

359 
ºï
 = 
	`ºï_¸óã
(0, 0, 
gw_π
->
h˙t
, gw_π->
de°_addr
,

360 
gw_π
->
de°_£qno
, 
ªv_π
->
de°_addr
,

361 
li„time
);

363 
ext
 = 
	`ºï_add_ext
(
ºï
, 
RREP_INET_DEST_EXT
, 
ºï_size
,

364 (
ö_addr
), (*Ë&
ºeq_de°
);

366 
ºï_size
 +
	`AODV_EXT_SIZE
(
ext
);

368 
	`DEBUG
(
LOG_DEBUG
, 0,

370 
	`ù_to_°r
(
ºeq_de°
), 
ºï_size
);

372 
	`ºï_£nd
(
ºï
, 
ªv_π
, 
gw_π
, 
ºï_size
);

378 i‡(
fwd_π
->
de°_£qno
 != 0 &&

379 (
öt32_t
Ë
fwd_π
->
de°_£qno
 >(öt32_tË
ºeq_de°_£qno
) {

380 
li„time
 = 
	`timevÆ_diff
(&
fwd_π
->
π_timî
.
timeout
, &
now
);

381 
ºï
 = 
	`ºï_¸óã
(0, 0, 
fwd_π
->
h˙t
, fwd_π->
de°_addr
,

382 
fwd_π
->
de°_£qno
, 
ªv_π
->
de°_addr
,

383 
li„time
);

384 
	`ºï_£nd
(
ºï
, 
ªv_π
, 
fwd_π
, 
ºï_size
);

386 
f‹w¨d
;

390 i‡(
ºeq
->
g
) {

391 
ºï
 = 
	`ºï_¸óã
(0, 0, 
ªv_π
->
h˙t
,Ñev_π->
de°_addr
,

392 
ªv_π
->
de°_£qno
, 
fwd_π
->
de°_addr
,

393 
li„time
);

395 
	`ºï_£nd
(
ºï
, 
fwd_π
, 
ªv_π
, 
RREP_SIZE
);

397 
	`DEBUG
(
LOG_INFO
, 0, "Sending G-RREPÅo %s withÑteÅo %s",

398 
	`ù_to_°r
(
ºeq_de°
), ip_to_°r(
ºeq_‹ig
));

402 
f‹w¨d
:

403 i‡(
ù_âl
 > 1) {

406 i‡(
fwd_π
 && !(fwd_π->
Êags
 & 
RT_INET_DEST
) &&

407 (
öt32_t
Ë
fwd_π
->
de°_£qno
 > (öt32_tË
ºeq_de°_£qno
)

408 
ºeq
->
de°_£qno
 = 
	`ht⁄l
(
fwd_π
->dest_seqno);

410 
	`ºeq_f‹w¨d
(
ºeq
, 
ºeqÀn
, --
ù_âl
);

413 
	`DEBUG
(
LOG_DEBUG
, 0, "RREQÇot forwarded -Åtl=0");

416 
	}
}

420 
NS_CLASS
 
	$ºeq_rouã_discovîy
(
ö_addr
 
de°_addr
, 
u_öt8_t
 
Êags
,

421 
ù_d©a
 *
ùd
)

423 
timevÆ
 
now
;

424 
π_èbÀ_t
 *
π
;

425 
£ek_li°_t
 *
£ek_íåy
;

426 
u_öt32_t
 
de°_£qno
;

427 
âl
;

428 
	#TTL_VALUE
 
âl


	)

430 
	`gëtimeofday
(&
now
, 
NULL
);

432 i‡(
	`£ek_li°_föd
(
de°_addr
))

436 
π
 = 
	`π_èbÀ_föd
(
de°_addr
);

438 
âl
 = 
NET_DIAMETER
;

440 i‡(!
π
) {

441 
de°_£qno
 = 0;

443 i‡(
ex∑ndög_rög_£¨ch
)

444 
âl
 = 
TTL_START
;

447 
de°_£qno
 = 
π
->dest_seqno;

449 i‡(
ex∑ndög_rög_£¨ch
) {

450 
âl
 = 
π
->
h˙t
 + 
TTL_INCREMENT
;

458 i‡(
	`timevÆ_diff
(&
π
->
π_timî
.
timeout
, &
now
) <

459 (2 * 
NET_TRAVERSAL_TIME
))

460 
	`π_èbÀ_upd©e_timeout
(
π
, 2 * 
NET_TRAVERSAL_TIME
);

463 
	`ºeq_£nd
(
de°_addr
, 
de°_£qno
, 
âl
, 
Êags
);

466 
£ek_íåy
 = 
	`£ek_li°_ö£π
(
de°_addr
, 
de°_£qno
, 
âl
, 
Êags
, 
ùd
);

469 i‡(
ex∑ndög_rög_£¨ch
)

470 
	`timî_£t_timeout
(&
£ek_íåy
->
£ek_timî
, 
RING_TRAVERSAL_TIME
);

472 
	`timî_£t_timeout
(&
£ek_íåy
->
£ek_timî
, 
NET_TRAVERSAL_TIME
);

474 
	`DEBUG
(
LOG_DEBUG
, 0, "Sìkög %†âl=%d", 
	`ù_to_°r
(
de°_addr
), 
âl
);

477 
	}
}

480 
NS_CLASS
 
	$ºeq_loˇl_ª∑ú
(
π_èbÀ_t
 * 
π
, 
ö_addr
 
§c_addr
,

481 
ù_d©a
 *
ùd
)

483 
timevÆ
 
now
;

484 
£ek_li°_t
 *
£ek_íåy
;

485 
π_èbÀ_t
 *
§c_íåy
;

486 
âl
;

487 
u_öt8_t
 
Êags
 = 0;

489 i‡(!
π
)

492 i‡(
	`£ek_li°_föd
(
π
->
de°_addr
))

495 i‡(!(
π
->
Êags
 & 
RT_REPAIR
))

498 
	`gëtimeofday
(&
now
, 
NULL
);

500 
	`DEBUG
(
LOG_DEBUG
, 0, "REPAIRINGÑouãÅÿ%s", 
	`ù_to_°r
(
π
->
de°_addr
));

506 
§c_íåy
 = 
	`π_èbÀ_föd
(
§c_addr
);

508 i‡(
§c_íåy
)

509 
âl
 = (Ë(
	`max
(
π
->
h˙t
, 0.5 * 
§c_íåy
->h˙tË+ 
LOCAL_ADD_TTL
);

511 
âl
 = 
π
->
h˙t
 + 
LOCAL_ADD_TTL
;

513 
	`DEBUG
(
LOG_DEBUG
, 0, "%s,ÑreqÅtl=%d, dest_hcnt=%d",

514 
	`ù_to_°r
(
π
->
de°_addr
), 
âl
,Ñt->
h˙t
);

518 
π
->
π_timî
.
h™dÀr
 = &
NS_CLASS
 
rouã_expúe_timeout
;

520 i‡(
	`timevÆ_diff
(&
π
->
π_timî
.
timeout
, &
now
Ë< (2 * 
NET_TRAVERSAL_TIME
))

521 
	`π_èbÀ_upd©e_timeout
(
π
, 2 * 
NET_TRAVERSAL_TIME
);

524 
	`ºeq_£nd
(
π
->
de°_addr
,Ñt->
de°_£qno
, 
âl
, 
Êags
);

528 
£ek_íåy
 = 
	`£ek_li°_ö£π
(
π
->
de°_addr
,Ñt->
de°_£qno
,

529 
âl
, 
Êags
, 
ùd
);

531 i‡(
ex∑ndög_rög_£¨ch
)

532 
	`timî_£t_timeout
(&
£ek_íåy
->
£ek_timî
,

533 2 * 
âl
 * 
NODE_TRAVERSAL_TIME
);

535 
	`timî_£t_timeout
(&
£ek_íåy
->
£ek_timî
, 
NET_TRAVERSAL_TIME
);

537 
	`DEBUG
(
LOG_DEBUG
, 0, "Sìkög %†âl=%d", 
	`ù_to_°r
(
π
->
de°_addr
), 
âl
);

540 
	}
}

542 
NS_STATIC
 
ºeq_ªc‹d
 *
NS_CLASS
 
	$ºeq_ªc‹d_ö£π
(
ö_addr


543 
‹ig_addr
,

544 
u_öt32_t
 
ºeq_id
)

546 
ºeq_ªc‹d
 *
ªc
;

549 
ªc
 = 
	`ºeq_ªc‹d_föd
(
‹ig_addr
, 
ºeq_id
);

552 i‡(
ªc
)

553  
ªc
;

555 i‡((
ªc
 =

556 (
ºeq_ªc‹d
 *Ë
	`mÆloc
((ºeq_ªc‹d))Ë=
NULL
) {

557 
	`Ârötf
(
°dîr
, "Malloc failed!!!\n");

558 
	`exô
(-1);

560 
ªc
->
‹ig_addr
 = orig_addr;

561 
ªc
->
ºeq_id
 =Ñreq_id;

563 
	`timî_öô
(&
ªc
->
ªc_timî
, &
NS_CLASS
 
ºeq_ªc‹d_timeout
,Ñec);

565 
	`li°_add
(&
ºeq_ªc‹ds
, &
ªc
->
l
);

567 
	`DEBUG
(
LOG_INFO
, 0, "Buffering RREQ %sÑreq_id=%luÅime=%u",

568 
	`ù_to_°r
(
‹ig_addr
), 
ºeq_id
, 
PATH_DISCOVERY_TIME
);

570 
	`timî_£t_timeout
(&
ªc
->
ªc_timî
, 
PATH_DISCOVERY_TIME
);

571  
ªc
;

572 
	}
}

574 
NS_STATIC
 
ºeq_ªc‹d
 *
NS_CLASS
 
	$ºeq_ªc‹d_föd
(
ö_addr


575 
‹ig_addr
,

576 
u_öt32_t
 
ºeq_id
)

578 
li°_t
 *
pos
;

580 
	`li°_f‹óch
(
pos
, &
ºeq_ªc‹ds
) {

581 
ºeq_ªc‹d
 *
ªc
 = (ºeq_ªc‹d *Ë
pos
;

582 i‡(
ªc
->
‹ig_addr
.
s_addr
 == orig_addr.s_addr &&

583 (
ªc
->
ºeq_id
 ==Ñreq_id))

584  
ªc
;

586  
NULL
;

587 
	}
}

589 
NS_CLASS
 
	$ºeq_ªc‹d_timeout
(*
¨g
)

591 
ºeq_ªc‹d
 *
ªc
 = (ºeq_ªc‹d *Ë
¨g
;

593 
	`li°_dëach
(&
ªc
->
l
);

594 
	`‰ì
(
ªc
);

595 
	}
}

597 
bœckli°
 *
NS_CLASS
 
	$ºeq_bœckli°_ö£π
(
ö_addr
 
de°_addr
)

600 
bœckli°
 *
bl
;

603 
bl
 = 
	`ºeq_bœckli°_föd
(
de°_addr
);

606 i‡(
bl
)

607  
bl
;

609 i‡((
bl
 = (
bœckli°
 *Ë
	`mÆloc
((bœckli°))Ë=
NULL
) {

610 
	`Ârötf
(
°dîr
, "Malloc failed!!!\n");

611 
	`exô
(-1);

613 
bl
->
de°_addr
.
s_addr
 = dest_addr.s_addr;

615 
	`timî_öô
(&
bl
->
bl_timî
, &
NS_CLASS
 
ºeq_bœckli°_timeout
, bl);

617 
	`li°_add
(&
ºeq_bœckli°
, &
bl
->
l
);

619 
	`timî_£t_timeout
(&
bl
->
bl_timî
, 
BLACKLIST_TIMEOUT
);

620  
bl
;

621 
	}
}

623 
bœckli°
 *
NS_CLASS
 
	$ºeq_bœckli°_föd
(
ö_addr
 
de°_addr
)

625 
li°_t
 *
pos
;

627 
	`li°_f‹óch
(
pos
, &
ºeq_bœckli°
) {

628 
bœckli°
 *
bl
 = (bœckli° *Ë
pos
;

630 i‡(
bl
->
de°_addr
.
s_addr
 == dest_addr.s_addr)

631  
bl
;

633  
NULL
;

634 
	}
}

636 
NS_CLASS
 
	$ºeq_bœckli°_timeout
(*
¨g
)

639 
bœckli°
 *
bl
 = (bœckli° *Ë
¨g
;

641 
	`li°_dëach
(&
bl
->
l
);

642 
	`‰ì
(
bl
);

643 
	}
}

	@aodv_rreq.h

23 #i‚de‡
_AODV_RREQ_H


24 
	#_AODV_RREQ_H


	)

26 #i‚de‡
NS_NO_GLOBALS


27 
	~<ídün.h
>

29 
	~"defs.h
"

30 
	~"£ek_li°.h
"

31 
	~"routög_èbÀ.h
"

34 
	#RREQ_JOIN
 0x1

	)

35 
	#RREQ_REPAIR
 0x2

	)

36 
	#RREQ_GRATUITOUS
 0x4

	)

37 
	#RREQ_DEST_ONLY
 0x8

	)

40 
u_öt8_t
 
	mty≥
;

41 #i‡
deföed
(
__LITTLE_ENDIAN
)

42 
u_öt8_t
 
	mªs1
:4;

43 
u_öt8_t
 
	md
:1;

44 
u_öt8_t
 
	mg
:1;

45 
u_öt8_t
 
	mr
:1;

46 
u_öt8_t
 
	mj
:1;

47 #ñi‡
deföed
(
__BIG_ENDIAN
)

48 
u_öt8_t
 
	mj
:1;

49 
u_öt8_t
 
	mr
:1;

50 
u_öt8_t
 
	mg
:1;

51 
u_öt8_t
 
	md
:1;

52 
u_öt8_t
 
	mªs1
:4;

56 
u_öt8_t
 
	mªs2
;

57 
u_öt8_t
 
	mh˙t
;

58 
u_öt32_t
 
	mºeq_id
;

59 
u_öt32_t
 
	mde°_addr
;

60 
u_öt32_t
 
	mde°_£qno
;

61 
u_öt32_t
 
	m‹ig_addr
;

62 
u_öt32_t
 
	m‹ig_£qno
;

63 } 
	tRREQ
;

65 
	#RREQ_SIZE
 (
RREQ
)

	)

68 
	sºeq_ªc‹d
 {

69 
li°_t
 
	ml
;

70 
ö_addr
 
	m‹ig_addr
;

71 
u_öt32_t
 
	mºeq_id
;

72 
timî
 
	mªc_timî
;

75 
	sbœckli°
 {

76 
li°_t
 
	ml
;

77 
ö_addr
 
	mde°_addr
;

78 
timî
 
	mbl_timî
;

82 #i‚de‡
NS_NO_DECLARATIONS


83 
RREQ
 *
ºeq_¸óã
(
u_öt8_t
 
Êags
, 
ö_addr
 
de°_addr
,

84 
u_öt32_t
 
de°_£qno
, 
ö_addr
 
‹ig_addr
);

85 
ºeq_£nd
(
ö_addr
 
de°_addr
, 
u_öt32_t
 
de°_£qno
, 
âl
,

86 
u_öt8_t
 
Êags
);

87 
ºeq_f‹w¨d
(
RREQ
 * 
ºeq
, 
size
, 
âl
);

88 
ºeq_¥o˚ss
(
RREQ
 * 
ºeq
, 
ºeqÀn
, 
ö_addr
 
ù_§c
,

89 
ö_addr
 
ù_d°
, 
ù_âl
, 
ifödex
);

90 
ºeq_rouã_discovîy
(
ö_addr
 
de°_addr
, 
u_öt8_t
 
Êags
,

91 
ù_d©a
 *
ùd
);

92 
ºeq_ªc‹d_timeout
(*
¨g
);

93 
bœckli°
 *
ºeq_bœckli°_ö£π
(
ö_addr
 
de°_addr
);

94 
ºeq_bœckli°_timeout
(*
¨g
);

95 
ºeq_loˇl_ª∑ú
(
π_èbÀ_t
 * 
π
, 
ö_addr
 
§c_addr
,

96 
ù_d©a
 *
ùd
);

98 #ifde‡
NS_PORT


99 
ºeq_ªc‹d
 *
ºeq_ªc‹d_ö£π
(
ö_addr
 
‹ig_addr
,

100 
u_öt32_t
 
ºeq_id
);

101 
ºeq_ªc‹d
 *
ºeq_ªc‹d_föd
(
ö_addr
 
‹ig_addr
,

102 
u_öt32_t
 
ºeq_id
);

103 
bœckli°
 *
ºeq_bœckli°_föd
(
ö_addr
 
de°_addr
);

	@aodv_socket.c

23 
	~<sys/ty≥s.h
>

25 #ifde‡
NS_PORT


26 
	~"ns-2/aodv-uu.h
"

28 
	~<sys/sockë.h
>

29 
	~<√töë/ö.h
>

30 
	~<√t/if.h
>

31 
	~<√töë/udp.h
>

32 
	~"aodv_sockë.h
"

33 
	~"timî_queue.h
"

34 
	~"aodv_ºeq.h
"

35 
	~"aodv_ªº.h
"

36 
	~"aodv_ºï.h
"

37 
	~"∑øms.h
"

38 
	~"aodv_hñlo.h
"

39 
	~"aodv_√ighb‹.h
"

40 
	~"debug.h
"

41 
	~"defs.h
"

45 #i‚de‡
NS_PORT


46 
	#SO_RECVBUF_SIZE
 256*1024

	)

48 
	gªcv_buf
[
RECV_BUF_SIZE
];

49 
	g£nd_buf
[
SEND_BUF_SIZE
];

51 
waô_⁄_ªboŸ
, 
hñlo_quÆ_thªshﬁd
, 
øãlimô
;

53 
aodv_sockë_ªad
(
fd
);

58 
cmsghdr
 *
	$__cmsg_nxthdr_fix
(*
__˘l
, 
size_t
 
__size
,

59 
cmsghdr
 *
__cmsg
)

61 
cmsghdr
 *
__±r
;

63 
__±r
 = (
cmsghdr
 *Ë(((*Ë
__cmsg
) +

64 
	`CMSG_ALIGN
(
__cmsg
->
cmsg_Àn
));

65 i‡((Ë((*Ë(
__±r
 + 1Ë- (*Ë
__˘l
Ë> 
__size
)

66  
NULL
;

68  
__±r
;

69 
	}
}

71 
cmsghdr
 *
	$cmsg_nxthdr_fix
(
msghdr
 *
__msg
, 
cmsghdr
 *
__cmsg
)

73  
	`__cmsg_nxthdr_fix
(
__msg
->
msg_c⁄åﬁ
, __msg->
msg_c⁄åﬁÀn
, 
__cmsg
);

74 
	}
}

79 
NS_CLASS
 
	$aodv_sockë_öô
()

81 #i‚de‡
NS_PORT


82 
sockaddr_ö
 
aodv_addr
;

83 
i‰eq
 
i‰
;

84 
i
, 
ªtvÆ
 = 0;

85 
⁄
 = 1;

86 
tos
 = 
IPTOS_LOWDELAY
;

87 
bufsize
 = 
SO_RECVBUF_SIZE
;

88 
sockÀn_t
 
›éí
 = (
bufsize
);

92 i‡(
this_ho°
.
nif
 == 0) {

93 
	`Ârötf
(
°dîr
, "No interfaces configured\n");

94 
	`exô
(-1);

98 
i
 = 0; i < 
MAX_NR_INTERFACES
; i++) {

99 i‡(!
	`DEV_NR
(
i
).
íabÀd
)

103 
	`DEV_NR
(
i
).
sock
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 
IPPROTO_UDP
);

104 i‡(
	`DEV_NR
(
i
).
sock
 < 0) {

105 
	`≥º‹
("");

106 
	`exô
(-1);

108 #ifde‡
CONFIG_GATEWAY


110 
	`DEV_NR
(
i
).
psock
 = 
	`sockë
(
PF_INET
, 
SOCK_RAW
, 
IPPROTO_RAW
);

112 i‡(
	`DEV_NR
(
i
).
psock
 < 0) {

113 
	`≥º‹
("");

114 
	`exô
(-1);

118 
ªtvÆ
 = 
	`£tsock›t
–
	`DEV_NR
(
i
).
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
⁄
, (on) );

121 
	`mem£t
(&
aodv_addr
, 0, (aodv_addr));

122 
aodv_addr
.
sö_Ámûy
 = 
AF_INET
;

123 
aodv_addr
.
sö_p‹t
 = 
	`ht⁄s
(
AODV_PORT
);

124 
aodv_addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

128 
ªtvÆ
 = 
	`böd
(
	`DEV_NR
(
i
).
sock
, (
sockaddr
 *Ë&
aodv_addr
,

129 (
sockaddr
));

131 i‡(
ªtvÆ
 < 0) {

132 
	`≥º‹
("Bind failed ");

133 
	`exô
(-1);

135 i‡(
	`£tsock›t
(
	`DEV_NR
(
i
).
sock
, 
SOL_SOCKET
, 
SO_BROADCAST
,

136 &
⁄
, ()) < 0) {

137 
	`≥º‹
("SO_BROADCAST failed ");

138 
	`exô
(-1);

141 
	`mem£t
(&
i‰
, 0, (
i‰eq
));

142 
	`°r˝y
(
i‰
.
i‰_«me
, 
	`DEV_NR
(
i
).
i‚ame
);

144 i‡(
	`£tsock›t
(
	`DEV_NR
(
i
).
sock
, 
SOL_SOCKET
, 
SO_BINDTODEVICE
,

145 &
i‰
, (ifr)) < 0) {

146 
	`Ârötf
(
°dîr
, "SO_BINDTODEVICE faûed f‹ %s", 
	`DEV_NR
(
i
).
i‚ame
);

147 
	`≥º‹
(" ");

148 
	`exô
(-1);

151 i‡(
	`£tsock›t
(
	`DEV_NR
(
i
).
sock
, 
SOL_SOCKET
, 
SO_PRIORITY
,

152 &
tos
, ()) < 0) {

153 
	`≥º‹
("Setsockopt SO_PRIORITY failed ");

154 
	`exô
(-1);

157 i‡(
	`£tsock›t
(
	`DEV_NR
(
i
).
sock
, 
SOL_IP
, 
IP_RECVTTL
,

158 &
⁄
, ()) < 0) {

159 
	`≥º‹
("Setsockopt IP_RECVTTL failed ");

160 
	`exô
(-1);

163 i‡(
	`£tsock›t
(
	`DEV_NR
(
i
).
sock
, 
SOL_IP
, 
IP_PKTINFO
,

164 &
⁄
, ()) < 0) {

165 
	`≥º‹
("Setsockopt IP_PKTINFO failed ");

166 
	`exô
(-1);

168 #ifde‡
CONFIG_GATEWAY


169 i‡(
	`£tsock›t
(
	`DEV_NR
(
i
).
psock
, 
SOL_SOCKET
, 
SO_BINDTODEVICE
,

170 &
i‰
, (ifr)) < 0) {

171 
	`Ârötf
(
°dîr
, "SO_BINDTODEVICE faûed f‹ %s", 
	`DEV_NR
(
i
).
i‚ame
);

172 
	`≥º‹
(" ");

173 
	`exô
(-1);

176 
bufsize
 = 4 * 65535;

178 i‡(
	`£tsock›t
(
	`DEV_NR
(
i
).
psock
, 
SOL_SOCKET
, 
SO_SNDBUF
,

179 (*Ë&
bufsize
, 
›éí
) < 0) {

180 
	`DEBUG
(
LOG_NOTICE
, 0, "CouldÇot set send socket buffer size");

182 i‡(
	`gësock›t
(
	`DEV_NR
(
i
).
psock
, 
SOL_SOCKET
, 
SO_SNDBUF
,

183 (*Ë&
bufsize
, &
›éí
) == 0) {

184 
	`Æog
(
LOG_NOTICE
, 0, 
__FUNCTION__
,

185 "RAW síd sockë buf„∏sizê£àtÿ%d", 
bufsize
);

189 ;; 
bufsize
 -= 1024) {

190 i‡(
	`£tsock›t
(
	`DEV_NR
(
i
).
sock
, 
SOL_SOCKET
, 
SO_RCVBUF
,

191 (*Ë&
bufsize
, 
›éí
) == 0) {

192 
	`Æog
(
LOG_NOTICE
, 0, 
__FUNCTION__
,

193 "Re˚ivêbuf„∏sizê£àtÿ%d", 
bufsize
);

196 i‡(
bufsize
 < 
RECV_BUF_SIZE
) {

197 
	`Æog
(
LOG_ERR
, 0, 
__FUNCTION__
,

199 
	`exô
(-1);

203 
ªtvÆ
 = 
	`©èch_ˇŒback_func
(
	`DEV_NR
(
i
).
sock
, 
aodv_sockë_ªad
);

205 i‡(
ªtvÆ
 < 0) {

206 
	`≥º‹
("register input handler failed ");

207 
	`exô
(-1);

212 
num_ºeq
 = 0;

213 
num_ªº
 = 0;

214 
	}
}

216 
NS_CLASS
 
	$aodv_sockë_¥o˚ss_∑ckë
(
AODV_msg
 * 
aodv_msg
, 
Àn
,

217 
ö_addr
 
§c
,

218 
ö_addr
 
d°
,

219 
âl
, 
ifödex
)

223 i‡((
aodv_msg
->
ty≥
 =
AODV_RREP
 && 
âl
 == 1 &&

224 
d°
.
s_addr
 =
AODV_BROADCAST
)) {

225 
	`hñlo_¥o˚ss
((
RREP
 *Ë
aodv_msg
, 
Àn
, 
ifödex
);

230 
	`√ighb‹_add
(
aodv_msg
, 
§c
, 
ifödex
);

234 
aodv_msg
->
ty≥
) {

236 
AODV_RREQ
:

237 
	`ºeq_¥o˚ss
((
RREQ
 *Ë
aodv_msg
, 
Àn
, 
§c
, 
d°
, 
âl
, 
ifödex
);

239 
AODV_RREP
:

240 
	`DEBUG
(
LOG_DEBUG
, 0, "Received RREP");

241 
	`ºï_¥o˚ss
((
RREP
 *Ë
aodv_msg
, 
Àn
, 
§c
, 
d°
, 
âl
, 
ifödex
);

243 
AODV_RERR
:

244 
	`DEBUG
(
LOG_DEBUG
, 0, "Received RERR");

245 
	`ªº_¥o˚ss
((
RERR
 *Ë
aodv_msg
, 
Àn
, 
§c
, 
d°
);

247 
AODV_RREP_ACK
:

248 
	`DEBUG
(
LOG_DEBUG
, 0, "Received RREP_ACK");

249 
	`ºï_ack_¥o˚ss
((
RREP_ack
 *Ë
aodv_msg
, 
Àn
, 
§c
, 
d°
);

252 
	`Æog
(
LOG_WARNING
, 0, 
__FUNCTION__
,

253 "Unknow¿msgÅy≥ %uÑcvd from %†tÿ%s", 
aodv_msg
->
ty≥
,

254 
	`ù_to_°r
(
§c
), ip_to_°r(
d°
));

256 
	}
}

258 #ifde‡
NS_PORT


259 
NS_CLASS
 
	$ªcvAODVUUPackë
(
Packë
 * 
p
)

261 
Àn
, 
i
, 
âl
 = 0;

262 
ö_addr
 
§c
, 
d°
;

263 
hdr_cmn
 *
ch
 = 
	`HDR_CMN
(
p
);

264 
hdr_ù
 *
ih
 = 
	`HDR_IP
(
p
);

265 
hdr_aodvuu
 *
ah
 = 
	`HDR_AODVUU
(
p
);

267 
§c
.
s_addr
 = 
ih
->
	`ßddr
();

268 
d°
.
s_addr
 = 
ih
->
	`daddr
();

269 
Àn
 = 
ch
->
	`size
(Ë- 
IP_HDR_LEN
;

270 
âl
 = 
ih
->
	`âl
();

272 
AODV_msg
 *
aodv_msg
 = (AODV_msg *Ë
ªcv_buf
;

275 
	`as£π
(
ch
->
	`±y≥
(Ë=
PT_AODVUU
);

278 
	`as£π
(
ch
->
	`dúe˘i⁄
(Ë=
hdr_cmn
::
UP
);

281 
	`mem˝y
(
ªcv_buf
, 
ah
, 
RECV_BUF_SIZE
);

284 
Packë
::
	`‰ì
(
p
);

287 
i
 = 0; i < 
MAX_NR_INTERFACES
; i++)

288 i‡(
this_ho°
.
devs
[
i
].
íabÀd
 &&

289 
	`memcmp
(&
§c
, &
this_ho°
.
devs
[
i
].
ùaddr
,

290 (
ö_addr
)) == 0)

293 
	`aodv_sockë_¥o˚ss_∑ckë
(
aodv_msg
, 
Àn
, 
§c
, 
d°
, 
âl
, 
NS_IFINDEX
);

294 
	}
}

296 
	$aodv_sockë_ªad
(
fd
)

298 
ö_addr
 
§c
, 
d°
;

299 
i
, 
Àn
, 
âl
 = -1;

300 
AODV_msg
 *
aodv_msg
;

301 
dev_öfo
 *
dev
;

302 
msghdr
 
msgh
;

303 
cmsghdr
 *
cmsg
;

304 
iovec
 
iov
;

305 
˘æbuf
[
	`CMSG_SPACE
(()) +

306 
	`CMSG_SPACE
((
ö_pktöfo
))];

307 
sockaddr_ö
 
§c_addr
;

309 
d°
.
s_addr
 = -1;

311 
iov
.
iov_ba£
 = 
ªcv_buf
;

312 
iov
.
iov_Àn
 = 
RECV_BUF_SIZE
;

313 
msgh
.
msg_«me
 = &
§c_addr
;

314 
msgh
.
msg_«mñí
 = (
§c_addr
);

315 
msgh
.
msg_iov
 = &
iov
;

316 
msgh
.
msg_iovÀn
 = 1;

317 
msgh
.
msg_c⁄åﬁ
 = 
˘æbuf
;

318 
msgh
.
msg_c⁄åﬁÀn
 = (
˘æbuf
);

320 
Àn
 = 
	`ªcvmsg
(
fd
, &
msgh
, 0);

322 i‡(
Àn
 < 0) {

323 
	`Æog
(
LOG_WARNING
, 0, 
__FUNCTION__
, "ª˚ivêERRORÜí=%d!", 
Àn
);

327 
§c
.
s_addr
 = 
§c_addr
.
sö_addr
.s_addr;

330 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msgh
); cmsg !
NULL
;

331 
cmsg
 = 
	`CMSG_NXTHDR_FIX
(&
msgh
, cmsg)) {

332 i‡(
cmsg
->
cmsg_Àvñ
 =
SOL_IP
) {

333 
cmsg
->
cmsg_ty≥
) {

334 
IP_TTL
:

335 
âl
 = *(
	`CMSG_DATA
(
cmsg
));

337 
IP_PKTINFO
:

339 
ö_pktöfo
 *
pi
 = (ö_pktöfÿ*)
	`CMSG_DATA
(
cmsg
);

340 
d°
.
s_addr
 = 
pi
->
ùi_addr
.s_addr;

346 i‡(
âl
 < 0) {

347 
	`DEBUG
(
LOG_DEBUG
, 0, "No TTL,Öacket ignored!");

352 
i
 = 0; i < 
MAX_NR_INTERFACES
; i++)

353 i‡(
this_ho°
.
devs
[
i
].
íabÀd
 &&

354 
	`memcmp
(&
§c
, &
this_ho°
.
devs
[
i
].
ùaddr
,

355 (
ö_addr
)) == 0)

358 
aodv_msg
 = (
AODV_msg
 *Ë
ªcv_buf
;

360 
dev
 = 
	`dev‰omsock
(
fd
);

362 i‡(!
dev
) {

363 
	`DEBUG
(
LOG_ERR
, 0, "CouldÇot get device info!\n");

367 
	`aodv_sockë_¥o˚ss_∑ckë
(
aodv_msg
, 
Àn
, 
§c
, 
d°
, 
âl
, 
dev
->
ifödex
);

368 
	}
}

371 
NS_CLASS
 
	$aodv_sockë_£nd
(
AODV_msg
 * 
aodv_msg
, 
ö_addr
 
d°
,

372 
Àn
, 
u_öt8_t
 
âl
, 
dev_öfo
 *
dev
)

374 
ªtvÆ
 = 0;

375 
timevÆ
 
now
;

378 #i‚de‡
NS_PORT


380 
sockaddr_ö
 
d°_addr
;

382 i‡(
waô_⁄_ªboŸ
 && 
aodv_msg
->
ty≥
 =
AODV_RREP
)

385 
	`mem£t
(&
d°_addr
, 0, (dst_addr));

386 
d°_addr
.
sö_Ámûy
 = 
AF_INET
;

387 
d°_addr
.
sö_addr
 = 
d°
;

388 
d°_addr
.
sö_p‹t
 = 
	`ht⁄s
(
AODV_PORT
);

391 i‡(
	`£tsock›t
(
dev
->
sock
, 
SOL_IP
, 
IP_TTL
, &
âl
, (ttl)) < 0) {

392 
	`Æog
(
LOG_WARNING
, 0, 
__FUNCTION__
, "ERROR settingÅtl!");

406 i‡(
waô_⁄_ªboŸ
 && 
aodv_msg
->
ty≥
 =
AODV_RREP
)

414 
Packë
 *
p
 = 
	`Ælo˝kt
();

415 
hdr_cmn
 *
ch
 = 
	`HDR_CMN
(
p
);

416 
hdr_ù
 *
ih
 = 
	`HDR_IP
(
p
);

417 
hdr_aodvuu
 *
ah
 = 
	`HDR_AODVUU
(
p
);

420 
	`mem£t
(
ah
, '\0',áh->
	`size
());

423 
	`mem˝y
(
ah
, 
aodv_msg
, 
Àn
);

426 
ch
->
	`±y≥
(Ë
PT_AODVUU
;

427 
ch
->
	`dúe˘i⁄
(Ë
hdr_cmn
::
DOWN
;

428 
ch
->
	`size
(Ë+
Àn
 + 
IP_HDR_LEN
;

429 
ch
->
	`iÁ˚
() = -2;

430 
ch
->
	`îr‹
() = 0;

431 
ch
->
¥ev_h›_
 = (
nßddr_t
Ë
dev
->
ùaddr
.
s_addr
;

434 
ih
->
	`ßddr
(Ë(
nßddr_t
Ë
dev
->
ùaddr
.
s_addr
;

435 
ih
->
	`daddr
(Ë(
nßddr_t
Ë
d°
.
s_addr
;

436 
ih
->
	`âl
(Ë
âl
;

439 
ih
->
	`•‹t
(Ë
RT_PORT
;

440 
ih
->
	`dp‹t
(Ë
RT_PORT
;

443 
ªtvÆ
 = 
Àn
;

451 i‡(
øãlimô
) {

453 
	`gëtimeofday
(&
now
, 
NULL
);

455 
aodv_msg
->
ty≥
) {

456 
AODV_RREQ
:

457 i‡(
num_ºeq
 =(
RREQ_RATELIMIT
 - 1)) {

458 i‡(
	`timevÆ_diff
(&
now
, &
ºeq_øãl
[0]) < 1000) {

459 
	`DEBUG
(
LOG_DEBUG
, 0, "RATELIMIT: Dropping RREQ %ld ms",

460 
	`timevÆ_diff
(&
now
, &
ºeq_øãl
[0]));

461 #ifde‡
NS_PORT


462 
Packë
::
	`‰ì
(
p
);

466 
	`memmove
(
ºeq_øãl
, &rreq_ratel[1],

467 (
timevÆ
Ë* (
num_ºeq
 - 1));

468 
	`mem˝y
(&
ºeq_øãl
[
num_ºeq
 - 1], &
now
,

469 (
timevÆ
));

472 
	`mem˝y
(&
ºeq_øãl
[
num_ºeq
], &
now
, (
timevÆ
));

473 
num_ºeq
++;

476 
AODV_RERR
:

477 i‡(
num_ªº
 =(
RERR_RATELIMIT
 - 1)) {

478 i‡(
	`timevÆ_diff
(&
now
, &
ªº_øãl
[0]) < 1000) {

479 
	`DEBUG
(
LOG_DEBUG
, 0, "RATELIMIT: Dropping RERR %ld ms",

480 
	`timevÆ_diff
(&
now
, &
ªº_øãl
[0]));

481 #ifde‡
NS_PORT


482 
Packë
::
	`‰ì
(
p
);

486 
	`memmove
(
ªº_øãl
, &rerr_ratel[1],

487 (
timevÆ
Ë* (
num_ªº
 - 1));

488 
	`mem˝y
(&
ªº_øãl
[
num_ªº
 - 1], &
now
,

489 (
timevÆ
));

492 
	`mem˝y
(&
ªº_øãl
[
num_ªº
], &
now
, (
timevÆ
));

493 
num_ªº
++;

501 i‡(
d°
.
s_addr
 =
AODV_BROADCAST
) {

503 
	`gëtimeofday
(&
this_ho°
.
bˇ°_time
, 
NULL
);

505 #ifde‡
NS_PORT


506 
ch
->
	`addr_ty≥
(Ë
NS_AF_NONE
;

508 
	`£ndPackë
(
p
, 
d°
, 0.0);

511 
ªtvÆ
 = 
	`£ndto
(
dev
->
sock
, 
£nd_buf
, 
Àn
, 0,

512 (
sockaddr
 *Ë&
d°_addr
, (dst_addr));

514 i‡(
ªtvÆ
 < 0) {

516 
	`Æog
(
LOG_WARNING
, 
î∫o
, 
__FUNCTION__
, "Failed sendÅo bc %s",

517 
	`ù_to_°r
(
d°
));

524 #ifde‡
NS_PORT


525 
ch
->
	`addr_ty≥
(Ë
NS_AF_INET
;

528 i‡(
d°
.
s_addr
 =
AODV_BROADCAST
)

529 
	`£ndPackë
(
p
, 
d°
, 0.001 * 
R™dom
::
	`unif‹m
());

531 
	`£ndPackë
(
p
, 
d°
, 0.0);

533 
ªtvÆ
 = 
	`£ndto
(
dev
->
sock
, 
£nd_buf
, 
Àn
, 0,

534 (
sockaddr
 *Ë&
d°_addr
, (dst_addr));

536 i‡(
ªtvÆ
 < 0) {

537 
	`Æog
(
LOG_WARNING
, 
î∫o
, 
__FUNCTION__
, "Failed sendÅo %s",

538 
	`ù_to_°r
(
d°
));

545 i‡(!(
aodv_msg
->
ty≥
 =
AODV_RREP
 && (
d°
.
s_addr
 =
AODV_BROADCAST
)))

546 
	`DEBUG
(
LOG_INFO
, 0, "AODV msgÅo %sÅtl=%d size=%u",

547 
	`ù_to_°r
(
d°
), 
âl
, 
ªtvÆ
, 
Àn
);

550 
	}
}

552 
AODV_msg
 *
NS_CLASS
 
	$aodv_sockë_√w_msg
()

554 
	`mem£t
(
£nd_buf
, '\0', 
SEND_BUF_SIZE
);

555  (
AODV_msg
 *Ë(
£nd_buf
);

556 
	}
}

559 
AODV_msg
 *
NS_CLASS
 
	$aodv_sockë_queue_msg
(
AODV_msg
 * 
aodv_msg
, 
size
)

561 
	`mem˝y
((*Ë
£nd_buf
, 
aodv_msg
, 
size
);

562  (
AODV_msg
 *Ë
£nd_buf
;

563 
	}
}

565 
	$aodv_sockë_˛ónup
()

567 #i‚de‡
NS_PORT


568 
i
;

570 
i
 = 0; i < 
MAX_NR_INTERFACES
; i++) {

571 i‡(!
	`DEV_NR
(
i
).
íabÀd
)

573 
	`˛o£
(
	`DEV_NR
(
i
).
sock
);

576 
	}
}

	@aodv_socket.h

23 #i‚de‡
_AODV_SOCKET_H


24 
	#_AODV_SOCKET_H


	)

26 #i‚de‡
NS_NO_GLOBALS


27 
	~<√töë/ù.h
>

29 
	~"defs.h
"

30 
	~"aodv_ªº.h
"

31 
	~"∑øms.h
"

33 
	#IPHDR_SIZE
 (
ùhdr
)

	)

38 
	#AODV_MSG_MAX_SIZE
 
RERR_SIZE
 + 100 * 
RERR_UDEST_SIZE


	)

39 
	#RECV_BUF_SIZE
 
AODV_MSG_MAX_SIZE


	)

40 
	#SEND_BUF_SIZE
 
RECV_BUF_SIZE


	)

43 #i‚de‡
NS_NO_DECLARATIONS


45 
timevÆ
 
	gºeq_øãl
[
RREQ_RATELIMIT
 - 1], 
	gªº_øãl
[
RERR_RATELIMIT
 - 1];

46 
	gnum_ºeq
;

47 
	gnum_ªº
;

49 
aodv_sockë_öô
();

50 
aodv_sockë_£nd
(
AODV_msg
 * 
aodv_msg
, 
ö_addr
 
d°
, 
Àn
,

51 
u_öt8_t
 
âl
, 
dev_öfo
 *
dev
);

52 
AODV_msg
 *
aodv_sockë_√w_msg
();

53 
AODV_msg
 *
aodv_sockë_queue_msg
(AODV_msg * 
aodv_msg
, 
size
);

54 
aodv_sockë_˛ónup
();

55 
aodv_sockë_¥o˚ss_∑ckë
(
AODV_msg
 * 
aodv_msg
, 
Àn
,

56 
ö_addr
 
§c
, ö_add∏
d°
, 
âl
,

57 
ifödex
);

58 
	#CMSG_NXTHDR_FIX
(
mhdr
, 
cmsg
Ë
	`cmsg_nxthdr_fix
((mhdr), (cmsg))

	)

59 
cmsghdr
 *
cmsg_nxthdr_fix
(
msghdr
 *
__msg
, cmsghd∏*
__cmsg
);

61 #ifde‡
NS_PORT


62 
ªcvAODVUUPackë
(
Packë
 * 
p
);

	@aodv_timeout.c

24 
	~<time.h
>

26 #ifde‡
NS_PORT


27 
	~"ns-2/aodv-uu.h
"

29 
	~"defs.h
"

30 
	~"aodv_timeout.h
"

31 
	~"aodv_sockë.h
"

32 
	~"aodv_√ighb‹.h
"

33 
	~"aodv_ºeq.h
"

34 
	~"aodv_hñlo.h
"

35 
	~"aodv_ªº.h
"

36 
	~"timî_queue.h
"

37 
	~"debug.h
"

38 
	~"∑øms.h
"

39 
	~"routög_èbÀ.h
"

40 
	~"£ek_li°.h
"

41 
	~"∆.h
"

43 
ex∑ndög_rög_£¨ch
, 
loˇl_ª∑ú
;

44 
rouã_dñëe_timeout
(*
¨g
);

50 
NS_CLASS
 
	$rouã_discovîy_timeout
(*
¨g
)

52 
timevÆ
 
now
;

53 
£ek_li°_t
 *
£ek_íåy
;

54 
π_èbÀ_t
 *
π
, *
ª∑ú_π
;

55 
£ek_íåy
 = (
£ek_li°_t
 *Ë
¨g
;

57 
	#TTL_VALUE
 
£ek_íåy
->
âl


	)

60 i‡(!
£ek_íåy
)

63 
	`gëtimeofday
(&
now
, 
NULL
);

65 
	`DEBUG
(
LOG_DEBUG
, 0, "%s", 
	`ù_to_°r
(
£ek_íåy
->
de°_addr
));

67 i‡(
£ek_íåy
->
ªqs
 < 
RREQ_RETRIES
) {

69 i‡(
ex∑ndög_rög_£¨ch
) {

71 i‡(
TTL_VALUE
 < 
TTL_THRESHOLD
)

72 
TTL_VALUE
 +
TTL_INCREMENT
;

74 
TTL_VALUE
 = 
NET_DIAMETER
;

75 
£ek_íåy
->
ªqs
++;

78 
	`timî_£t_timeout
(&
£ek_íåy
->
£ek_timî
,

79 
RING_TRAVERSAL_TIME
);

81 
£ek_íåy
->
ªqs
++;

82 
	`timî_£t_timeout
(&
£ek_íåy
->
£ek_timî
,

83 
£ek_íåy
->
ªqs
 * 2 *

84 
NET_TRAVERSAL_TIME
);

88 
	`DEBUG
(
LOG_DEBUG
, 0, "Seeking %sÅtl=%d wait=%d",

89 
	`ù_to_°r
(
£ek_íåy
->
de°_addr
),

90 
TTL_VALUE
, 2 * TTL_VALUE * 
NODE_TRAVERSAL_TIME
);

94 
π
 = 
	`π_èbÀ_föd
(
£ek_íåy
->
de°_addr
);

96 i‡(
π
 && 
	`timevÆ_diff
(&π->
π_timî
.
timeout
, &
now
) <

97 (2 * 
NET_TRAVERSAL_TIME
))

98 
	`π_èbÀ_upd©e_timeout
(
π
, 2 * 
NET_TRAVERSAL_TIME
);

100 
	`ºeq_£nd
(
£ek_íåy
->
de°_addr
, sìk_íåy->
de°_£qno
,

101 
TTL_VALUE
, 
£ek_íåy
->
Êags
);

105 
	`DEBUG
(
LOG_DEBUG
, 0, "NO ROUTE FOUND!");

107 #ifde‡
NS_PORT


108 
	`∑ckë_queue_£t_vîdi˘
(
£ek_íåy
->
de°_addr
, 
PQ_DROP
);

110 
	`∆_£nd_no_rouã_found_msg
(
£ek_íåy
->
de°_addr
);

112 
ª∑ú_π
 = 
	`π_èbÀ_föd
(
£ek_íåy
->
de°_addr
);

114 
	`£ek_li°_ªmove
(
£ek_íåy
);

118 i‡(
ª∑ú_π
 && (ª∑ú_π->
Êags
 & 
RT_REPAIR
)) {

119 
	`DEBUG
(
LOG_DEBUG
, 0, "REPAIR for %s failed!",

120 
	`ù_to_°r
(
ª∑ú_π
->
de°_addr
));

121 
	`loˇl_ª∑ú_timeout
(
ª∑ú_π
);

124 
	}
}

126 
NS_CLASS
 
	$loˇl_ª∑ú_timeout
(*
¨g
)

128 
π_èbÀ_t
 *
π
;

129 
ö_addr
 
ªº_de°
;

130 
RERR
 *
ªº
 = 
NULL
;

132 
π
 = (
π_èbÀ_t
 *Ë
¨g
;

134 i‡(!
π
)

137 
ªº_de°
.
s_addr
 = 
AODV_BROADCAST
;

140 
π
->
Êags
 &~
RT_REPAIR
;

142 #i‚de‡
NS_PORT


143 
	`∆_£nd_dñ_rouã_msg
(
π
->
de°_addr
,Ñt->
√xt_h›
,Ñt->
h˙t
);

147 i‡(
π
->
≈ªc
) {

149 
ªº
 = 
	`ªº_¸óã
(0, 
π
->
de°_addr
,Ñt->
de°_£qno
);

151 i‡(
π
->
≈ªc
 == 1) {

152 
ªº_de°
 = 
	`FIRST_PREC
(
π
->
¥ecurs‹s
)->
√ighb‹
;

154 
	`aodv_sockë_£nd
((
AODV_msg
 *Ë
ªº
, 
ªº_de°
,

155 
	`RERR_CALC_SIZE
(
ªº
), 1,

156 &
	`DEV_IFINDEX
(
π
->
ifödex
));

158 
i
;

160 
i
 = 0; i < 
MAX_NR_INTERFACES
; i++) {

161 i‡(!
	`DEV_NR
(
i
).
íabÀd
)

163 
	`aodv_sockë_£nd
((
AODV_msg
 *Ë
ªº
, 
ªº_de°
,

164 
	`RERR_CALC_SIZE
(
ªº
), 1,

165 &
	`DEV_NR
(
i
));

168 
	`DEBUG
(
LOG_DEBUG
, 0, "Sending RERRábout %sÅo %s",

169 
	`ù_to_°r
(
π
->
de°_addr
), ip_to_°r(
ªº_de°
));

171 
	`¥ecurs‹_li°_de°roy
(
π
);

176 
π
->
π_timî
.
h™dÀr
 = &
NS_CLASS
 
rouã_dñëe_timeout
;

177 
	`timî_£t_timeout
(&
π
->
π_timî
, 
DELETE_PERIOD
);

179 
	`DEBUG
(
LOG_DEBUG
, 0, "%sÑemoved in %u msecs",

180 
	`ù_to_°r
(
π
->
de°_addr
), 
DELETE_PERIOD
);

181 
	}
}

184 
NS_CLASS
 
	$rouã_expúe_timeout
(*
¨g
)

186 
π_èbÀ_t
 *
π
;

188 
π
 = (
π_èbÀ_t
 *Ë
¨g
;

190 i‡(!
π
) {

191 
	`Æog
(
LOG_WARNING
, 0, 
__FUNCTION__
,

196 
	`DEBUG
(
LOG_DEBUG
, 0, "Route %s DOWN, seqno=%d",

197 
	`ù_to_°r
(
π
->
de°_addr
),Ñt->
de°_£qno
);

199 i‡(
π
->
h˙t
 == 1)

200 
	`√ighb‹_lök_bªak
(
π
);

202 
	`π_èbÀ_övÆid©e
(
π
);

203 
	`¥ecurs‹_li°_de°roy
(
π
);

207 
	}
}

209 
NS_CLASS
 
	$rouã_dñëe_timeout
(*
¨g
)

211 
π_èbÀ_t
 *
π
;

213 
π
 = (
π_èbÀ_t
 *Ë
¨g
;

216 i‡(!
π
)

219 
	`DEBUG
(
LOG_DEBUG
, 0, "%s", 
	`ù_to_°r
(
π
->
de°_addr
));

221 
	`π_èbÀ_dñëe
(
π
);

222 
	}
}

226 
NS_CLASS
 
	$hñlo_timeout
(*
¨g
)

228 
π_èbÀ_t
 *
π
;

229 
timevÆ
 
now
;

231 
π
 = (
π_èbÀ_t
 *Ë
¨g
;

233 i‡(!
π
)

236 
	`gëtimeofday
(&
now
, 
NULL
);

238 
	`DEBUG
(
LOG_DEBUG
, 0, "LINK/HELLO FAILURE %sÜast HELLO: %d",

239 
	`ù_to_°r
(
π
->
de°_addr
), 
	`timevÆ_diff
(&
now
,

240 &
π
->
œ°_hñlo_time
));

242 i‡(
π
 &&Ñt->
°©e
 =
VALID
 && !‘t->
Êags
 & 
RT_UNIDIR
)) {

246 i‡(
loˇl_ª∑ú
 && 
π
->
h˙t
 <
MAX_REPAIR_TTL
) {

247 
π
->
Êags
 |
RT_REPAIR
;

248 
	`DEBUG
(
LOG_DEBUG
, 0, "Marking %s for REPAIR",

249 
	`ù_to_°r
(
π
->
de°_addr
));

250 #ifde‡
NS_PORT


252 
	`öãrÁ˚Queue
((
nßddr_t
Ë
π
->
de°_addr
.
s_addr
,

253 
IFQ_BUFFER
);

256 
	`√ighb‹_lök_bªak
(
π
);

258 
	}
}

260 
NS_CLASS
 
	$ºï_ack_timeout
(*
¨g
)

262 
π_èbÀ_t
 *
π
;

266 
π
 = (
π_èbÀ_t
 *Ë
¨g
;

268 i‡(!
π
)

273 
	`ºeq_bœckli°_ö£π
(
π
->
de°_addr
);

275 
	`DEBUG
(
LOG_DEBUG
, 0, "%s", 
	`ù_to_°r
(
π
->
de°_addr
));

276 
	}
}

278 
NS_CLASS
 
	$waô_⁄_ªboŸ_timeout
(*
¨g
)

280 *((*Ë
¨g
) = 0;

282 
	`DEBUG
(
LOG_DEBUG
, 0, "Wait onÑeboot over!!");

283 
	}
}

285 #ifde‡
NS_PORT


286 
NS_CLASS
 
	$∑ckë_queue_timeout
(*
¨g
)

288 
	`∑ckë_queue_g¨bage_cﬁÀ˘
();

289 
	`timî_£t_timeout
(&
PQ
.
g¨bage_cﬁÀ˘_timî
, 
GARBAGE_COLLECT_TIME
);

290 
	}
}

	@aodv_timeout.h

23 #i‚de‡
_AODV_TIMEOUT_H


24 
	#_AODV_TIMEOUT_H


	)

26 #i‚de‡
NS_NO_GLOBALS


27 
	~"defs.h
"

30 #i‚de‡
NS_NO_DECLARATIONS


31 
rouã_dñëe_timeout
(*
¨g
);

32 
loˇl_ª∑ú_timeout
(*
¨g
);

33 
rouã_discovîy_timeout
(*
¨g
);

34 
rouã_expúe_timeout
(*
¨g
);

35 
hñlo_timeout
(*
¨g
);

36 
ºï_ack_timeout
(*
¨g
);

37 
waô_⁄_ªboŸ_timeout
(*
¨g
);

38 
∑ckë_queue_timeout
(*
¨g
);

	@debug.c

24 
	~<°dlib.h
>

25 
	~<°d¨g.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sys/°©.h
>

28 
	~<f˙é.h
>

29 
	~<°rög.h
>

30 
	~<time.h
>

32 #ifde‡
NS_PORT


33 
	~"ns-2/aodv-uu.h
"

35 
	~<√t/if.h
>

36 
	~"aodv_ºeq.h
"

37 
	~"aodv_ºï.h
"

38 
	~"aodv_ªº.h
"

39 
	~"defs.h
"

40 
	~"debug.h
"

41 
	~"∑øms.h
"

42 
	~"timî_queue.h
"

43 
	~"routög_èbÀ.h
"

46 #i‚de‡
NS_PORT


47 
log_to_fûe
, 
π_log_öãrvÆ
;

48 *
¥og«me
;

49 
	glog_fûe_fd
 = -1;

50 
	glog_π_fd
 = -1;

51 
	glog_nmsgs
 = 0;

52 
	gdebug
 = 0;

53 
timî
 
	gπ_log_timî
;

56 
	#C4ISR


	)

58 
NS_CLASS
 
	$log_öô
()

62 #ifde‡
NS_PORT


64 
AODV_LOG_PATH
[
	`°æí
(
AODV_LOG_PATH_PREFIX
) +

65 
	`°æí
(
AODV_LOG_PATH_SUFFIX
) + 16];

66 
AODV_RT_LOG_PATH
[
	`°æí
(
AODV_LOG_PATH_PREFIX
) +

67 
	`°æí
(
AODV_RT_LOG_PATH_SUFFIX
) + 16];

70 
	`•rötf
(
AODV_LOG_PATH
, "%s%d%s", 
AODV_LOG_PATH_PREFIX
, 
node_id
,

71 
AODV_LOG_PATH_SUFFIX
);

72 
	`•rötf
(
AODV_RT_LOG_PATH
, "%s%d%s", 
AODV_LOG_PATH_PREFIX
, 
node_id
,

73 
AODV_RT_LOG_PATH_SUFFIX
);

77 i‡(
log_to_fûe
) {

78 i‡((
log_fûe_fd
 =

79 
	`›í
(
AODV_LOG_PATH
, 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
,

80 
S_IROTH
 | 
S_IWUSR
 | 
S_IRUSR
 | 
S_IRGRP
)) < 0) {

81 
	`≥º‹
("openÜog file failed!");

82 
	`exô
(-1);

85 i‡(
π_log_öãrvÆ
) {

86 i‡((
log_π_fd
 =

87 
	`›í
(
AODV_RT_LOG_PATH
, 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
,

88 
S_IROTH
 | 
S_IWUSR
 | 
S_IRUSR
 | 
S_IRGRP
)) < 0) {

89 
	`≥º‹
("openÑtÜog file failed!");

90 
	`exô
(-1);

93 
	`›ílog
(
¥og«me
, 0, 
LOG_DAEMON
);

94 
	}
}

96 
NS_CLASS
 
	$log_π_èbÀ_öô
()

98 
	`timî_öô
(&
π_log_timî
, &
NS_CLASS
 
¥öt_π_èbÀ
, 
NULL
);

99 
	`timî_£t_timeout
(&
π_log_timî
, 
π_log_öãrvÆ
);

100 
	}
}

102 
NS_CLASS
 
	$log_˛ónup
()

104 i‡(
log_to_fûe
 && 
log_fûe_fd
) {

105 i‡(
NS_OUTSIDE_CLASS
 
	`˛o£
(
log_fûe_fd
) < 0)

106 
	`Ârötf
(
°dîr
, "CouldÇot closeÜog_file_fd!\n");

108 
	}
}

110 
NS_CLASS
 
	$wrôe_to_log_fûe
(*
msg
, 
Àn
)

112 i‡(!
log_fûe_fd
) {

113 
	`Ârötf
(
°dîr
, "CouldÇot writeÅoÜog file\n");

116 i‡(
Àn
 <= 0) {

117 
	`Ârötf
(
°dîr
, "len=0\n");

120 i‡(
	`wrôe
(
log_fûe_fd
, 
msg
, 
Àn
) < 0)

121 
	`≥º‹
("CouldÇot writeÅoÜog file");

122 
	}
}

124 *
	$∑ckë_ty≥
(
u_öt
 
ty≥
)

126 
ãmp
[50];

128 
ty≥
) {

129 
AODV_RREQ
:

131 
AODV_RREP
:

133 
AODV_RERR
:

136 
	`•rötf
(
ãmp
, "Unknow¿∑ckëÅy≥ %d", 
ty≥
);

137  
ãmp
;

139 
	}
}

141 
NS_CLASS
 
	$Æog
(
ty≥
, 
î∫um
, c⁄° *
fun˘i⁄
, *
f‹m©
,

144 
va_li°
 
≠
;

145 
buf„r
[256] = "";

146 
log_buf
[1024];

147 *
msg
;

148 
timevÆ
 
now
;

149 
tm
 *
time
;

150 
Àn
 = 0;

153 #ifde‡
NS_PORT


154 i‡(
	`DEV_NR
(
NS_DEV_NR
).
íabÀd
 == 1) {

155 
Àn
 +
	`•rötf
(
log_buf
 +Üen, "%s: ",

156 
	`ù_to_°r
(
	`DEV_NR
(
NS_DEV_NR
).
ùaddr
));

160 
	`va_°¨t
(
≠
, 
f‹m©
);

162 i‡(
ty≥
 =
LOG_WARNING
)

163 
msg
 = &
buf„r
[9];

165 
msg
 = 
buf„r
;

167 
	`v•rötf
(
msg
, 
f‹m©
, 
≠
);

168 
	`va_íd
(
≠
);

170 i‡(!
debug
 && !
log_to_fûe
)

171 
sy¶og
;

173 
	`gëtimeofday
(&
now
, 
NULL
);

175 #ifde‡
NS_PORT


176 
time
 = 
	`gmtime
(&
now
.
tv_£c
);

178 
time
 = 
	`loˇ…ime
(&
now
.
tv_£c
);

184 
Àn
 +
	`•rötf
(
log_buf
 +Üí, "%02d:%02d:%02d.%03ld %s: %s", 
time
->
tm_hour
,

185 
time
->
tm_mö
,Åime->
tm_£c
, 
now
.
tv_u£c
 / 1000, 
fun˘i⁄
,

186 
msg
);

188 i‡(
î∫um
 == 0)

189 
Àn
 +
	`•rötf
(
log_buf
 +Üen, "\n");

191 
Àn
 +
	`•rötf
(
log_buf
 +Üí, ": %s\n", 
	`°ªº‹
(
î∫um
));

193 i‡(
Àn
 > 1024) {

194 
	`Ârötf
(
°dîr
, "Æog(): buf„∏tÿsmÆl!Üí = %d\n", 
Àn
);

195 
sy¶og
;

199 i‡(
log_to_fûe
)

200 
	`wrôe_to_log_fûe
(
log_buf
, 
Àn
);

203 i‡(
debug
)

204 
	`¥ötf
("%s", 
log_buf
);

207 
sy¶og
:

208 i‡(
ty≥
 <
LOG_NOTICE
) {

209 i‡(
î∫um
 != 0) {

210 
î∫o
 = 
î∫um
;

211 
	`sy¶og
(
ty≥
, "%s: %s: %m", 
fun˘i⁄
, 
msg
);

213 
	`sy¶og
(
ty≥
, "%s: %s", 
fun˘i⁄
, 
msg
);

216 i‡(
ty≥
 <
LOG_ERR
)

217 
	`exô
(-1);

218 
	}
}

221 *
NS_CLASS
 
	$ºeq_Êags_to_°r
(
RREQ
 * 
ºeq
)

223 
buf
[5];

224 
Àn
 = 0;

225 *
°r
;

227 i‡(
ºeq
->
j
)

228 
buf
[
Àn
++] = 'J';

229 i‡(
ºeq
->
r
)

230 
buf
[
Àn
++] = 'R';

231 i‡(
ºeq
->
g
)

232 
buf
[
Àn
++] = 'G';

233 i‡(
ºeq
->
d
)

234 
buf
[
Àn
++] = 'D';

236 
buf
[
Àn
] = '\0';

238 
°r
 = 
buf
;

239  
°r
;

240 
	}
}

242 *
NS_CLASS
 
	$ºï_Êags_to_°r
(
RREP
 * 
ºï
)

244 
buf
[3];

245 
Àn
 = 0;

246 *
°r
;

248 i‡(
ºï
->
r
)

249 
buf
[
Àn
++] = 'R';

250 i‡(
ºï
->
a
)

251 
buf
[
Àn
++] = 'A';

253 
buf
[
Àn
] = '\0';

255 
°r
 = 
buf
;

256  
°r
;

257 
	}
}

259 
NS_CLASS
 
	$log_pkt_fõlds
(
AODV_msg
 * 
msg
)

262 
RREQ
 *
ºeq
;

263 
RREP
 *
ºï
;

264 
RERR
 *
ªº
;

265 
ö_addr
 
de°
, 
‹ig
;

267 
msg
->
ty≥
) {

268 
AODV_RREQ
:

270 
ºeq
 = (
RREQ
 *Ë
msg
;

271 
de°
.
s_addr
 = 
ºeq
->
de°_addr
;

272 
‹ig
.
s_addr
 = 
ºeq
->
‹ig_addr
;

276 
	`DEBUG
(
LOG_DEBUG
, 0,

278 
	`ºeq_Êags_to_°r
(
ºeq
),Ñªq->
h˙t
);

279 
	`DEBUG
(
LOG_DEBUG
, 0, "rreq->dest_addr:%sÑreq->dest_seqno=%lu",

280 
	`ù_to_°r
(
de°
), 
	`¡ohl
(
ºeq
->
de°_£qno
));

281 
	`DEBUG
(
LOG_DEBUG
, 0, "rreq->orig_addr:%sÑreq->orig_seqno=%ld",

282 
	`ù_to_°r
(
‹ig
), 
	`¡ohl
(
ºeq
->
‹ig_£qno
));

284 
AODV_RREP
:

285 
ºï
 = (
RREP
 *Ë
msg
;

286 
de°
.
s_addr
 = 
ºï
->
de°_addr
;

287 
‹ig
.
s_addr
 = 
ºï
->
‹ig_addr
;

288 
	`DEBUG
(
LOG_DEBUG
, 0, "rrep->flags:%sÑrep->hcnt=%d",

289 
	`ºï_Êags_to_°r
(
ºï
),Ñªp->
h˙t
);

290 
	`DEBUG
(
LOG_DEBUG
, 0, "rrep->dest_addr:%sÑrep->dest_seqno=%d",

291 
	`ù_to_°r
(
de°
), 
	`¡ohl
(
ºï
->
de°_£qno
));

292 
	`DEBUG
(
LOG_DEBUG
, 0, "rrep->orig_addr:%sÑrep->lifetime=%d",

293 
	`ù_to_°r
(
‹ig
), 
	`¡ohl
(
ºï
->
li„time
));

295 
AODV_RERR
:

296 
ªº
 = (
RERR
 *Ë
msg
;

297 
	`DEBUG
(
LOG_DEBUG
, 0, "rerr->dest_count:%dÑerr->flags=%s",

298 
ªº
->
de°_cou¡
,Ñîr->
n
 ? "N" : "-");

301 
	}
}

303 *
NS_CLASS
 
	$π_Êags_to_°r
(
u_öt16_t
 
Êags
)

305 
buf
[5];

306 
Àn
 = 0;

307 *
°r
;

309 i‡(
Êags
 & 
RT_UNIDIR
)

310 
buf
[
Àn
++] = 'U';

311 i‡(
Êags
 & 
RT_REPAIR
)

312 
buf
[
Àn
++] = 'R';

313 i‡(
Êags
 & 
RT_INET_DEST
)

314 
buf
[
Àn
++] = 'I';

315 i‡(
Êags
 & 
RT_GATEWAY
)

316 
buf
[
Àn
++] = 'G';

317 
buf
[
Àn
] = '\0';

319 
°r
 = 
buf
;

320  
°r
;

321 
	}
}

323 *
NS_CLASS
 
	$°©e_to_°r
(
u_öt8_t
 
°©e
)

325 i‡(
°©e
 =
VALID
)

327 i‡(
°©e
 =
INVALID
)

331 
	}
}

333 *
NS_CLASS
 
	$devs_ù_to_°r
()

335 
buf
[
MAX_NR_INTERFACES
 * 
IFNAMSIZ
];

336 *
°r
;

337 
i
, 
ödex
 = 0;

339 
i
 = 0; i < 
MAX_NR_INTERFACES
; i++) {

340 i‡(!
	`DEV_NR
(
i
).
íabÀd
)

342 
ödex
 +
	`•rötf
(
buf
 + index, "%s,", 
	`ù_to_°r
(
	`DEV_NR
(
i
).
ùaddr
));

344 
°r
 = 
buf
;

345  
°r
;

346 
	}
}

348 
NS_CLASS
 
	$¥öt_π_èbÀ
(*
¨g
)

350 
π_buf
[2048], 
i‚ame
[64], 
£qno_°r
[11];

351 
Àn
 = 0;

352 
i
 = 0;

353 
timevÆ
 
now
;

354 
tm
 *
time
;

355 
ssize_t
 
wrôãn
;

358 i‡(
π_tbl
.
num_íåõs
 == 0)

359 
scheduÀ
;

361 
	`gëtimeofday
(&
now
, 
NULL
);

363 #ifde‡
NS_PORT


364 
time
 = 
	`gmtime
(&
now
.
tv_£c
);

366 
time
 = 
	`loˇ…ime
(&
now
.
tv_£c
);

369 
Àn
 +=

370 
	`•rötf
(
π_buf
,

372 
time
->
tm_hour
,Åime->
tm_mö
,Åime->
tm_£c
, 
now
.
tv_u£c
 / 1000,

373 
	`devs_ù_to_°r
(), 
this_ho°
.
£qno
, 
π_tbl
.
num_íåõs
,

374 
π_tbl
.
num_a˘ive
);

375 
Àn
 +=

376 
	`•rötf
(
π_buf
 + 
Àn
,

381 
wrôãn
 = 
	`wrôe
(
log_π_fd
, 
π_buf
, 
Àn
);

383 
Àn
 = 0;

385 
i
 = 0; i < 
RT_TABLESIZE
; i++) {

386 
li°_t
 *
pos
;

387 
	`li°_f‹óch
(
pos
, &
π_tbl
.
tbl
[
i
]) {

388 
π_èbÀ_t
 *
π
 = (π_èbÀ_à*Ë
pos
;

390 i‡(
π
->
de°_£qno
 == 0)

391 
	`•rötf
(
£qno_°r
, "-");

393 
	`•rötf
(
£qno_°r
, "%u", 
π
->
de°_£qno
);

396 i‡(
	`li°_em±y
(&
π
->
¥ecurs‹s
))

397 
Àn
 +
	`•rötf
(
π_buf
 +Üen,

399 
	`ù_to_°r
(
π
->
de°_addr
),

400 
	`ù_to_°r
(
π
->
√xt_h›
),Ñt->
h˙t
,

401 
	`°©e_to_°r
(
π
->
°©e
), 
£qno_°r
,

402 (
π
->
h˙t
 == 255) ? 0 :

403 
	`timevÆ_diff
(&
π
->
π_timî
.
timeout
, &
now
),

404 
	`π_Êags_to_°r
(
π
->
Êags
),

405 
	`if_ödext⁄ame
(
π
->
ifödex
, 
i‚ame
));

408 
li°_t
 *
pos2
;

409 
Àn
 +
	`•rötf
(
π_buf
 +Üen,

411 
	`ù_to_°r
(
π
->
de°_addr
),

412 
	`ù_to_°r
(
π
->
√xt_h›
),Ñt->
h˙t
,

413 
	`°©e_to_°r
(
π
->
°©e
), 
£qno_°r
,

414 (
π
->
h˙t
 == 255) ? 0 :

415 
	`timevÆ_diff
(&
π
->
π_timî
.
timeout
, &
now
),

416 
	`π_Êags_to_°r
(
π
->
Êags
),

417 
	`if_ödext⁄ame
(
π
->
ifödex
, 
i‚ame
),

418 
	`ù_to_°r
(((
¥ecurs‹_t
 *Ë
π
->
¥ecurs‹s
.
√xt
)->

419 
√ighb‹
));

422 
	`li°_f‹óch
(
pos2
, &
π
->
¥ecurs‹s
) {

423 
¥ecurs‹_t
 *
¥
 = (¥ecurs‹_à*Ë
pos2
;

426 i‡(
pos2
->
¥ev
 =&
π
->
¥ecurs‹s
)

429 
Àn
 +
	`•rötf
(
π_buf
 +Üen, "%64s %-15s\n", " ",

430 
	`ù_to_°r
(
¥
->
√ighb‹
));

435 
wrôãn
 = 
	`wrôe
(
log_π_fd
, 
π_buf
, 
Àn
);

436 
Àn
 = 0;

439 i‡(
Àn
 > 0) {

440 
wrôãn
 = 
	`wrôe
(
log_π_fd
, 
π_buf
, 
Àn
);

441 
Àn
 = 0;

444 
	`DEBUG
(
LOG_INFO
, 0, "wrôê%d w‹ds\n",
wrôãn
);

448 
scheduÀ
:

449 
	`timî_£t_timeout
(&
π_log_timî
, 
π_log_öãrvÆ
);

450 
	}
}

453 *
NS_CLASS
 
	$ù_to_°r
(
ö_addr
 
addr
)

455 
buf
[16 * 4];

456 
ödex
 = 0;

457 *
°r
;

458 #ifde‡
NS_PORT


459 #unde‡
ht⁄l


460 
addr
.
s_addr
 = 
	`ht⁄l
(addr.s_addr);

462 
	`°r˝y
(&
buf
[
ödex
], 
	`öë_¡ﬂ
(
addr
));

463 
°r
 = &
buf
[
ödex
];

464 
ödex
 += 16;

465 
ödex
 %= 64;

466  
°r
;

467 
	}
}

	@debug.h

22 #i‚de‡
_DEBUG_H


23 
	#_DEBUG_H


	)

25 #i‚de‡
NS_PORT


26 
debug
;

29 #i‚de‡
NS_NO_DECLARATIONS


30 
log_öô
();

31 
log_˛ónup
();

33 *
∑ckë_ty≥
(
ty≥
);

34 
Æog
(
ty≥
, 
î∫um
, c⁄° *
fun˘i⁄
, *
f‹m©
, ...);

35 
log_pkt_fõlds
(
AODV_msg
 * 
msg
);

36 
¥öt_π_èbÀ
(*
¨g
);

37 
log_π_èbÀ_öô
();

38 *
ù_to_°r
(
ö_addr
 
addr
);

40 #ifde‡
NS_PORT


41 
wrôe_to_log_fûe
(*
msg
, 
Àn
);

42 *
devs_ù_to_°r
();

43 *
ºeq_Êags_to_°r
(
RREQ
 * 
ºeq
);

44 *
ºï_Êags_to_°r
(
RREP
 * 
ºï
);

45 *
π_Êags_to_°r
(
u_öt16_t
 
Êags
);

46 *
°©e_to_°r
(
u_öt8_t
 
°©e
);

50 #i‚de‡
NS_NO_GLOBALS


51 #ifde‡
DEBUG


52 #unde‡
DEBUG


53 
	#DEBUG_OUTPUT


	)

54 
	#DEBUG
(
l
, 
s
, 
¨gs
...Ë
	`Æog
÷, s, 
__FUNCTION__
, ##árgs)

	)

56 
	#DEBUG
(
l
, 
s
, 
¨gs
...)

	)

	@defs.h

22 #i‚de‡
_DEFS_H


23 
	#_DEFS_H


	)

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<uni°d.h
>

28 
	~<sys/time.h
>

29 
	~<sys/ty≥s.h
>

31 #i‚de‡
NS_PORT


32 
	~<sys/sig«l.h
>

33 
	~<√töë/ö.h
>

34 
	~<¨∑/öë.h
>

35 
	~<√töë/ù.h
>

36 
	~<sys/io˘l.h
>

39 
	~<sy¶og.h
>

40 
	~<î∫o.h
>

41 
	~<°rög.h
>

42 
	~<f˙é.h
>

44 #i‚de‡
NS_PORT


45 
	~"timî_queue.h
"

48 #ifde‡
NS_PORT


49 
	#NS_CLASS
 
AODVUU
::

	)

50 
	#NS_OUTSIDE_CLASS
 ::

	)

51 
	#NS_STATIC


	)

52 
	#NS_INLINE


	)

54 
	#NS_DEV_NR
 0

	)

55 
	#NS_IFINDEX
 
NS_DEV_NR


	)

57 
	#NS_CLASS


	)

58 
	#NS_OUTSIDE_CLASS


	)

59 
	#NS_STATIC
 

	)

60 
	#NS_INLINE
 
ölöe


	)

63 
	#AODV_UU_VERSION
 "0.9"

	)

64 
	#DRAFT_VERSION
 "rfc3561"

	)

66 #ifde‡
NS_PORT


68 
	#AODV_LOG_PATH_PREFIX
 "aodv-uu-"

	)

69 
	#AODV_RT_LOG_PATH_SUFFIX
 ".πlog"

	)

70 
	#AODV_LOG_PATH_SUFFIX
 ".log"

	)

72 
	#AODV_LOG_PATH
 "/v¨/log/aodvd.log"

	)

73 
	#AODV_RT_LOG_PATH
 "/v¨/log/aodvd.πlog"

	)

76 
	#max
(
A
,
B
Ë–(AË> (BË? (A):(B))

	)

78 
	#MINTTL
 1

	)

80 
	#MAX_NR_INTERFACES
 10

	)

81 
	#MAX_IFINDEX
 (
MAX_NR_INTERFACES
 - 1)

	)

83 #i‡!
deföed
(
IFNAMSIZ
)

84 
	#IFNAMSIZ
 16

	)

88 
	sdev_öfo
 {

89 
	míabÀd
;

90 
	msock
;

91 #ifde‡
CONFIG_GATEWAY


92 
	mpsock
;

94 
	mifödex
;

95 
	mi‚ame
[
IFNAMSIZ
];

96 
ö_addr
 
	mùaddr
;

97 
ö_addr
 
	m√tmask
;

98 
ö_addr
 
	mbrﬂdˇ°
;

101 
	sho°_öfo
 {

102 
u_öt32_t
 
	m£qno
;

103 
timevÆ
 
	mbˇ°_time
;

104 
timevÆ
 
	mfwd_time
;

105 
u_öt32_t
 
	mºeq_id
;

106 
	mnif
;

107 
dev_öfo
 
	mdevs
[
MAX_NR_INTERFACES
+1];

120 #i‚de‡
NS_PORT


122 
ho°_öfo
 
	gthis_ho°
;

125 
	gdev_ödi˚s
[
MAX_NR_INTERFACES
];

130 
ölöe
 
	$ifödex2devödex
(
ifödex
)

132 
i
;

134 
i
 = 0; i < 
this_ho°
.
nif
; i++)

135 i‡(
dev_ödi˚s
[
i
] =
ifödex
)

136  
i
;

138  
MAX_NR_INTERFACES
;

139 
	}
}

141 
ölöe
 
dev_öfo
 *
	$dev‰omsock
(
sock
)

143 
i
;

145 
i
 = 0; i < 
this_ho°
.
nif
; i++) {

146 i‡(
this_ho°
.
devs
[
i
].
sock
 == sock)

147  &
this_ho°
.
devs
[
i
];

149  
NULL
;

150 
	}
}

152 
ölöe
 
	$«me2ödex
(*
«me
)

154 
i
;

156 
i
 = 0; i < 
this_ho°
.
nif
; i++)

157 i‡(
	`°rcmp
(
«me
, 
this_ho°
.
devs
[
i
].
i‚ame
) == 0)

158  
this_ho°
.
devs
[
i
].
ifödex
;

161 
	}
}

168 
	#DEV_IFINDEX
(
ifödex
Ë(
this_ho°
.
devs
[
	`ifödex2devödex
(ifödex)])

	)

169 
	#DEV_NR
(
n
Ë(
this_ho°
.
devs
[n])

	)

172 
	#AODV_BROADCAST
 ((
ö_addr_t
Ë0xFFFFFFFF)

	)

174 
	#AODV_PORT
 654

	)

177 
	#AODV_HELLO
 0

	)

178 
	#AODV_RREQ
 1

	)

179 
	#AODV_RREP
 2

	)

180 
	#AODV_RERR
 3

	)

181 
	#AODV_RREP_ACK
 4

	)

184 #ifde‡
NS_PORT


185 
	sAODV_msg
 {

189 
u_öt8_t
 
	mty≥
;

192 #ifde‡
NS_PORT


193 
	moff£t_
;

195 
ölöe
 &
off£t
() {

196  
	moff£t_
;

198 
ölöe
 
AODV_msg
 *
ac˚ss
(c⁄° 
Packë
 * 
p
) {

199  (
	mAODV_msg
 *Ë
	mp
->
ac˚ss
(
off£t_
);

202 
size
();

205 
AODV_msg
 
	thdr_aodvuu
;

206 
	#HDR_AODVUU
(
p
Ë((
hdr_aodvuu
 *Ëhdr_aodvuu::
	`ac˚ss
’))

	)

208 } 
	gAODV_msg
;

212 
	#RREQ_EXT
 1

	)

213 
	#RREP_EXT
 1

	)

214 
	#RREP_HELLO_INTERVAL_EXT
 2

	)

215 
	#RREP_HELLO_NEIGHBOR_SET_EXT
 3

	)

216 
	#RREP_INET_DEST_EXT
 4

	)

220 
u_öt8_t
 
	mty≥
;

221 
u_öt8_t
 
	mÀngth
;

223 } 
	tAODV_ext
;

226 
	#AODV_EXT_HDR_SIZE
 (
AODV_ext
)

	)

227 
	#AODV_EXT_DATA
(
ext
Ë((*)((*Îxà+ 
AODV_EXT_HDR_SIZE
))

	)

228 
	#AODV_EXT_NEXT
(
ext
Ë((
AODV_ext
 *)((*Îxà+ 
AODV_EXT_HDR_SIZE
 +Éxt->
Àngth
))

	)

229 
	#AODV_EXT_SIZE
(
ext
Ë(
AODV_EXT_HDR_SIZE
 +Éxt->
Àngth
)

	)

231 #i‚de‡
NS_PORT


233 (*
	tˇŒback_func_t
) ();

234 
	`©èch_ˇŒback_func
(
fd
, 
ˇŒback_func_t
 
func
);

	@endian.c

34 
	~<°dio.h
>

36 
	$lôíd
()

38 
i
 = 0;

39 ((*Ë(&
i
))[0] = 1;

40  (
i
 == 1);

41 
	}
}

43 
	$bigíd
()

45  !
	`lôíd
();

46 
	}
}

48 
	$maö
(
¨gc
, **
¨gv
)

50 
	`¥ötf
("#ifndef ENDIAN_H\n");

51 
	`¥ötf
("#define ENDIAN_H\n");

52 
	`¥ötf
("#define __LITTLE_ENDIAN 1234\n");

53 
	`¥ötf
("#define __BIG_ENDIAN 4321\n");

54 
	`¥ötf
("#deföê__BYTE_ORDER __%s_ENDIAN\n", 
	`lôíd
()? "LITTLE" : "BIG");

55 
	`¥ötf
("#endif\n");

57 
	}
}

	@list.c

22 
	~<°dlib.h
>

24 
	~"li°.h
"

26 
ölöe
 
	$li°ñm_dëach
(
li°_t
 * 
¥ev
,Üi°_à* 
√xt
)

28 
√xt
->
¥ev
 =Örev;

29 
¥ev
->
√xt
 =Çext;

31  
LIST_SUCCESS
;

32 
	}
}

34 
ölöe
 
	$li°ñm_add
(
li°_t
 * 
À
,Üi°_à* 
¥ev
,Üi°_à* 
√xt
)

36 
¥ev
->
√xt
 = 
À
;

37 
À
->
¥ev
 =Örev;

38 
À
->
√xt
 =Çext;

39 
√xt
->
¥ev
 = 
À
;

41  
LIST_SUCCESS
;

42 
	}
}

44 
	$li°_add
(
li°_t
 * 
hód
,Üi°_à* 
À
)

47 i‡(!
hód
 || !
À
)

48  
LIST_NULL
;

50 
	`li°ñm_add
(
À
, 
hód
, hód->
√xt
);

52  
LIST_SUCCESS
;

53 
	}
}

55 
	$li°_add_èû
(
li°_t
 * 
hód
,Üi°_à* 
À
)

58 i‡(!
hód
 || !
À
)

59  
LIST_NULL
;

61 
	`li°ñm_add
(
À
, 
hód
->
¥ev
, head);

63  
LIST_SUCCESS
;

64 
	}
}

66 
	$li°_dëach
(
li°_t
 * 
À
)

68 i‡(!
À
)

69  
LIST_NULL
;

71 
	`li°ñm_dëach
(
À
->
¥ev
,Üe->
√xt
);

73 
À
->
√xt
 =Üe->
¥ev
 = 
NULL
;

75  
LIST_SUCCESS
;

76 
	}
}

	@list.h

22 #i‚de‡
_LIST_H


23 
	#_LIST_H


	)

26 
	sli°_t
 {

27 
li°_t
 *
	m¥ev
, *
	m√xt
;

28 } 
	tli°_t
;

30 
	#LIST_NULL
 -1

	)

31 
	#LIST_SUCCESS
 1

	)

33 
	#LIST
(
«me
Ë
li°_t
Çamê{ &“ame), &“ameË}

	)

35 
	#INIT_LIST_HEAD
(
h
) do { \

36 (
h
)->
√xt
 = (h); (h)->
¥ev
 = (h); \

37 } 0)

	)

39 
	#INIT_LIST_ELM
(
À
) do { \

40 (
À
)->
√xt
 = 
NULL
; (À)->
¥ev
 = NULL; \

41 } 0)

	)

43 
li°_dëach
(
li°_t
 * 
À
);

44 
li°_add_èû
(
li°_t
 * 
hód
,Üi°_à* 
À
);

45 
li°_add
(
li°_t
 * 
hód
,Üi°_à* 
À
);

47 
	#li°_f‹óch
(
cuº
, 
hód
) \

48 
cuº
 = (
hód
)->
√xt
; cuº !(hód); cuº = cuº->√xt)

	)

50 
	#li°_f‹óch_ß„
(
pos
, 
tmp
, 
hód
) \

51 
pos
 = (
hód
)->
√xt
, 
tmp
 =Öos->next;Öos != (head); \

52 
pos
 = 
tmp
,Åm∞pos->
√xt
)

	)

54 
	#li°_em±y
(
hód
Ë((hódË=(hód)->
√xt
)

	)

56 
	#li°_fú°
(
hód
Ë((hód)->
√xt
)

	)

58 
	#li°_u«âached
(
À
Ë(÷e)->
√xt
 =
NULL
 && (À)->
¥ev
 =NULL)

	)

	@llf.c

22 
	~"defs.h
"

23 
	~"debug.h
"

25 
	~<sys/ty≥s.h
>

26 
	~<sys/io˘l.h
>

27 
	~<sys/uio.h
>

28 
	~<asm/ty≥s.h
>

29 
	~<˘y≥.h
>

30 
	~<time.h
>

31 
	~<sys/time.h
>

32 
	~<√t/ëhî√t.h
>

33 
	~<löux/√éök.h
>

34 
	~<löux/π√éök.h
>

35 
	~<löux/wúñess.h
>

36 
	~<iwlib.h
>

38 
	~"aodv_√ighb‹.h
"

39 
	~"routög_èbÀ.h
"

44 
	sπ∆_h™dÀ
 {

45 
	mfd
;

46 
sockaddr_∆
 
	mloˇl
;

47 
sockaddr_∆
 
	m≥î
;

48 
u_öt32_t
 
	m£q
;

49 
u_öt32_t
 
	mdump
;

52 
ölöe
 
Œf_π∆_›í
(
π∆_h™dÀ
 *
πh
,

53 
subs¸ùti⁄s
);

54 
ölöe
 
Œf_h™dÀ_√éök_evíts
(
π∆_h™dÀ
 *
πh
);

56 
π∆_h™dÀ
 
	gπh
;

58 
	$Œf_ˇŒback
(
fd
)

61 
	`Œf_h™dÀ_√éök_evíts
(&
πh
);

62 
	}
}

64 
	$Œf_öô
()

67 i‡(
	`Œf_π∆_›í
(&
πh
, 
RTMGRP_LINK
) < 0) {

68 
	`DEBUG
(
LOG_ERR
, 0, "Can't initializeÑtnetlink socket");

71 i‡(
	`©èch_ˇŒback_func
(
πh
.
fd
, 
Œf_ˇŒback
) < 0) {

72 
	`Æog
(
LOG_ERR
, 0, 
__FUNCTION__
, "CouldÇotáttach callback");

75 
	}
}

78 
	$Œf_˛ónup
()

80 
	`˛o£
(
πh
.
fd
);

81 
	}
}

85 
ölöe
 
	$Œf_π∆_›í
(
π∆_h™dÀ
 *
πh
, 
subs¸ùti⁄s
)

87 
addr_Àn
;

89 
	`mem£t
(
πh
, 0, (rth));

91 
πh
->
fd
 = 
	`sockë
(
PF_NETLINK
, 
SOCK_RAW
, 
NETLINK_ROUTE
);

92 i‡(
πh
->
fd
 < 0) {

93 
	`≥º‹
("Cannot openÇetlink socket");

97 
	`mem£t
(&
πh
->
loˇl
, 0, (rth->local));

98 
πh
->
loˇl
.
∆_Ámûy
 = 
AF_NETLINK
;

99 
πh
->
loˇl
.
∆_groups
 = 
subs¸ùti⁄s
;

101 i‡(
	`böd
(
πh
->
fd
, (
sockaddr
 *Ë&πh->
loˇl
, (rth->local)) < 0) {

102 
	`≥º‹
("Cannot bindÇetlink socket");

105 
addr_Àn
 = (
πh
->
loˇl
);

106 i‡(
	`gësock«me
(
πh
->
fd
, (
sockaddr
 *Ë&πh->
loˇl
, &
addr_Àn
) < 0) {

107 
	`≥º‹
("Cannot getsockname");

110 i‡(
addr_Àn
 !(
πh
->
loˇl
)) {

111 
	`Ârötf
(
°dîr
, "Wr⁄gáddªs†Àngth %d\n", 
addr_Àn
);

114 i‡(
πh
->
loˇl
.
∆_Ámûy
 !
AF_NETLINK
) {

115 
	`Ârötf
(
°dîr
, "Wr⁄gáddªs†Ámûy %d\n", 
πh
->
loˇl
.
∆_Ámûy
);

118 
πh
->
£q
 = 
	`time
(
NULL
);

120 
	}
}

127 
	swúñess_iÁ˚
 {

129 
wúñess_iÁ˚
 *
	m√xt
;

132 
	mifödex
;

135 
	mi‚ame
[
IFNAMSIZ
 + 1];

136 
iw_ønge
 
	mønge
;

137 
	mhas_ønge
;

138 } 
	twúñess_iÁ˚
;

143 
wúñess_iÁ˚
 *
	göãrÁ˚_ˇche
 = 
NULL
;

148 
ölöe
 
	$ödex2«me
(
skfd
, 
ifödex
, *
«me
)

150 
i‰eq
 
úq
;

151 
ªt
 = 0;

153 
	`mem£t
(
«me
, 0, 
IFNAMSIZ
 + 1);

156 
úq
.
i‰_ifödex
 = 
ifödex
;

157 i‡(
	`io˘l
(
skfd
, 
SIOCGIFNAME
, &
úq
) < 0)

158 
ªt
 = -1;

160 
	`°∫˝y
(
«me
, 
úq
.
i‰_«me
, 
IFNAMSIZ
);

162  (
ªt
);

163 
	}
}

165 
wúñess_iÁ˚
 *
	$iw_gë_öãrÁ˚_d©a
(
ifödex
)

167 
wúñess_iÁ˚
 *
cuº
;

168 
skfd
 = -1;

171 
cuº
 = 
öãrÁ˚_ˇche
;

172 
cuº
 !
NULL
) {

174 i‡(
cuº
->
ifödex
 == ifindex) {

178  (
cuº
);

181 
cuº
 = cuº->
√xt
;

186 i‡((
skfd
 = 
	`iw_sockës_›í
()) < 0) {

187 
	`≥º‹
("iw_sockets_open");

188  (
NULL
);

192 
cuº
 = 
	`ˇŒoc
(1, (
wúñess_iÁ˚
));

193 i‡(!
cuº
) {

194 
	`Ârötf
(
°dîr
, "Malloc failed\n");

195  (
NULL
);

197 
cuº
->
ifödex
 = ifindex;

200 i‡(
	`ödex2«me
(
skfd
, 
ifödex
, 
cuº
->
i‚ame
) < 0) {

201 
	`≥º‹
("index2name");

202 
	`‰ì
(
cuº
);

203  (
NULL
);

205 
cuº
->
has_ønge
 =

206 (
	`iw_gë_ønge_öfo
(
skfd
, 
cuº
->
i‚ame
, &cuº->
ønge
) >= 0);

210 
	`iw_sockës_˛o£
(
skfd
);

213 
cuº
->
√xt
 = 
öãrÁ˚_ˇche
;

214 
öãrÁ˚_ˇche
 = 
cuº
;

216  (
cuº
);

217 
	}
}

220 
	$mac_to_ù
(
sockaddr
 *
hwaddr
, 
ö_addr
 *
ù_addr
, *
i‚ame
)

222 
FILE
 *
Â
;

223 
ù
[100];

224 
hwa
[100];

225 
mask
[100];

226 
löe
[200];

227 
dev
[100];

228 
ty≥
, 
Êags
, 
num
;

229 
ëhî_addr
 
ëh
;

231 i‡((
Â
 = 
	`f›í
("/¥oc/√t/¨p", "r")Ë=
NULL
) {

232 
	`≥º‹
("/proc/net/arp");

236 i‡(
	`fgës
(
löe
, ÷öe), 
Â
Ë!(*Ë
NULL
) {

237 
	`°r˝y
(
mask
, "-");

238 
	`°r˝y
(
dev
, "-");

240 ; 
	`fgës
(
löe
, ÷öe), 
Â
);) {

241 
num
 = 
	`ssˇnf
(
löe
, "%s 0x%x 0x%x %100s %100s %100s\n",

242 
ù
, &
ty≥
, &
Êags
, 
hwa
, 
mask
, 
dev
);

243 i‡(
num
 < 4)

246 
	`iw_ëhî_©⁄
(
hwa
, &
ëh
);

248 i‡(
	`memcmp
(&
ëh
, 
hwaddr
->
ß_d©a
, 
ETH_ALEN
) == 0) {

250 
	`öë_©⁄
(
ù
, 
ù_addr
);

252 
	`f˛o£
(
Â
);

257 
	`f˛o£
(
Â
);

259 
	}
}

261 
ölöe
 
	$Œf_¥öt_evít
(
iw_evít
 *
evít
,

262 
iw_ønge
 *
iwønge
, 
has_iwønge
)

264 
buf„r
[128];

265 
ö_addr
 
ù
;

266 
π_èbÀ_t
 *
π
;

269 
evít
->
cmd
) {

271 
IWEVTXDROP
:

272 
	`DEBUG
(
LOG_DEBUG
, 0, "TxÖacket dropped:%s",

273 
	`iw_¥_ëhî
(
buf„r
, 
evít
->
u
.
addr
.
ß_d©a
));

276 i‡(
	`mac_to_ù
(&
evít
->
u
.
addr
, &
ù
, 
this_ho°
.
devs
[0].
i‚ame
) != 0) {

277 
	`DEBUG
(
LOG_DEBUG
, 0, "failed mac_to_ip");

282 
π
 = 
	`π_èbÀ_föd
(
ù
);

284 i‡(
π
)

285 
	`√ighb‹_lök_bªak
(
π
);

287 
	`DEBUG
(
LOG_DEBUG
, 0, "nÿrouã f‹ ip=%s", 
	`ù_to_°r
(
ù
));

291 
	`DEBUG
(
LOG_DEBUG
, 0, "(Unknow¿Wúñes†evíà0x%04X)", 
evít
->
cmd
);

295 
	}
}

297 
ölöe
 
	$Œf_h™dÀ_√éök_evíts
(
π∆_h™dÀ
 *
πh
)

300 
sockaddr_∆
 
ß∆
;

301 
sockÀn_t
 
ß∆Àn
;

302 
∆msghdr
 *
h
;

303 
iföfomsg
 *
ifi
;

304 
amt
;

305 
buf
[8192];

307 
amt
 =

308 
	`ªcv‰om
(
πh
->
fd
, 
buf
, (buf), 
MSG_DONTWAIT
,

309 (
sockaddr
 *Ë&
ß∆
, &
ß∆Àn
);

310 i‡(
amt
 < 0) {

311 i‡(
î∫o
 !
EINTR
 &&Éºnÿ!
EAGAIN
) {

312 
	`Ârötf
(
°dîr
, "%s:ÉrrorÑeadingÇetlink: %s.\n",

313 
__PRETTY_FUNCTION__
, 
	`°ªº‹
(
î∫o
));

318 i‡(
amt
 == 0) {

319 
	`Ârötf
(
°dîr
, "%s: EOF o¿√éök??\n", 
__PRETTY_FUNCTION__
);

323 
h
 = (
∆msghdr
 *Ë
buf
;

324 
amt
 >(Ë(*
h
)) {

325 
Àn
 = 
h
->
∆msg_Àn
;

326 
l
 = 
Àn
 - (*
h
);

328 i‡(
l
 < 0 || 
Àn
 > 
amt
) {

329 
	`Ârötf
(
°dîr
, "%s: malformedÇetlink message:Üen=%d\n",

330 
__PRETTY_FUNCTION__
, 
Àn
);

334 
h
->
∆msg_ty≥
) {

335 
RTM_NEWLINK
:

337 i‡(
h
->
∆msg_ty≥
 !
RTM_NEWLINK
)

340 
ifi
 = 
	`NLMSG_DATA
(
h
);

343 i‡(
h
->
∆msg_Àn
 > 
	`NLMSG_ALIGN
((
iföfomsg
))) {

344 
©åÀn
 =

345 
h
->
∆msg_Àn
 - 
	`NLMSG_ALIGN
((
iföfomsg
));

346 
π©å
 *
©å
 =

347 (*Ë
ifi
 + 
	`NLMSG_ALIGN
((
iföfomsg
));

349 
	`RTA_OK
(
©å
, 
©åÀn
)) {

351 i‡(
©å
->
πa_ty≥
 =
IFLA_WIRELESS
) {

352 
iw_evít
 
iwe
;

353 
°ªam_des¸
 
°ªam
;

354 
ªt
;

355 #i‡
WE_VERSION
 >= 17

357 
wúñess_iÁ˚
 *
wúñess_d©a
;

360 
wúñess_d©a
 =

361 
	`iw_gë_öãrÁ˚_d©a
(
ifi
->
ifi_ödex
);

363 i‡(
wúñess_d©a
 =
NULL
)

369 
	`iw_öô_evít_°ªam
(&
°ªam
,

370 (*Ë
©å
 +

371 
	`RTA_ALIGN
(

372 (
π©å
)),

373 
©å
->
πa_Àn
 -

374 
	`RTA_ALIGN
(

375 (
π©å
)));

378 #i‡
WE_VERSION
 >= 17

379 
ªt
 =

380 
	`iw_exåa˘_evít_°ªam
(&
°ªam
, &
iwe
,

381 
wúñess_d©a
->

382 
ønge
.

383 
we_vîsi⁄_compûed
);

385 
ªt
 = 
	`iw_exåa˘_evít_°ªam
(&
°ªam
, &
iwe
);

387 i‡(
ªt
 != 0) {

388 i‡(
ªt
 > 0)

389 
	`Œf_¥öt_evít
(&
iwe
, 
NULL
, 0);

391 
	`DEBUG
(
LOG_WARNING
, 0,

394 } 
ªt
 > 0);

397 
©å
 = 
	`RTA_NEXT
◊âr, 
©åÀn
);

404 
	`Ârötf
(
°dîr
, "%s: gotÇlmsg ofÅype %#x.\n",

405 
__PRETTY_FUNCTION__
, 
h
->
∆msg_ty≥
);

410 
Àn
 = 
	`NLMSG_ALIGN
(len);

411 
amt
 -
Àn
;

412 
h
 = (
∆msghdr
 *Ë((*Ëh + 
Àn
);

415 i‡(
amt
 > 0)

416 
	`Ârötf
(
°dîr
, "%s:Ñemnant of size %d onÇetlink\n",

417 
__PRETTY_FUNCTION__
, 
amt
);

419 
	}
}

	@llf.h

22 #i‚de‡
_LLF_H


23 
	#_LLF_H


	)

25 
Œf_öô
();

26 
Œf_˛ónup
();

	@lnx/Makefile

1 #i‚eq (,
$
(
föd°rög
 2.6,$(
KERNELRELEASE
)))

2 #EXTRA_CFLAGS +-
D
 
KERNEL26
 
$
(
XDEFS
)

3 #obj-
m
 +
kaodv
.
o


4 #kaodv-
objs
 :
kaodv
-
mod
.
o
 kaodv-
debug
.ÿkaodv-
√éök
.ÿkaodv-
queue
.ÿkaodv-
ùíc
.ÿkaodv-
ex∂
.o

5 
i‚eq
 (,
	$$
(
KERNELRELEASE
))

6 
EXTRA_CFLAGS
 +-
D
 
KERNEL26
 
	$$
(
XDEFS
)

7 
obj
-
m
 +
kaodv
.
o


8 
kaodv
-
objs
 :kaodv-
mod
.
o
 kaodv-
debug
.ÿkaodv-
√éök
.ÿkaodv-
queue
.ÿkaodv-
ùíc
.ÿkaodv-
ex∂
.o

11 
KOBJS
 :
kaodv
-
mod
.
o
 kaodv-
debug
.ÿkaodv-
√éök
.ÿkaodv-
queue
.ÿkaodv-
ùíc
.ÿkaodv-
ex∂
.o

12 
KOBJS_ARM
 :
	`$
(
KOBJS
:%.
o
=%-
¨m
.o)

13 
KOBJS_MIPS
 :
	`$
(
KOBJS
:%.
o
=%-
mùs
.o)

15 
KERNEL
=
	`$
(
shñl
 
u«me
 -
r
)

16 
KERNEL_DIR
=/
lib
/
moduÀs
/
	`$
(
KERNEL
)/
buûd


17 
KERNEL_INC
=
	`$
(
KERNEL_DIR
)/
ö˛ude


18 
THIS_DIR
=
	$$
(
shñl
 
pwd
)

20 #You 
might
 
w™t
 
to
 
u£
 
gcc32
 
the
 
kî√l
 
moduÀ
 
⁄
 
Fed‹a
 
c‹e
 1

21 
KCC
=
gcc


22 
LD
=
ld


23 
XDEFS
=

25 #Somê
shñl
 
s¸ùtög
 
to
 
föd
 
out
 
Löux
 
kî√l
 
vîsi⁄


26 
VERSION
=
	`$
(
shñl
 [ ! -
d
 $(
KERNEL_DIR
Ë]; 
thí
 
echo
 "Nÿlöux sour˚ found!!! Check you∏£tup..."; 
exô
; 
fi
; 
gªp
 ^VERSION $(KERNEL_DIR)/
Makefûe
 | 
cut
 -d' ' -
f
 3)

27 
PATCHLEVEL
=
	`$
(
shñl
 
gªp
 ^PATCHLEVEL $(
KERNEL_DIR
)/
Makefûe
 | 
cut
 -
d
' ' -
f
 3)

28 
SUBLEVEL
=
	`$
(
shñl
 
gªp
 ^SUBLEVEL $(
KERNEL_DIR
)/
Makefûe
 | 
cut
 -
d
' ' -
f
 3)

30 #The£ 
¨e
 
the
 
›ti⁄s
 thê
kî√l
 
moduÀ
 
wôh
 kernel 2.4.x:

32 
KINC
=-
no°döc
 -
DMODVERSIONS
 -
ö˛ude
 
	`$
(
KERNEL_INC
)/
löux
/
modvîsi⁄s
.
h
 $(
shñl
 $(
CC
Ë-
¥öt
-
£¨ch
-
dús
 | 
£d
 -
√
 's/ö°Æl: \(.*\)/-I \1ö˛ude/gp'Ë-
	$I$
(
KERNEL_INC
)

33 
KDEFS
=-
D__KERNEL__
 -
DMODULE


34 
KCFLAGS
=-
WÆl
 -
Wno
-
°ri˘
-
Æüsög
 -
O2
 
	`$
(
KDEFS
Ë$(
KINC
Ë
	$$
(
XDEFS
)

35 
KCFLAGS_ARM
=-
WÆl
 -
O2
 -
D__KERNEL__
 -
DMODULE
 -
no°döc
 
	`$
(
shñl
 $(
ARM_CC
Ë-
¥öt
-
£¨ch
-
dús
 | 
£d
 -
√
 's/ö°Æl: \(.*\)/-I \1ö˛ude/gp'Ë-
	$I$
(
KERNEL_INC
)

36 
KCFLAGS_MIPS
=-
WÆl
 -
mùs2
 -
O2
 -
‚o
-
pic
 -
mno
-
abiˇŒs
 -
ml⁄g
-
ˇŒs
 -
G0
 -
mso·
--
D__KERNEL__
 -
DMODULE
 -
no°döc
 
	`$
(
shñl
 $(
MIPS_CC
Ë-
¥öt
-
£¨ch
-
dús
 | 
£d
 -
√
 's/ö°Æl: \(.*\)/-I \1ö˛ude/gp'Ë-
	`I$
(
KERNEL_INC
Ë$(
XDEFS
)

38 .
PHONY
: 
˛ón
 cÀ™-2.4 cÀ™-2.6 
ödít
 

40 #Check 
kî√l
 
vîsi⁄


41 #i„q (
	`$
(
PATCHLEVEL
),6)

42 #i‡
kî√l
 3.5.0

43 #i„q (
	`$
(
PATCHLEVEL
),5)

44 #i‡
kî√l
 3.12.17

46 #i„q (
	`$
(
PATCHLEVEL
),4)

47 #Assumê
kî√l
 2.4

48 #deÁu…: 
kaodv
.
o


49 #˛ón: 
˛ón
-2.4

51 #deÁu…: 
kaodv
.
ko


52 #˛ón: 
˛ón
-2.6

55 
	`i‚eq
 ( ,
	`$
(
föd°rög
 $(
PATCHLEVEL
),6
_12
))

56 : 
kaodv
.
ko


57 
˛ón
: clean-2.6

59 #Assumê
kî√l
 2.4

60 : 
kaodv
.
o


61 
˛ón
: clean-2.4

62 
ídif


64 #deÁu…: 
kaodv
.
ko


65 
	$$
(
KOBJS
): %.
o
: %.
c
 
Makefûe


66 
	`$
(
KCC
Ë$(
KCFLAGS
Ë-
c
 -
o
 
$
@ $<

68 
	$$
(
KOBJS_ARM
): %-
¨m
.
o
: %.
c
 
Makefûe


69 
	`$
(
KCC
Ë$(
KCFLAGS_ARM
Ë-
D
 
ARM
 -
c
 -
o
 
$
@ $<

71 
	$$
(
KOBJS_MIPS
): %-
mùs
.
o
: %.
c
 
Makefûe


72 
	`$
(
KCC
Ë$(
KCFLAGS_MIPS
Ë-
D
 
MIPS
 -
c
 -
o
 
$
@ $<

74 
kaodv
.
o
: 
	$$
(
KOBJS
Ë
Makefûe


75 
	`$
(
LD
Ë-
r
 $(
KOBJS
Ë-
o
 
$
@

76 
˝
 
$
@ ../

78 
kaodv
-
¨m
.
o
: 
	$$
(
KOBJS_ARM
Ë
Makefûe


79 
	`$
(
LD
Ë-
r
 $(
KOBJS_ARM
Ë-
o
 
$
@

80 
˝
 
$
@ ../
kaodv
.
o


82 
kaodv
-
mùs
.
o
: 
	$$
(
KOBJS_MIPS
Ë
Makefûe


83 
	`$
(
LD
Ë-
r
 $(
KOBJS_MIPS
Ë-
o
 
$
@

84 
˝
 
$
@ ../
kaodv
.
o


86 
kaodv
.
ko
: 
	`$
(
KOBJS
:%.
o
=%.
c
Ë
Makefûe


87 
	`$
(
MAKE
Ë-
C
 
	$$
(
KERNEL_DIR
Ë
SUBDIRS
=
	$$
(
THIS_DIR
Ë
moduÀs


88 
˝
 
$
@ ../

90 
kaodv
-
¨m
.
ko
: 
	`$
(
KOBJS_ARM
:%.
o
=%.
c
Ë
Makefûe


91 
	`$
(
MAKE
Ë-
C
 
	$$
(
KERNEL_DIR
Ë
SUBDIRS
=
	$$
(
THIS_DIR
Ë
moduÀs


92 
˝
 
$
@ ../
kaodv
.
ko


94 
kaodv
-
mùs
.
ko
: 
	`$
(
KOBJS_MIPS
:%.
o
=%.
c
Ë
Makefûe


95 
	`$
(
MAKE
Ë-
C
 
	$$
(
KERNEL_DIR
Ë
SUBDIRS
=
	$$
(
THIS_DIR
Ë
moduÀs


96 
˝
 
$
@ ../
kaodv
.
ko


98 
˛ón
-2.6:

99 
	`$
(
MAKE
Ë-
C
 
	$$
(
KERNEL_DIR
Ë
SUBDIRS
=
	$$
(
THIS_DIR
Ë
˛ón


100 
rm
 -
rf
 *.
o
 *~

102 
˛ón
-2.4:

103 
rm
 -
rf
 *.
o
 *~

105 
TAGS
:

106 
ëags
 *.
c
 *.
h


107 
ödít
:

108 
ödít
 -
kr
 -
i8
 -
ts8
 -
sob
 -
l80
 -
ss
 -
ncs
 *.
c
 *.
h


109 
ídif


	@lnx/kaodv-debug.c

22 
	~<asm/uac˚ss.h
>

23 
	~<asm/io.h
>

25 
	~"kaodv-debug.h
"

26 
	~"kaodv-√éök.h
"

28 
	$åa˚
(c⁄° *
fmt
, ...)

30 
buf
[512];

31 
va_li°
 
¨gs
;

32 
Àn
;

34 
	`va_°¨t
(
¨gs
, 
fmt
);

36 
Àn
 = 
	`v¢¥ötf
(
buf
, 512, 
fmt
, 
¨gs
);

38 
	`va_íd
(
¨gs
);

41 
	`kaodv_√éök_£nd_debug_msg
(
buf
, 
Àn
 + 1);

44 
	}
}

	@lnx/kaodv-debug.h

22 #i‚de‡
_KAODV_DEBUG_H


23 
	#_KAODV_DEBUG_H


	)

25 
	~<löux/ö.h
>

27 #ifde‡
DEBUG


29 
	#KAODV_DEBUG
(
fmt
, ...Ë
	`åa˚
(fmt, ##
__VA_ARGS__
)

	)

31 
	#KAODV_DEBUG
(
fmt
, ...)

	)

35 
ölöe
 *
	$¥öt_ù
(
__u32
 
addr
)

37 
buf
[16 * 4];

38 
ödex
 = 0;

39 *
°r
;

41 
	`•rötf
(&
buf
[
ödex
], "%d.%d.%d.%d",

42 0x0f‡& 
addr
,

43 0x0f‡& (
addr
 >> 8),

44 0x0f‡& (
addr
 >> 16), 0x0ff & (addr >> 24));

46 
°r
 = &
buf
[
ödex
];

47 
ödex
 += 16;

48 
ödex
 %= 64;

50  
°r
;

51 
	}
}

53 
ölöe
 *
	$¥öt_ëh
(*
addr
)

55 
buf
[30];

57 
	`•rötf
(
buf
, "%02x:%02x:%02x:%02x:%02x:%02x",

58 ()
addr
[0], ()addr[1],

59 ()
addr
[2], ()addr[3],

60 ()
addr
[4], ()addr[5]);

62  
buf
;

63 
	}
}

65 
åa˚
(c⁄° *
fmt
, ...);

	@lnx/kaodv-expl.c

24 
	~<löux/vîsi⁄.h
>

25 
	~<löux/moduÀ.h
>

26 
	~<löux/skbuff.h
>

27 
	~<löux/√tdevi˚.h
>

28 
	~<löux/•ölock.h
>

29 
	~<löux/timî.h
>

30 
	~<löux/¥oc_fs.h
>

32 
	~"kaodv-ex∂.h
"

33 
	~"kaodv-√éök.h
"

34 
	~"kaodv-queue.h
"

35 
	~"kaodv-debug.h
"

37 
	#EXPL_MAX_LEN
 1024

	)

39 
	gex∂_Àn
;

40 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,39))

41 
rwlock_t
 
	gex∂_lock
 = 
RW_LOCK_UNLOCKED
;

43 
rwlock_t
 
	gex∂_lock
 = 
__RW_LOCK_UNLOCKED
(
ex∂_lock
);

45 
LIST_HEAD
(
ex∂_hód
);

47 
	#li°_is_fú°
(
e
Ë(&e->
l
 =
ex∂_hód
.
√xt
)

	)

53 #ifde‡
EXPL_TIMER


54 
timî_li°
 
	gex∂_timî
;

56 
kaodv_ex∂_timeout
(
d©a
);

58 
ölöe
 
	$__kaodv_ex∂_£t_√xt_timeout
()

60 
ex∂_íåy
 *
√
;

62 i‡(
	`li°_em±y
(&
ex∂_hód
))

66 
√
 = (
ex∂_íåy
 *)
ex∂_hód
.
√xt
;

68 i‡(
	`timî_≥ndög
(&
ex∂_timî
)) {

69 
	`mod_timî
(&
ex∂_timî
, 
√
->
expúes
);

71 
ex∂_timî
.
fun˘i⁄
 = 
kaodv_ex∂_timeout
;

72 
ex∂_timî
.
expúes
 = 
√
->expires;

73 
ex∂_timî
.
d©a
 = 0;

74 
	`add_timî
(&
ex∂_timî
);

76 
	}
}

78 
	$kaodv_ex∂_timeout
(
d©a
)

80 
li°_hód
 *
pos
, *
tmp
;

81 
time
 = 
jiffõs
;

83 
	`wrôe_lock_bh
(&
ex∂_lock
);

85 
	`li°_f‹_óch_ß„
(
pos
, 
tmp
, &
ex∂_hód
) {

86 
ex∂_íåy
 *
e
 = (ex∂_íåy *)
pos
;

88 i‡(
e
->
expúes
 > 
time
)

91 
	`li°_dñ
(&
e
->
l
);

92 
ex∂_Àn
--;

95 
	`kaodv_queue_£t_vîdi˘
(
KAODV_QUEUE_DROP
, 
e
->
daddr
);

98 
	`kaodv_√éök_£nd_π_msg
(
KAODVM_TIMEOUT
, 
e
->
daddr
);

100 
	`__kaodv_ex∂_£t_√xt_timeout
();

101 
	`wrôe_u∆ock_bh
(&
ex∂_lock
);

102 
	}
}

105 
ölöe
 
	$__kaodv_ex∂_Êush
()

107 
li°_hód
 *
pos
, *
tmp
;

109 
	`li°_f‹_óch_ß„
(
pos
, 
tmp
, &
ex∂_hód
) {

110 
ex∂_íåy
 *
e
 = (ex∂_íåy *)
pos
;

111 
	`li°_dñ
(&
e
->
l
);

112 
ex∂_Àn
--;

113 
	`k‰ì
(
e
);

115 
	}
}

117 
ölöe
 
	$__kaodv_ex∂_add
(
ex∂_íåy
 *
e
)

120 i‡(
ex∂_Àn
 >
EXPL_MAX_LEN
) {

121 
	`¥ötk
(
KERN_WARNING
 "kaodv_expl: MaxÜistÜenÑeached\n");

122  -
ENOSPC
;

125 i‡(
	`li°_em±y
(&
ex∂_hód
)) {

126 
	`li°_add
(&
e
->
l
, &
ex∂_hód
);

128 
li°_hód
 *
pos
;

130 
	`li°_f‹_óch
(
pos
, &
ex∂_hód
) {

131 
ex∂_íåy
 *
cuº
 = (ex∂_íåy *)
pos
;

133 i‡(
cuº
->
expúes
 > 
e
->expires)

136 
	`li°_add
(&
e
->
l
, 
pos
->
¥ev
);

139 
	}
}

141 
ölöe
 
ex∂_íåy
 *
	$__kaodv_ex∂_föd
(
__u32
 
daddr
)

143 
li°_hód
 *
pos
;

145 
	`li°_f‹_óch
(
pos
, &
ex∂_hód
) {

146 
ex∂_íåy
 *
e
 = (ex∂_íåy *)
pos
;

148 i‡(
e
->
daddr
 == daddr)

149  
e
;

151  
NULL
;

152 
	}
}

154 
ölöe
 
	$__kaodv_ex∂_dñ
(
ex∂_íåy
 *
e
)

156 i‡(
e
 =
NULL
)

159 i‡(
	`li°_is_fú°
(
e
)) {

161 
	`li°_dñ
(&
e
->
l
);

162 #ifde‡
EXPL_TIMER


163 i‡(!
	`li°_em±y
(&
ex∂_hód
)) {

165 
ex∂_íåy
 *
f
 =

166 (
ex∂_íåy
 *)
ex∂_hód
.
√xt
;

169 
	`mod_timî
(&
ex∂_timî
, 
f
->
expúes
);

173 
	`li°_dñ
(&
e
->
l
);

175 
ex∂_Àn
--;

178 
	}
}

180 
	$kaodv_ex∂_dñ
(
__u32
 
daddr
)

182 
ªs
;

183 
ex∂_íåy
 *
e
;

185 
	`wrôe_lock_bh
(&
ex∂_lock
);

187 
e
 = 
	`__kaodv_ex∂_föd
(
daddr
);

189 i‡(
e
 =
NULL
) {

190 
ªs
 = 0;

191 
u∆ock
;

194 
ªs
 = 
	`__kaodv_ex∂_dñ
(
e
);

196 i‡(
ªs
) {

197 
	`k‰ì
(
e
);

199 
u∆ock
:

200 
	`wrôe_u∆ock_bh
(&
ex∂_lock
);

202  
ªs
;

203 
	}
}

205 
	$kaodv_ex∂_gë
(
__u32
 
daddr
, 
ex∂_íåy
 *
e_ö
)

207 
ex∂_íåy
 *
e
;

208 
ªs
 = 0;

211 
	`ªad_lock_bh
(&
ex∂_lock
);

212 
e
 = 
	`__kaodv_ex∂_föd
(
daddr
);

214 i‡(
e
) {

215 
ªs
 = 1;

216 i‡(
e_ö
)

217 
	`mem˝y
(
e_ö
, 
e
, (
ex∂_íåy
));

220 
	`ªad_u∆ock_bh
(&
ex∂_lock
);

221  
ªs
;

222 
	}
}

224 
	$kaodv_ex∂_add
(
__u32
 
daddr
, __u32 
nh›
, 
time
,

225 
Êags
, 
ifödex
)

227 
ex∂_íåy
 *
e
;

228 
°©us
 = 0;

230 i‡(
	`kaodv_ex∂_gë
(
daddr
, 
NULL
))

233 
e
 = 
	`kmÆloc
((
ex∂_íåy
), 
GFP_ATOMIC
);

235 i‡(
e
 =
NULL
) {

236 
	`¥ötk
(
KERN_ERR
 "expl: OOM inÉxpl_add\n");

237  -
ENOMEM
;

240 
e
->
daddr
 = daddr;

241 
e
->
nh›
 =Çhop;

242 
e
->
Êags
 = flags;

243 
e
->
ifödex
 = ifindex;

244 
e
->
expúes
 = 
jiffõs
 + (
time
 * 
HZ
) / 1000;

246 
	`wrôe_lock_bh
(&
ex∂_lock
);

248 
°©us
 = 
	`__kaodv_ex∂_add
(
e
);

250 i‡(
°©us
)

251 
ex∂_Àn
++;

253 #ifde‡
EXPL_TIMER


255 i‡(
°©us
 && 
	`li°_is_fú°
(
e
)) {

257 i‡(
	`timî_≥ndög
(&
ex∂_timî
))

258 
	`mod_timî
(&
ex∂_timî
, 
e
->
expúes
);

260 
ex∂_timî
.
fun˘i⁄
 = 
ex∂_timeout
;

261 
ex∂_timî
.
expúes
 = 
e
->expires;

262 
ex∂_timî
.
d©a
 = 0;

263 
	`add_timî
(&
ex∂_timî
);

267 
	`wrôe_u∆ock_bh
(&
ex∂_lock
);

269 i‡(
°©us
 < 0)

270 
	`k‰ì
(
e
);

272  
°©us
;

273 
	}
}

275 
	$kaodv_ex∂_¥öt
(*
buf
)

277 
li°_hód
 *
pos
;

278 
Àn
 = 0;

280 
	`ªad_lock_bh
(&
ex∂_lock
);

282 
Àn
 +
	`•rötf
(
buf
, "# TŸÆÉ¡rõs: %u\n", 
ex∂_Àn
);

283 
Àn
 +
	`•rötf
(
buf
 +Üen, "# %-15s %-15s %-5s %-5s Expires\n",

286 
	`li°_f‹_óch
(
pos
, &
ex∂_hód
) {

287 
addr
[16], 
nh›
[16], 
Êags
[4];

288 
√t_devi˚
 *
dev
;

289 
num_Êags
 = 0;

290 
ex∂_íåy
 *
e
 = (ex∂_íåy *)
pos
;

292 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,24))

293 
dev
 = 
	`dev_gë_by_ödex
(
e
->
ifödex
);

295 
dev
 = 
	`dev_gë_by_ödex
(&
öô_√t
, 
e
->
ifödex
);

298 i‡(!
dev
)

301 
	`•rötf
(
addr
, "%d.%d.%d.%d",

302 0x0f‡& 
e
->
daddr
,

303 0x0f‡& (
e
->
daddr
 >> 8),

304 0x0f‡& (
e
->
daddr
 >> 16), 0x0ff & (e->daddr >> 24));

306 
	`•rötf
(
nh›
, "%d.%d.%d.%d",

307 0x0f‡& 
e
->
nh›
,

308 0x0f‡& (
e
->
nh›
 >> 8),

309 0x0f‡& (
e
->
nh›
 >> 16), 0x0ff & (e->nhop >> 24));

311 i‡(
e
->
Êags
 & 
KAODV_RT_GW_ENCAP
)

312 
Êags
[
num_Êags
++] = 'E';

314 i‡(
e
->
Êags
 & 
KAODV_RT_REPAIR
)

315 
Êags
[
num_Êags
++] = 'R';

317 
Êags
[
num_Êags
] = '\0';

319 
Àn
 +
	`•rötf
(
buf
 +Üen, " %-15s %-15s %-5s %-5s %lu\n",

320 
addr
, 
nh›
, 
Êags
, 
dev
->
«me
,

321 (
e
->
expúes
 - 
jiffõs
Ë* 1000 / 
HZ
);

323 
	`dev_put
(
dev
);

326 
	`ªad_u∆ock_bh
(&
ex∂_lock
);

327  
Àn
;

328 
	}
}

329 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,24))

331 
	$kaodv_ex∂_¥oc_öfo
(*
buf„r
, **
°¨t
, 
off_t
 
off£t
, 
Àngth
)

333 
Àn
;

335 
Àn
 = 
	`kaodv_ex∂_¥öt
(
buf„r
);

337 *
°¨t
 = 
buf„r
 + 
off£t
;

338 
Àn
 -
off£t
;

339 i‡(
Àn
 > 
Àngth
)

340 
Àn
 = 
Àngth
;

341 i‡(
Àn
 < 0)

342 
Àn
 = 0;

343  
Àn
;

344 
	}
}

346 
	$kaodv_ex∂_¥oc_öfo
(*
∑ge
, **
°¨t
, 
off_t
 
off
, 
cou¡
,

347 *
eof
, *
d©a
)

349 
Àn
;

351 
Àn
 = 
	`kaodv_ex∂_¥öt
(
∑ge
);

353 *
°¨t
 = 
∑ge
 + 
off
;

354 
Àn
 -
off
;

355 i‡(
Àn
 > 
cou¡
)

356 
Àn
 = 
cou¡
;

357 i‡(
Àn
 < 0)

358 
Àn
 = 0;

359  
Àn
;

360 
	}
}

363 
	$kaodv_ex∂_upd©e
(
__u32
 
daddr
, __u32 
nh›
, 
time
,

364 
Êags
, 
ifödex
)

366 
ªt
 = 0;

367 
ex∂_íåy
 *
e
;

369 
	`wrôe_lock_bh
(&
ex∂_lock
);

371 
e
 = 
	`__kaodv_ex∂_föd
(
daddr
);

373 i‡(
e
 =
NULL
) {

375 
ªt
 = -1;

376 
u∆ock
;

378 
e
->
nh›
 =Çhop;

379 
e
->
Êags
 = flags;

380 
e
->
ifödex
 = ifindex;

382 
e
->
expúes
 = 
jiffõs
 + (
time
 * 
HZ
) / 1000;

385 
	`li°_dñ
(&
e
->
l
);

387 
	`__kaodv_ex∂_add
(
e
);

388 #ifde‡
EXPL_TIMER


389 
	`__kaodv_ex∂_£t_√xt_timeout
();

392 
u∆ock
:

393 
	`wrôe_u∆ock_bh
(&
ex∂_lock
);

395  
ªt
;

396 
	}
}

398 
	$kaodv_ex∂_Êush
()

400 #ifde‡
EXPL_TIMER


401 i‡(
	`timî_≥ndög
(&
ex∂_timî
))

402 
	`dñ_timî
(&
ex∂_timî
);

405 
	`wrôe_lock_bh
(&
ex∂_lock
);

407 
	`__kaodv_ex∂_Êush
();

409 
	`wrôe_u∆ock_bh
(&
ex∂_lock
);

410 
	}
}

412 
	$kaodv_ex∂_öô
()

414 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,24))

415 
	`¥oc_√t_¸óã
("kaodv_ex∂", 0, 
kaodv_ex∂_¥oc_öfo
);

416 #ñi‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3,12,17))

417 
	`¸óã_¥oc_ªad_íåy
("kaodv_ex∂", 0, 
öô_√t
.
¥oc_√t
, 
kaodv_ex∂_¥oc_öfo
, 
NULL
);

419 
	`¥oc_¸óã_d©a
("kaodv_ex∂", 0, 
öô_√t
.
¥oc_√t
,(
fûe_›î©i⁄s
*Ë
kaodv_ex∂_¥oc_öfo
, 
NULL
);

422 
ex∂_Àn
 = 0;

423 #ifde‡
EXPL_TIMER


424 
	`öô_timî
(&
ex∂_timî
);

426 
	}
}

428 
	$kaodv_ex∂_föi
()

430 
	`kaodv_ex∂_Êush
();

431 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,24))

432 
	`¥oc_√t_ªmove
("kaodv_expl");

433 #ñi‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3,12,17))

434 
	`¥oc_√t_ªmove
(&
öô_√t
, "kaodv_expl");

436 
	`ªmove_¥oc_íåy
("kaodv_ex∂",
öô_√t
.
¥oc_√t
);

438 
	}
}

	@lnx/kaodv-expl.h

22 #i‚de‡
_KAODV_EXPL_H


23 
	#_KAODV_EXPL_H


	)

25 #ifde‡
__KERNEL__


27 
	~<löux/li°.h
>

29 
	sex∂_íåy
 {

30 
li°_hód
 
	ml
;

31 
	mexpúes
;

32 
	mÊags
;

33 
__u32
 
	mdaddr
;

34 
__u32
 
	mnh›
;

35 
	mifödex
;

38 
kaodv_ex∂_öô
();

39 
kaodv_ex∂_Êush
();

40 
kaodv_ex∂_gë
(
__u32
 
daddr
, 
ex∂_íåy
 *
e_ö
);

41 
kaodv_ex∂_add
(
__u32
 
daddr
, __u32 
nh›
, 
time
,

42 
Êags
, 
ifödex
);

43 
kaodv_ex∂_upd©e
(
__u32
 
daddr
, __u32 
nh›
, 
time
,

44 
Êags
, 
ifödex
);

46 
kaodv_ex∂_dñ
(
__u32
 
daddr
);

47 
kaodv_ex∂_föi
();

	@lnx/kaodv-ipenc.c

22 
	~<√t/ù.h
>

23 
	~<löux/skbuff.h
>

24 
	~<löux/vîsi⁄.h
>

26 
	~"kaodv-ùíc.h
"

27 
	~"kaodv-ex∂.h
"

28 
	~"kaodv.h
"

31 
u_öt16_t
 
	$ù_csum
(*
buf
, 
nsh‹ts
)

33 
u_öt32_t
 
sum
;

35 
sum
 = 0; 
nsh‹ts
 > 0;Çshorts--) {

36 
sum
 +*
buf
++;

39 
sum
 = (sum >> 16) + (sum & 0xffff);

40 
sum
 += (sum >> 16);

42  ~
sum
;

43 
	}
}

45 
sk_buff
 *
	$ù_pkt_íˇpsuœã
(
sk_buff
 *
skb
, 
__u32
 
de°
)

49 
mö_ùíc_hdr
 *
ùe
;

50 
sk_buff
 *
nskb
;

51 
ùhdr
 *
ùh
;

54 
nskb
 = 
	`skb_c›y_ex∑nd
(
skb
, 
	`skb_hódroom
(skb),

55 
	`skb_èûroom
(
skb
) +

56 (
mö_ùíc_hdr
),

57 
GFP_ATOMIC
);

59 i‡(
nskb
 =
NULL
) {

60 
	`¥ötk
("CouldÇotállocateÇew skb\n");

61 
	`k‰ì_skb
(
skb
);

62  
NULL
;

66 i‡(
skb
->
sk
 !
NULL
)

67 
	`skb_£t_ow√r_w
(
nskb
, 
skb
->
sk
);

69 
ùh
 = 
	`SKB_NETWORK_HDR_IPH
(
skb
);

71 
	`skb_put
(
nskb
, (
mö_ùíc_hdr
));

74 
	`mem˝y
(
nskb
->
d©a
, 
skb
->d©a, (
ùh
->
ihl
 << 2));

76 
	`mem˝y
(
nskb
->
d©a
 + (
ùh
->
ihl
 << 2Ë+ (
mö_ùíc_hdr
),

77 
skb
->
d©a
 + (
ùh
->
ihl
 << 2), skb->
Àn
 - (iph->ihl << 2));

79 
	`k‰ì_skb
(
skb
);

80 
skb
 = 
nskb
;

84 
	`SKB_SET_NETWORK_HDR
(
skb
, 0);

85 
ùh
 = 
	`SKB_NETWORK_HDR_IPH
(
skb
);

87 
ùe
 = (
mö_ùíc_hdr
 *)(
	`SKB_NETWORK_HDR_RAW
(
skb
Ë+ (
ùh
->
ihl
 << 2));

90 
ùe
->
¥Ÿocﬁ
 = 
ùh
->protocol;

91 
ùe
->
s
 = 0;

92 
ùe
->
ªs
 = 0;

93 
ùe
->
check
 = 0;

94 
ùe
->
daddr
 = 
ùh
->daddr;

97 
ùh
->
daddr
 = 
de°
;

98 
ùh
->
¥Ÿocﬁ
 = 
IPPROTO_MIPE
;

99 
ùh
->
tŸ_Àn
 = 
	`ht⁄s
(
	`¡ohs
(ùh->tŸ_ÀnË+ (
mö_ùíc_hdr
));

102 
ùe
->
check
 = 
	`ù_csum
((*)ipe, 4);

104 
	`ù_£nd_check
(
ùh
);

106 i‡(
ùh
->
id
 == 0)

108 
	`__ù_£À˘_idít
(
ùh
, 
	`skb_d°
(
skb
), 0);

111 i‡((
ùh
->
‰ag_off
 & 
	`ht⁄s
(
IP_DF
))) {

118 
ùh
->
id
 = (
sk
 && 
	`öë_sk
(sk)->
öë_daddr
) ?

119 
	`ht⁄s
(
	`öë_sk
(
sk
)->
öë_id
++) : 0;

121 
	`__ù_£À˘_idít
(
ùh
, 
d°
, 0);

125 
	}
}

127  
	gskb
;

131 
	$_ù_£À˘_idít
(
ùhdr
 *
ùh
, 
d°_íåy
 *
d°
, 
sock
 *
sk
)

133 [>
ùhdr
 *
ùh
 = 
	`ù_hdr
(
skb
);<]

135 i‡((
ùh
->
‰ag_off
 & 
	`ht⁄s
(
IP_DF
))) {

136 
This
 
is
 
⁄ly
 
to
 
w‹k
 
¨ound
 
buggy
 
Wödows95
/2000

137 * 
VJ
 
com¥essi⁄
 
im∂emíèti⁄s
. 
If
 
the
 
ID
 
fõld


138 * 
d€s
 
nŸ
 
ch™ge
, 
they
 
dr›
 
evîy
 
Ÿhî
 
∑ckë
 
ö


139 * 
a
 
TCP
 
°ªam
 
usög
 
hódî
 
com¥essi⁄
.

141 
ùh
->
id
 = (
sk
 && 
	`öë_sk
(sk)->
öë_daddr
) ?

142 
	`ht⁄s
(
	`öë_sk
(
sk
)->
öë_id
++) : 0;

144 
	`__ù_£À˘_idít
(
ùh
, 
d°
, 0);

145 
	}
}

148 
sk_buff
 *
	$ù_pkt_deˇpsuœã
(
sk_buff
 *
skb
)

150 
mö_ùíc_hdr
 *
ùe
;

152 
ùhdr
 *
ùh
 = 
	`SKB_NETWORK_HDR_IPH
(
skb
);

154 
ùe
 = (
mö_ùíc_hdr
 *)((*)
ùh
 + (ùh->
ihl
 << 2));

156 
ùh
->
¥Ÿocﬁ
 = 
ùe
->protocol;

157 
ùh
->
daddr
 = 
ùe
->daddr;

160 
	`memmove
(
skb
->
d©a
 + (
ùh
->
ihl
 << 2),

161 
skb
->
d©a
 + (
ùh
->
ihl
 << 2Ë+ (
mö_ùíc_hdr
),

162 
skb
->
Àn
 - (
ùh
->
ihl
 << 2Ë- (
mö_ùíc_hdr
));

164 
	`skb_åim
(
skb
, skb->
Àn
 - (
mö_ùíc_hdr
));

166 
	`SKB_SET_NETWORK_HDR
(
skb
, 0);

167 
ùh
 = 
	`SKB_NETWORK_HDR_IPH
(
skb
);

169 
ùh
->
tŸ_Àn
 = 
	`ht⁄s
((
	`¡ohs
(ùh->tŸ_ÀnË- (
mö_ùíc_hdr
)));

170 
	`ù_£nd_check
(
ùh
);

172  
skb
;

173 
	}
}

	@lnx/kaodv-ipenc.h

24 #i‚de‡
_KAODV_IPENC_H


25 
	#_KAODV_IPENC_H


	)

27 
	~<löux/ù.h
>

28 
	~<löux/skbuff.h
>

29 
	~<asm/byã‹dî.h
>

31 
	#IPPROTO_MIPE
 55

	)

33 
	smö_ùíc_hdr
 {

34 
u_öt8_t
 
	m¥Ÿocﬁ
;

35 #i‡
deföed
(
__LITTLE_ENDIAN
)

36 
u_öt8_t
 
	mªs
:7;

37 
u_öt8_t
 
	ms
:1;

38 #ñi‡
deföed
(
__BIG_ENDIAN
)

39 
u_öt8_t
 
	ms
:1;

40 
u_öt8_t
 
	mªs
:7;

44 
u_öt16_t
 
	mcheck
;

45 
u_öt32_t
 
	mdaddr
;

48 
sk_buff
 *
ù_pkt_íˇpsuœã
(sk_buf‡*
skb
, 
__u32
 
de°
);

49 
sk_buff
 *
ù_pkt_deˇpsuœã
(sk_buf‡*
skb
);

	@lnx/kaodv-mod.c

22 
	~<löux/vîsi⁄.h
>

23 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,19))

24 
	~<löux/c⁄fig.h
>

26 #ifde‡
KERNEL26


27 
	~<löux/moduÀ∑øm.h
>

29 
	~<löux/moduÀ.h
>

30 
	~<löux/kî√l.h
>

31 
	~<löux/öô.h
>

32 
	~<löux/¥oc_fs.h
>

33 
	~<löux/if.h
>

34 
	~<löux/skbuff.h
>

35 
	~<löux/√tdevi˚.h
>

36 
	~<löux/öëdevi˚.h
>

37 
	~<löux/√tfûãr.h
>

38 
	~<löux/√tfûãr_ùv4.h
>

39 
	~<löux/ö.h
>

40 
	~<löux/ù.h
>

41 
	~<löux/udp.h
>

42 
	~<löux/t˝.h
>

43 
	~<√t/t˝.h
>

44 
	~<√t/rouã.h
>

46 
	~"kaodv-mod.h
"

47 
	~"kaodv-ex∂.h
"

48 
	~"kaodv-√éök.h
"

49 
	~"kaodv-queue.h
"

50 
	~"kaodv-ùíc.h
"

51 
	~"kaodv-debug.h
"

52 
	~"kaodv.h
"

54 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,25))

55 
	#NF_INET_PRE_ROUTING
 
NF_IP_PRE_ROUTING


	)

56 
	#NF_INET_LOCAL_IN
 
NF_IP_LOCAL_IN


	)

57 
	#NF_INET_FORWARD
 
NF_IP_FORWARD


	)

58 
	#NF_INET_LOCAL_OUT
 
NF_IP_LOCAL_OUT


	)

59 
	#NF_INET_POST_ROUTING
 
NF_IP_POST_ROUTING


	)

60 
	#NF_INET_NUMHOOKS
 
NF_IP_NUMHOOKS


	)

63 
	#ACTIVE_ROUTE_TIMEOUT
 
a˘ive_rouã_timeout


	)

64 
	#MAX_INTERFACES
 10

	)

66 
	gquÆ
 = 0;

67 
	gpkts_dr›≥d
 = 0;

68 
	gquÆ_th
 = 0;

69 
	gis_g©eway
 = 1;

70 
	ga˘ive_rouã_timeout
 = 3000;

73 
	gMODULE_DESCRIPTION


75 
MODULE_AUTHOR
("Erik Nordstrˆm");

76 #ifde‡
MODULE_LICENSE


77 
MODULE_LICENSE
("GPL");

80 
	#ADDR_HOST
 1

	)

81 
	#ADDR_BROADCAST
 2

	)

83 
	$kaodv_upd©e_rouã_timeouts
(
hooknum
, c⁄° 
√t_devi˚
 *
dev
,

84 
ùhdr
 *
ùh
)

86 
ex∂_íåy
 
e
;

87 
ö_addr
 
bˇddr
;

88 
ªs
;

90 
bˇddr
.
s_addr
 = 0;

93 
ªs
 = 
	`if_öfo_‰om_ifödex
(
NULL
, &
bˇddr
, 
dev
->
ifödex
);

95 i‡(
ªs
 < 0)

98 i‡(
hooknum
 =
NF_INET_PRE_ROUTING
)

99 
	`kaodv_√éök_£nd_π_upd©e_msg
(
PKT_INBOUND
, 
ùh
->
ßddr
,

100 
ùh
->
daddr
, 
dev
->
ifödex
);

101 i‡(
ùh
->
daddr
 !
INADDR_BROADCAST
 && iph->dadd∏!
bˇddr
.
s_addr
)

102 
	`kaodv_√éök_£nd_π_upd©e_msg
(
PKT_OUTBOUND
, 
ùh
->
ßddr
,

103 
ùh
->
daddr
, 
dev
->
ifödex
);

106 i‡(
	`kaodv_ex∂_gë
(
ùh
->
daddr
, &
e
)) {

108 
	`kaodv_ex∂_upd©e
(
e
.
daddr
,É.
nh›
, 
ACTIVE_ROUTE_TIMEOUT
,

109 
e
.
Êags
, 
dev
->
ifödex
);

111 i‡(
e
.
nh›
 !e.
daddr
 && 
	`kaodv_ex∂_gë
(e.nhop, &e))

112 
	`kaodv_ex∂_upd©e
(
e
.
daddr
,É.
nh›
, 
ACTIVE_ROUTE_TIMEOUT
,

113 
e
.
Êags
, 
dev
->
ifödex
);

116 i‡(
	`kaodv_ex∂_gë
(
ùh
->
ßddr
, &
e
)) {

118 
	`kaodv_ex∂_upd©e
(
e
.
daddr
,É.
nh›
, 
ACTIVE_ROUTE_TIMEOUT
,

119 
e
.
Êags
, 
dev
->
ifödex
);

121 i‡(
e
.
nh›
 !e.
daddr
 && 
	`kaodv_ex∂_gë
(e.nhop, &e))

122 
	`kaodv_ex∂_upd©e
(
e
.
daddr
,É.
nh›
, 
ACTIVE_ROUTE_TIMEOUT
,

123 
e
.
Êags
, 
dev
->
ifödex
);

125 
	}
}

127 
kaodv_hook
(
hooknum
,

128 
sk_buff
 *
skb
,

129 c⁄° 
√t_devi˚
 *
ö
,

130 c⁄° 
√t_devi˚
 *
out
,

131 (*
ok‚
Ë(
sk_buff
 *))

133 
ùhdr
 *
ùh
 = 
	`SKB_NETWORK_HDR_IPH
(
skb
);

134 
ex∂_íåy
 
e
;

135 
ö_addr
 
iÁddr
, 
bˇddr
;

136 
ªs
 = 0;

138 
	`mem£t
(&
iÁddr
, 0, (
ö_addr
));

139 
	`mem£t
(&
bˇddr
, 0, (
ö_addr
));

142 i‡(
ùh
 =
NULL
)

143  
NF_ACCEPT
;

147 i‡(
ùh
 && iph->
¥Ÿocﬁ
 =
IPPROTO_UDP
) {

148 
udphdr
 *
udph
;

150 
udph
 = (
udphdr
 *)((*)
ùh
 + (ùh->
ihl
 << 2));

152 i‡(
	`¡ohs
(
udph
->
de°
Ë=
AODV_PORT
 ||

153 
	`¡ohs
(
udph
->
sour˚
Ë=
AODV_PORT
) {

155 #ifde‡
CONFIG_QUAL_THRESHOLD


156 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,0))

157 
quÆ
 = ()(
skb
)->
__unu£d
;

158 #ñi‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,0))

159 
quÆ
 = (
skb
)->
iwq
.qual;

161 i‡(
quÆ_th
 && 
hooknum
 =
NF_INET_PRE_ROUTING
) {

163 i‡(
quÆ
 && quÆ < 
quÆ_th
) {

164 
pkts_dr›≥d
++;

165  
NF_DROP
;

169 i‡(
hooknum
 =
NF_INET_PRE_ROUTING
 && 
ö
)

170 
	`kaodv_upd©e_rouã_timeouts
(
hooknum
, 
ö
, 
ùh
);

172  
NF_ACCEPT
;

176 i‡(
hooknum
 =
NF_INET_PRE_ROUTING
)

177 
ªs
 = 
	`if_öfo_‰om_ifödex
(&
iÁddr
, &
bˇddr
, 
ö
->
ifödex
);

179 
ªs
 = 
	`if_öfo_‰om_ifödex
(&
iÁddr
, &
bˇddr
, 
out
->
ifödex
);

181 i‡(
ªs
 < 0)

182  
NF_ACCEPT
;

186 i‡(
ùh
->
daddr
 =
INADDR_BROADCAST
 ||

187 
	`IN_MULTICAST
(
	`¡ohl
(
ùh
->
daddr
)) ||

188 
ùh
->
daddr
 =
bˇddr
.
s_addr
)

189  
NF_ACCEPT
;

193 
hooknum
) {

194 
NF_INET_PRE_ROUTING
:

195 
	`kaodv_upd©e_rouã_timeouts
(
hooknum
, 
ö
, 
ùh
);

198 i‡(
is_g©eway
 && 
ùh
->
¥Ÿocﬁ
 =
IPPROTO_MIPE
 &&

199 
ùh
->
daddr
 =
iÁddr
.
s_addr
) {

200 
	`ù_pkt_deˇpsuœã
(
skb
);

201 
ùh
 = 
	`SKB_NETWORK_HDR_IPH
(
skb
);

202  
NF_ACCEPT
;

206 i‡(
ùh
->
ßddr
 =
iÁddr
.
s_addr
 ||

207 
ùh
->
daddr
 =
iÁddr
.
s_addr
) {

208  
NF_ACCEPT
;

211 i‡(!
	`kaodv_ex∂_gë
(
ùh
->
daddr
, &
e
)) {

212 
	`¥ötk
(
KERN_ALERT
 "sendÉrrorÇetlink msg\n");

213 
	`kaodv_√éök_£nd_ªº_msg
(
PKT_INBOUND
, 
ùh
->
ßddr
,

214 
ùh
->
daddr
, 
ö
->
ifödex
);

215  
NF_DROP
;

219 i‡(
e
.
Êags
 & 
KAODV_RT_REPAIR
) {

221 
	`kaodv_√éök_£nd_π_msg
(
KAODVM_REPAIR
, 
ùh
->
ßddr
,

222 
ùh
->
daddr
);

224 
	`kaodv_queue_íqueue_∑ckë
(
skb
, 
ok‚
);

226  
NF_STOLEN
;

229 
NF_INET_LOCAL_OUT
:

231 i‡(!
	`kaodv_ex∂_gë
(
ùh
->
daddr
, &
e
) ||

232 (
e
.
Êags
 & 
KAODV_RT_REPAIR
)) {

234 i‡(!
	`kaodv_queue_föd
(
ùh
->
daddr
))

235 
	`kaodv_√éök_£nd_π_msg
(
KAODVM_ROUTE_REQ
,

237 
ùh
->
daddr
);

239 
	`kaodv_queue_íqueue_∑ckë
(
skb
, 
ok‚
);

241  
NF_STOLEN
;

243 } i‡(
e
.
Êags
 & 
KAODV_RT_GW_ENCAP
) {

244 #ifde‡
ENABLE_DISABLED


251 i‡(
ùh
->
¥Ÿocﬁ
 =
IPPROTO_TCP
) {

253 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,24))

254 i‡((*
skb
)->
sk
) {

255 
t˝_sock
 *
ç
 = 
	`t˝_sk
((*
skb
)->
sk
);

256 i‡(
ç
->
mss_ˇche
 > 1452) {

257 
ç
->
rx_›t
.
u£r_mss
 = 1452;

258 
ç
->
rx_›t
.
mss_˛amp
 = 1452;

259 
	`t˝_sync_mss
((*
skb
)->
sk
, 1452);

263 i‡(
skb
->
sk
) {

264 
t˝_sock
 *
ç
 = 
	`t˝_sk
(
skb
->
sk
);

265 i‡(
ç
->
mss_ˇche
 > 1452) {

266 
ç
->
rx_›t
.
u£r_mss
 = 1452;

267 
ç
->
rx_›t
.
mss_˛amp
 = 1452;

268 
	`t˝_sync_mss
(
skb
->
sk
, 1452);

276 
	`kaodv_upd©e_rouã_timeouts
(
hooknum
, 
out
, 
ùh
);

278 
skb
 = 
	`ù_pkt_íˇpsuœã
(skb, 
e
.
nh›
);

280 i‡(!
skb
)

281  
NF_STOLEN
;

283 
	`ù_rouã_me_h¨dî
(
skb
, 
RTN_LOCAL
);

286 
NF_INET_POST_ROUTING
:

287 
	`kaodv_upd©e_rouã_timeouts
(
hooknum
, 
out
, 
ùh
);

289  
NF_ACCEPT
;

290 
	}
}

292 
	$kaodv_¥oc_öfo
(*
buf„r
, **
°¨t
, 
off_t
 
off£t
, 
Àngth
)

294 
Àn
;

296 
Àn
 =

297 
	`•rötf
(
buf„r
,

299 
quÆ_th
, 
pkts_dr›≥d
, 
quÆ
, 
is_g©eway
);

301 *
°¨t
 = 
buf„r
 + 
off£t
;

302 
Àn
 -
off£t
;

303 i‡(
Àn
 > 
Àngth
)

304 
Àn
 = 
Àngth
;

305 i‡(
Àn
 < 0)

306 
Àn
 = 0;

307  
Àn
;

308 
	}
}

313 *
	gi‚ame
[
MAX_INTERFACES
] = { "eth0" };

315 #ifde‡
KERNEL26


316 
	gnum_∑rms
 = 0;

317 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,10))

318 
moduÀ_∑øm_¨øy
(
i‚ame
, 
ch¨p
, 
num_∑rms
, 0444);

320 
moduÀ_∑øm_¨øy
(
i‚ame
, 
ch¨p
, &
num_∑rms
, 0444);

322 
moduÀ_∑øm
(
quÆ_th
, , 0);

324 
MODULE_PARM
(
i‚ame
, "1-" 
__MODULE_STRING
(
MAX_INTERFACES
) "s");

325 
MODULE_PARM
(
quÆ_th
, "i");

328 
nf_hook_›s
 
	gkaodv_›s
[] = {

330 .
hook
 = 
kaodv_hook
,

331 #ifde‡
KERNEL26


332 .
	gow√r
 = 
THIS_MODULE
,

334 .
	gpf
 = 
PF_INET
,

335 .
	ghooknum
 = 
NF_INET_PRE_ROUTING
,

336 .
	g¥i‹ôy
 = 
NF_IP_PRI_FIRST
,

339 .
	ghook
 = 
kaodv_hook
,

340 #ifde‡
KERNEL26


341 .
	gow√r
 = 
THIS_MODULE
,

343 .
	gpf
 = 
PF_INET
,

344 .
	ghooknum
 = 
NF_INET_LOCAL_OUT
,

345 .
	g¥i‹ôy
 = 
NF_IP_PRI_FILTER
,

348 .
	ghook
 = 
kaodv_hook
,

349 #ifde‡
KERNEL26


350 .
	gow√r
 = 
THIS_MODULE
,

352 .
	gpf
 = 
PF_INET
,

353 .
	ghooknum
 = 
NF_INET_POST_ROUTING
,

354 .
	g¥i‹ôy
 = 
NF_IP_PRI_FILTER
,

358 
	$kaodv_ªad_¥oc
(*
∑ge
, **
°¨t
, 
off_t
 
off
, 
cou¡
,

359 *
eof
, *
d©a
)

361 
Àn
;

363 
Àn
 = 
	`•rötf
(
∑ge
,

365 
quÆ_th
, 
pkts_dr›≥d
, 
quÆ
, 
is_g©eway
);

367 *
°¨t
 = 
∑ge
 + 
off
;

368 
Àn
 -
off
;

369 i‡(
Àn
 > 
cou¡
)

370 
Àn
 = 
cou¡
;

371 i‡(
Àn
 < 0)

372 
Àn
 = 0;

373  
Àn
;

374 
	}
}

377 
__öô
 
	$kaodv_öô
()

379 
√t_devi˚
 *
dev
 = 
NULL
;

380 
i
, 
ªt
 = -
ENOMEM
;

382 #i‚de‡
KERNEL26


383 
EXPORT_NO_SYMBOLS
;

386 
	`kaodv_ex∂_öô
();

388 
ªt
 = 
	`kaodv_queue_öô
();

390 i‡(
ªt
 < 0)

391  
ªt
;

393 
ªt
 = 
	`kaodv_√éök_öô
();

395 i‡(
ªt
 < 0)

396 
˛ónup_queue
;

398 
ªt
 = 
	`nf_ªgi°î_hook
(&
kaodv_›s
[0]);

400 i‡(
ªt
 < 0)

401 
˛ónup_√éök
;

403 
ªt
 = 
	`nf_ªgi°î_hook
(&
kaodv_›s
[1]);

405 i‡(
ªt
 < 0)

406 
˛ónup_hook0
;

408 
ªt
 = 
	`nf_ªgi°î_hook
(&
kaodv_›s
[2]);

410 i‡(
ªt
 < 0)

411 
˛ónup_hook1
;

416 
i
 = 0; i < 
MAX_INTERFACES
; i++) {

417 i‡(!
i‚ame
[
i
])

420 
dev
 = 
	`dev_gë_by_«me
(&
öô_√t
, 
i‚ame
[
i
]);

422 i‡(!
dev
) {

423 
	`¥ötk
("No device %sávailable, ignoring!\n",

424 
i‚ame
[
i
]);

427 
	`if_öfo_add
(
dev
);

429 
	`dev_put
(
dev
);

432 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,24))

433 
	`¥oc_√t_¸óã
("kaodv", 0, 
kaodv_¥oc_öfo
);

434 #ñi‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3,12,17))

435 i‡(!
	`¸óã_¥oc_ªad_íåy
("kaodv", 0, 
öô_√t
.
¥oc_√t
, 
kaodv_ªad_¥oc
,

436 
NULL
))

438 i‡(!
	`¥oc_¸óã_d©a
("kaodv", 0, 
öô_√t
.
¥oc_√t
,(
fûe_›î©i⁄s
*Ë
kaodv_ªad_¥oc
,

439 
NULL
))

440 
	`KAODV_DEBUG
("CouldÇot create kaodvÖrocÉntry");

442 
	`KAODV_DEBUG
("Module init OK");

444  
ªt
;

446 
˛ónup_hook1
:

447 
	`nf_uƒegi°î_hook
(&
kaodv_›s
[1]);

448 
˛ónup_hook0
:

449 
	`nf_uƒegi°î_hook
(&
kaodv_›s
[0]);

450 
˛ónup_√éök
:

451 
	`kaodv_√éök_föi
();

452 
˛ónup_queue
:

453 
	`kaodv_queue_föi
();

455  
ªt
;

456 
	}
}

461 
__exô
 
	$kaodv_exô
()

463 
i
;

465 
	`if_öfo_purge
();

467 
i
 = 0; i < (
kaodv_›s
Ë/ (
nf_hook_›s
); i++)

468 
	`nf_uƒegi°î_hook
(&
kaodv_›s
[
i
]);

469 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,24))

470 
	`¥oc_√t_ªmove
("kaodv");

471 #ñi‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3,12,17))

472 
	`¥oc_√t_ªmove
(&
öô_√t
, "kaodv");

474 
	`ªmove_¥oc_íåy
("kaodv", 
öô_√t
.
¥oc_√t
);

476 
	`kaodv_queue_föi
();

477 
	`kaodv_ex∂_föi
();

478 
	`kaodv_√éök_föi
();

479 
	}
}

481 
moduÀ_öô
(
kaodv_öô
);

482 
moduÀ_exô
(
kaodv_exô
);

	@lnx/kaodv-mod.h

1 #i‚de‡
_KAODV_MOD_H


2 
	#_KAODV_MOD_H


	)

4 
	~<löux/√tdevi˚.h
>

5 
	~<löux/öëdevi˚.h
>

6 
	~<löux/li°.h
>

7 
	~<löux/•ölock.h
>

10 
	sif_öfo
 {

11 
li°_hód
 
	ml
;

12 
ö_addr
 
	mif_addr
;

13 
ö_addr
 
	mbc_addr
;

14 
√t_devi˚
 *
	mdev
;

17 
LIST_HEAD
(
ifihód
);

18 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,39))

19 
rwlock_t
 
	gifûock
 = 
RW_LOCK_UNLOCKED
;

21 
rwlock_t
 
	gifûock
 = 
__RW_LOCK_UNLOCKED
(
ifûock
);

26 
ölöe
 
	$if_öfo_add
(
√t_devi˚
 *
dev
)

28 
if_öfo
 *
ifi
;

29 
ö_devi˚
 *
ödev
;

31 
ifi
 = (
if_öfo
 *)
	`kmÆloc
((if_öfo), 
GFP_ATOMIC
);

33 i‡(!
ifi
)

36 
ifi
->
dev
 = dev;

38 
	`dev_hﬁd
(
dev
);

40 
ödev
 = 
	`ö_dev_gë
(
dev
);

42 i‡(
ödev
) {

43 
ö_iÁddr
 **
iÁp
;

44 
ö_iÁddr
 *
iÁ
;

46 
iÁp
 = &
ödev
->
iÁ_li°
; (
iÁ
 = *iÁpË!
NULL
;

47 
iÁp
 = &
iÁ
->
iÁ_√xt
)

48 i‡(!
	`°rcmp
(
dev
->
«me
, 
iÁ
->
iÁ_œbñ
))

51 i‡(
iÁ
) {

52 
ifi
->
if_addr
.
s_addr
 = 
iÁ
->
iÁ_addªss
;

53 
ifi
->
bc_addr
.
s_addr
 = 
iÁ
->
iÁ_brﬂdˇ°
;

55 
	`ö_dev_put
(
ödev
);

58 
	`wrôe_lock
(&
ifûock
);

59 
	`li°_add
(&
ifi
->
l
, &
ifihód
);

60 
	`wrôe_u∆ock
(&
ifûock
);

63 
	}
}

65 
ölöe
 
	$if_öfo_purge
()

67 
li°_hód
 *
pos
, *
n
;

69 
	`wrôe_lock
(&
ifûock
);

70 
	`li°_f‹_óch_ß„
(
pos
, 
n
, &
ifihód
) {

71 
if_öfo
 *
ifi
 = (if_öfÿ*)
pos
;

72 
	`li°_dñ
(&
ifi
->
l
);

73 
	`dev_put
(
ifi
->
dev
);

74 
	`k‰ì
(
ifi
);

76 
	`wrôe_u∆ock
(&
ifûock
);

77 
	}
}

79 
ölöe
 
	$if_öfo_‰om_ifödex
(
ö_addr
 *
iÁ
, ö_add∏*
bc
,

80 
ifödex
)

82 
li°_hód
 *
pos
;

83 
ªs
 = -1;

85 
	`ªad_lock
(&
ifûock
);

86 
	`li°_f‹_óch
(
pos
, &
ifihód
) {

87 
if_öfo
 *
ifi
 = (if_öfÿ*)
pos
;

88 i‡(
ifi
->
dev
->
ifödex
 == ifindex) {

89 i‡(
iÁ
)

90 *
iÁ
 = 
ifi
->
if_addr
;

92 i‡(
bc
)

93 *
bc
 = 
ifi
->
bc_addr
;

94 
ªs
 = 0;

98 
	`ªad_u∆ock
(&
ifûock
);

100  
ªs
;

101 
	}
}

103 
kaodv_upd©e_rouã_timeouts
(
hooknum
, c⁄° 
√t_devi˚
 *
dev
,

104 
ùhdr
 *
ùh
);

	@lnx/kaodv-netlink.c

22 
	~<löux/vîsi⁄.h
>

23 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,19))

24 
	~<löux/c⁄fig.h
>

26 
	~<löux/if.h
>

27 
	~<löux/skbuff.h
>

28 
	~<löux/•ölock.h
>

29 
	~<löux/√éök.h
>

30 
	~<löux/vîsi⁄.h
>

32 #ifde‡
KERNEL26


33 
	~<löux/£curôy.h
>

35 
	~<√t/sock.h
>

37 
	~"kaodv-√éök.h
"

38 
	~"kaodv-ex∂.h
"

39 
	~"kaodv-queue.h
"

40 
	~"kaodv-debug.h
"

41 
	~"kaodv.h
"

43 
	g≥î_pid
;

44 
sock
 *
	gkaodv∆
;

45 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,36))

46 
DECLARE_MUTEX
(
kaodv∆_£m
);

48 
DEFINE_SEMAPHORE
(
kaodv∆_£m
);

52 #i‚de‡
KERNEL26


53 
	#sk_ª˚ive_queue
 
ª˚ive_queue


	)

54 
	#sk_sockë
 
sockë


	)

59 
a˘ive_rouã_timeout
, 
quÆ_th
, 
is_g©eway
;

61 
sk_buff
 *
	$kaodv_√éök_buûd_msg
(
ty≥
, *
d©a
, 
Àn
)

64 *
ﬁd_èû
;

65 
size_t
 
size
 = 0;

66 
sk_buff
 *
skb
;

67 
∆msghdr
 *
∆h
;

68 *
m
;

70 
size
 = 
	`NLMSG_SPACE
(
Àn
);

72 
skb
 = 
	`Æloc_skb
(
size
, 
GFP_ATOMIC
);

74 i‡(!
skb
)

75 
∆msg_Áûuª
;

77 
ﬁd_èû
 = 
	`SKB_TAIL_PTR
(
skb
);

78 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3,12,17))

79 
∆h
 = 
	`∆msg_put
(
skb
, 0, 0, 
ty≥
, 
size
 - (*nlh),0);

81 
∆h
 = 
	`NLMSG_PUT
(
skb
, 0, 0, 
ty≥
, 
size
 - (*nlh));

84 
m
 = 
	`NLMSG_DATA
(
∆h
);

86 
	`mem˝y
(
m
, 
d©a
, 
Àn
);

88 
∆h
->
∆msg_Àn
 = 
	`SKB_TAIL_PTR
(
skb
Ë- 
ﬁd_èû
;

91 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3,12,17))

92 
	`NETLINK_CB
(
skb
).
p‹tid
 = 0;

94 
	`NETLINK_CB
(
skb
).
pid
 = 0;

97  
skb
;

99 
∆msg_Áûuª
:

100 i‡(
skb
)

101 
	`k‰ì_skb
(
skb
);

103 
	`¥ötk
(
KERN_ERR
 "kaodv:Érror creatingÑtÅimeout message\n");

105  
NULL
;

106 
	}
}

108 
	$kaodv_√éök_£nd_debug_msg
(*
buf
, 
Àn
)

111 
sk_buff
 *
skb
 = 
NULL
;

113 
skb
 = 
	`kaodv_√éök_buûd_msg
(
KAODVM_DEBUG
, 
buf
, 
Àn
);

115 i‡(
skb
 =
NULL
) {

116 
	`¥ötk
("kaodv_netlink: skb=NULL\n");

120 
	`√éök_brﬂdˇ°
(
kaodv∆
, 
skb
, 
≥î_pid
, 
AODVGRP_NOTIFY
, 
GFP_USER
);

121 
	}
}

123 
	$kaodv_√éök_£nd_π_msg
(
ty≥
, 
__u32
 
§c
, __u32 
de°
)

126 
sk_buff
 *
skb
 = 
NULL
;

127 
kaodv_π_msg
 
m
;

129 
	`mem£t
(&
m
, 0, (m));

131 
m
.
§c
 = src;

132 
m
.
d°
 = 
de°
;

134 
skb
 = 
	`kaodv_√éök_buûd_msg
(
ty≥
, &
m
, (
kaodv_π_msg
));

136 i‡(
skb
 =
NULL
) {

137 
	`¥ötk
("kaodv_netlink: skb=NULL\n");

142 
	`√éök_brﬂdˇ°
(
kaodv∆
, 
skb
, 0, 
AODVGRP_NOTIFY
, 
GFP_USER
);

143 
	}
}

145 
	$kaodv_√éök_£nd_π_upd©e_msg
(
ty≥
, 
__u32
 
§c
, __u32 
de°
,

146 
ifödex
)

149 
sk_buff
 *
skb
 = 
NULL
;

150 
kaodv_π_msg
 
m
;

152 
	`mem£t
(&
m
, 0, (m));

154 
m
.
ty≥
 =Åype;

155 
m
.
§c
 = src;

156 
m
.
d°
 = 
de°
;

157 
m
.
ifödex
 = ifindex;

159 
skb
 = 
	`kaodv_√éök_buûd_msg
(
KAODVM_ROUTE_UPDATE
, &
m
,

160 (
kaodv_π_msg
));

162 i‡(
skb
 =
NULL
) {

163 
	`¥ötk
("kaodv_netlink: skb=NULL\n");

167 
	`√éök_brﬂdˇ°
(
kaodv∆
, 
skb
, 0, 
AODVGRP_NOTIFY
, 
GFP_USER
);

168 
	}
}

170 
	$kaodv_√éök_£nd_ªº_msg
(
ty≥
, 
__u32
 
§c
, __u32 
de°
, 
ifödex
)

173 
sk_buff
 *
skb
 = 
NULL
;

174 
kaodv_π_msg
 
m
;

176 
	`mem£t
(&
m
, 0, (m));

178 
m
.
ty≥
 =Åype;

179 
m
.
§c
 = src;

180 
m
.
d°
 = 
de°
;

181 
m
.
ifödex
 = ifindex;

183 
skb
 = 
	`kaodv_√éök_buûd_msg
(
KAODVM_SEND_RERR
, &
m
,

184 (
kaodv_π_msg
));

186 i‡(
skb
 =
NULL
) {

187 
	`¥ötk
("kaodv_netlink: skb=NULL\n");

191 
	`√éök_brﬂdˇ°
(
kaodv∆
, 
skb
, 0, 
AODVGRP_NOTIFY
, 
GFP_USER
);

192 
	}
}

194 
	$kaodv_√éök_ª˚ive_≥î
(
ty≥
, *
msg
,

195 
Àn
)

198 
ªt
 = 0;

199 
kaodv_π_msg
 *
m
;

200 
kaodv_c⁄f_msg
 *
cm
;

201 
ex∂_íåy
 
e
;

203 
	`KAODV_DEBUG
("Re˚ived msg: %s", 
	`kaodv_msg_ty≥_to_°r
(
ty≥
));

205 
ty≥
) {

206 
KAODVM_ADDROUTE
:

207 i‡(
Àn
 < (
kaodv_π_msg
))

208  -
EINVAL
;

210 
m
 = (
kaodv_π_msg
 *)
msg
;

212 
ªt
 = 
	`kaodv_ex∂_gë
(
m
->
d°
, &
e
);

214 i‡(
ªt
 < 0) {

215 
ªt
 = 
	`kaodv_ex∂_upd©e
(
m
->
d°
, m->
nh›
, m->
time
,

216 
m
->
Êags
, m->
ifödex
);

218 
ªt
 = 
	`kaodv_ex∂_add
(
m
->
d°
, m->
nh›
, m->
time
,

219 
m
->
Êags
, m->
ifödex
);

221 
	`kaodv_queue_£t_vîdi˘
(
KAODV_QUEUE_SEND
, 
m
->
d°
);

223 
KAODVM_DELROUTE
:

224 i‡(
Àn
 < (
kaodv_π_msg
))

225  -
EINVAL
;

227 
m
 = (
kaodv_π_msg
 *)
msg
;

228 
	`kaodv_ex∂_dñ
(
m
->
d°
);

229 
	`kaodv_queue_£t_vîdi˘
(
KAODV_QUEUE_DROP
, 
m
->
d°
);

231 
KAODVM_NOROUTE_FOUND
:

232 i‡(
Àn
 < (
kaodv_π_msg
))

233  -
EINVAL
;

235 
m
 = (
kaodv_π_msg
 *)
msg
;

236 
	`KAODV_DEBUG
("Nÿrouã found f‹ %s", 
	`¥öt_ù
(
m
->
d°
));

237 
	`kaodv_queue_£t_vîdi˘
(
KAODV_QUEUE_DROP
, 
m
->
d°
);

239 
KAODVM_CONFIG
:

240 i‡(
Àn
 < (
kaodv_c⁄f_msg
))

241  -
EINVAL
;

243 
cm
 = (
kaodv_c⁄f_msg
 *)
msg
;

244 
a˘ive_rouã_timeout
 = 
cm
->active_route_timeout;

245 
quÆ_th
 = 
cm
->qual_th;

246 
is_g©eway
 = 
cm
->is_gateway;

249 
	`¥ötk
("kaodv-netlink: Unknown messageÅype\n");

250 
ªt
 = -
EINVAL
;

252  
ªt
;

253 
	}
}

255 
	$kaodv_√éök_rcv_∆_evít
(
nŸifõr_block
 *
this
,

256 
evít
, *
±r
)

259 
√éök_nŸify
 *
n
 = 
±r
;

262 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3,12,17))

263 i‡(
evít
 =
NETLINK_URELEASE
 && 
n
->
¥Ÿocﬁ
 =
NETLINK_AODV
 &&Ç->
p‹tid
) {

264 i‡(
n
->
p‹tid
 =
≥î_pid
) {

266 i‡(
evít
 =
NETLINK_URELEASE
 && 
n
->
¥Ÿocﬁ
 =
NETLINK_AODV
 &&Ç->
pid
) {

267 i‡(
n
->
pid
 =
≥î_pid
) {

269 
≥î_pid
 = 0;

270 
	`kaodv_ex∂_Êush
();

271 
	`kaodv_queue_Êush
();

273  
NOTIFY_DONE
;

276  
NOTIFY_DONE
;

277 
	}
}

279 
nŸifõr_block
 
	gkaodv_∆_nŸifõr
 = {

280 .
nŸifõr_ˇŒ
 = 
kaodv_√éök_rcv_∆_evít
,

283 
	#RCV_SKB_FAIL
(
îr
Ëdÿ{ 
	`√éök_ack
(
skb
, 
∆h
, (îr));
	`¥ötk
(
KERN_ALERT
 "î∏ack f‹Åhêªque°!!!"); ; } 0)

	)

285 
ölöe
 
	$kaodv_√éök_rcv_skb
(
sk_buff
 *
skb
)

288 
°©us
, 
ty≥
, 
pid
, 
Êags
, 
∆msgÀn
, 
skbÀn
;

289 
∆msghdr
 *
∆h
;

291 
skbÀn
 = 
skb
->
Àn
;

292 i‡(
skbÀn
 < (
∆msghdr
)) {

293 
	`¥ötk
("skblenÅo small\n");

297 
∆h
 = (
∆msghdr
 *)
skb
->
d©a
;

298 
∆msgÀn
 = 
∆h
->
∆msg_Àn
;

300 i‡(
∆msgÀn
 < (
∆msghdr
Ë|| 
skbÀn
 <Çlmsglen) {

301 
	`¥ötk
("∆smsg=%d skbÀn=%dÅÿsmÆl\n", 
∆msgÀn
, 
skbÀn
);

305 
	`¥ötk
(
KERN_ALERT
 "debugÅestÅhe kernel!!!\n");

307 
pid
 = 
∆h
->
∆msg_pid
;

308 
Êags
 = 
∆h
->
∆msg_Êags
;

310 i‡(
pid
 <0 || !(
Êags
 & 
NLM_F_REQUEST
Ë|| fœg†& 
NLM_F_MULTI
)

312 
	`¥ötk
(
KERN_ALERT
 "pid or flags isÉrror\n");

313 
	`RCV_SKB_FAIL
(-
EINVAL
);

317 i‡(
Êags
 & 
MSG_TRUNC
)

319 
	`¥ötk
(
KERN_ALERT
 "pid or flags isÉrror\n");

320 
	`RCV_SKB_FAIL
(-
ECOMM
);

323 
ty≥
 = 
∆h
->
∆msg_ty≥
;

326 
	`¥ötk
(
KERN_ALERT
 "debugÅestÅhe kernel!!!aaaaaaa\n");

327 
	`¥ötk
("kaodv_√éök:Åy≥=%d\n", 
ty≥
);

330 #ifde‡
KERNEL26


332 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,18))

333 i‡(
	`£curôy_√éök_ªcv
(
skb
))

334 
	`RCV_SKB_FAIL
(-
EPERM
);

337 
	`¥ötk
(
KERN_ALERT
 "kî√»vîsi⁄ i†%d\n",
LINUX_VERSION_CODE
);

339 if(
	`ˇ∑bÀ
(
CAP_NET_ADMIN
))

341 
	`RCV_SKB_FAIL
(-
EPERM
);

343 i‡(
	`ˇp_øi£d
(
	`cuºít_ˇp
(),
CAP_NET_ADMIN
))

345 
	`¥ötk
(
KERN_ALERT
 "kernelÇetlinkÉrror\n");

346 
	`RCV_SKB_FAIL
(-
EPERM
);

354 i‡(
≥î_pid
) {

355 i‡(
≥î_pid
 !
pid
) {

357 
	`RCV_SKB_FAIL
(-
EBUSY
);

360 
≥î_pid
 = 
pid
;

364 
°©us
 = 
	`kaodv_√éök_ª˚ive_≥î
(
ty≥
, 
	`NLMSG_DATA
(
∆h
),

365 
skbÀn
 - 
	`NLMSG_LENGTH
(0));

366 i‡(
°©us
 < 0)

367 
	`RCV_SKB_FAIL
(
°©us
);

369 i‡(
Êags
 & 
NLM_F_ACK
)

371 
	`¥ötk
(
KERN_ALERT
"kernel sendÅhe msg!!!!!!\n");

372 
	`√éök_ack
(
skb
, 
∆h
, 0);

376 
	`¥ötk
(
KERN_ALERT
 "kernel sendÅheÉrr mesg!!!!!\n");

379 
	}
}

382 
	$kaodv_√éök_rcv_sk
(
sock
 *
sk
, 
Àn
)

385 
sk_buff
 *
skb
;

387 i‡(
	`down_åylock
(&
kaodv∆_£m
))

390 (
skb
 = 
	`skb_dequeue
(&
sk
->
sk_ª˚ive_queue
)Ë!
NULL
) {

391 
	`kaodv_√éök_rcv_skb
(
skb
);

392 
	`k‰ì_skb
(
skb
);

395 
	`up
(&
kaodv∆_£m
);

397 } 
kaodv∆
 && kaodv∆->
sk_ª˚ive_queue
.
qÀn
);

400 
	}
}

403 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3,12,17))

404 
√éök_kî√l_cfg
 
	gcfg
 = {

405 .
öput
 = 
kaodv_√éök_rcv_skb
,

409 
	$kaodv_√éök_öô
()

412 
	`√éök_ªgi°î_nŸifõr
(&
kaodv_∆_nŸifõr
);

413 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,14))

414 
	`¥ötk
(
KERN_ALERT
 "kaodv_netlink_initándÅhe LINUX_VERSION_CODE is smallÅhan 2.6.14");

415 
kaodv∆
 = 
	`√éök_kî√l_¸óã
(
NETLINK_AODV
, 
kaodv_√éök_rcv_sk
);

416 #ñi‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,22))

417 
	`¥ötk
(
KERN_ALERT
 "kaodv_netlink_initándÅhe LINUX_VERSION_CODE is smallÅhan 2.6.22");

418 
kaodv∆
 = 
	`√éök_kî√l_¸óã
(
NETLINK_AODV
, 
AODVGRP_MAX
, 
kaodv_√éök_rcv_sk
, 
THIS_MODULE
);

419 #ñi‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,24))

420 
	`¥ötk
(
KERN_ALERT
 "kaodv_netlink_initándÅhe LINUX_VERSION_CODE is smallÅhan 2.6.24");

421 
kaodv∆
 = 
	`√éök_kî√l_¸óã
(
NETLINK_AODV
, 
AODVGRP_MAX
, 
kaodv_√éök_rcv_sk
, 
NULL
, 
THIS_MODULE
);

422 #ñi‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3,12,17))

423 
kaodv∆
 = 
	`√éök_kî√l_¸óã
(&
öô_√t
, 
NETLINK_AODV
, 
AODVGRP_MAX
,

424 
kaodv_√éök_rcv_skb
, 
NULL
, 
THIS_MODULE
);

426 
kaodv∆
 = 
	`√éök_kî√l_¸óã
(&
öô_√t
, 
NETLINK_AODV
,&
cfg
);

428 
	`¥ötk
(
KERN_ALERT
 "kaodv_netlink_initándÅhe LINUX_VERSION_CODE is highÅhan 2.6.24");

431 i‡(
kaodv∆
 =
NULL
) {

432 
	`¥ötk
(
KERN_ERR
 "kaodv_netlink: failedÅo createÇetlink socket\n");

433 
	`√éök_uƒegi°î_nŸifõr
(&
kaodv_∆_nŸifõr
);

437 
	}
}

439 
	$kaodv_√éök_föi
()

441 
	`¥ötk
(
KERN_ALERT
 "kaodv_netlink_fini\n");

442 
	`sock_ªÀa£
(
kaodv∆
->
sk_sockë
);

443 
	`down
(&
kaodv∆_£m
);

444 
	`up
(&
kaodv∆_£m
);

446 
	`√éök_uƒegi°î_nŸifõr
(&
kaodv_∆_nŸifõr
);

447 
	}
}

	@lnx/kaodv-netlink.h

22 #i‚de‡
_KAODV_NETLINK_H


23 
	#_KAODV_NETLINK_H


	)

27 
	~<löux/ty≥s.h
>

28 
	~<löux/√éök.h
>

29 
	~<löux/π√éök.h
>

33 
	#NETLINK_AODV
 (
MAX_LINKS
-1)

	)

36 
	mAODVGRP_NOTIFY
 = 1,

37 
	#AODVGRP_NOTIFY
 
AODVGRP_NOTIFY


	)

38 
	m__AODVGRP_MAX


41 
	#AODVGRP_MAX
 (
__AODVGRP_MAX
 - 1)

	)

47 
	mKAODVM_BASE
 = 100,

48 
	#KAODVM_BASE
 
KAODVM_BASE


	)

49 
	mKAODVM_ADDROUTE
,

50 
	#KAODVM_ADDROUTE
 
KAODVM_ADDROUTE


	)

51 
	mKAODVM_DELROUTE
,

52 
	#KAODVM_DELROUTE
 
KAODVM_DELROUTE


	)

53 
	mKAODVM_TIMEOUT
,

54 
	#KAODVM_TIMEOUT
 
KAODVM_TIMEOUT


	)

55 
	mKAODVM_ROUTE_REQ
,

56 
	#KAODVM_ROUTE_REQ
 
KAODVM_ROUTE_REQ


	)

57 
	mKAODVM_REPAIR
,

58 
	#KAODVM_REPAIR
 
KAODVM_REPAIR


	)

59 
	mKAODVM_NOROUTE_FOUND
,

60 
	#KAODVM_NOROUTE_FOUND
 
KAODVM_NOROUTE_FOUND


	)

61 
	mKAODVM_ROUTE_UPDATE
,

62 
	#KAODVM_ROUTE_UPDATE
 
KAODVM_ROUTE_UPDATE


	)

63 
	mKAODVM_SEND_RERR
,

64 
	#KAODVM_SEND_RERR
 
KAODVM_SEND_RERR


	)

65 
	mKAODVM_CONFIG
,

66 
	#KAODVM_CONFIG
 
KAODVM_CONFIG


	)

67 
	mKAODVM_DEBUG
,

68 
	#KAODVM_DEBUG
 
KAODVM_DEBUG


	)

69 
	m__KAODV_MAX
,

70 
	#KAODVM_MAX
 
__KAODV_MAX


	)

74 
	mty≥
;

75 *
	m«me
;

76 } 
	gty≥«mes
[
KAODVM_MAX
] = {

77 { 
KAODVM_ADDROUTE
, "AddÑoute" },

78 { 
KAODVM_DELROUTE
, "DeleteÑoute" },

79 { 
KAODVM_TIMEOUT
, "Timeout" },

80 { 
KAODVM_ROUTE_REQ
, "Route Request" },

81 { 
KAODVM_REPAIR
, "RouteÑepair" },

82 { 
KAODVM_NOROUTE_FOUND
, "NoÑoute found" },

83 { 
KAODVM_ROUTE_UPDATE
, "Route update" },

84 { 
KAODVM_SEND_RERR
, "SendÑouteÉrror" },

85 { 
KAODVM_CONFIG
, "Configuration" },

86 { 
KAODVM_DEBUG
, "Debug"},

89 
ölöe
 *
	$kaodv_msg_ty≥_to_°r
(
ty≥
)

91 
i
;

93 
i
 = 0; i < 
KAODVM_MAX
; i++) {

94 i‡(
ty≥
 =
ty≥«mes
[
i
].type) {

95  
ty≥«mes
[
i
].
«me
;

99 
	}
}

101 
	skaodv_π_msg
 {

102 
u_öt8_t
 
	mty≥
;

103 
u_öt32_t
 
	m§c
;

104 
u_öt32_t
 
	md°
;

105 
u_öt32_t
 
	mnh›
;

106 
u_öt8_t
 
	mÊags
;

107 
	mifödex
;

108 
	mtime
;

109 } 
	tkaodv_π_msg_t
;

112 
	#KAODV_RT_GW_ENCAP
 0x1

	)

113 
	#KAODV_RT_REPAIR
 0x2

	)

116 
	#PKT_INBOUND
 1

	)

117 
	#PKT_OUTBOUND
 2

	)

121 
	skaodv_c⁄f_msg
 {

122 
	ma˘ive_rouã_timeout
;

123 
	mquÆ_th
;

124 
	mis_g©eway
;

125 } 
	tkaodv_c⁄f_msg_t
;

128 #ifde‡
__KERNEL__


130 
kaodv_√éök_öô
();

131 
kaodv_√éök_föi
();

133 
kaodv_√éök_£nd_π_msg
(
ty≥
, 
__u32
 
§c
, __u32 
de°
);

134 
kaodv_√éök_£nd_π_upd©e_msg
(
ty≥
, 
__u32
 
§c
,

135 
__u32
 
de°
, 
ifödex
);

136 
kaodv_√éök_£nd_ªº_msg
(
ty≥
, 
__u32
 
§c
, __u32 
de°
, 
ifödex
);

137 
kaodv_√éök_£nd_debug_msg
(*
buf
, 
Àn
);

	@lnx/kaodv-queue.c

22 
	~<löux/vîsi⁄.h
>

23 
	~<löux/moduÀ.h
>

24 
	~<löux/skbuff.h
>

25 
	~<löux/öô.h
>

26 
	~<löux/ù.h
>

27 
	~<löux/nŸifõr.h
>

28 
	~<löux/√tdevi˚.h
>

29 
	~<löux/√tfûãr_ùv4.h
>

30 
	~<löux/•ölock.h
>

31 
	~<löux/sys˘l.h
>

32 
	~<löux/¥oc_fs.h
>

33 
	~<√t/sock.h
>

34 
	~<√t/rouã.h
>

35 
	~<√t/icmp.h
>

37 
	~"kaodv-queue.h
"

38 
	~"kaodv-ex∂.h
"

39 
	~"kaodv-√éök.h
"

40 
	~"kaodv-ùíc.h
"

41 
	~"kaodv.h
"

46 
	#KAODV_QUEUE_QMAX_DEFAULT
 1024

	)

47 
	#KAODV_QUEUE_PROC_FS_NAME
 "kaodv_queue"

	)

48 
	#NET_KAODV_QUEUE_QMAX
 2088

	)

49 
	#NET_KAODV_QUEUE_QMAX_NAME
 "kaodv_queue_maxÀn"

	)

51 
	skaodv_π_öfo
 {

52 
__u8
 
	mtos
;

53 
__u32
 
	mdaddr
;

54 
__u32
 
	mßddr
;

57 
	skaodv_queue_íåy
 {

58 
li°_hód
 
	mli°
;

59 
sk_buff
 *
	mskb
;

60 (*
	mok‚
Ë(
	msk_buff
 *);

61 
kaodv_π_öfo
 
	mπ_öfo
;

64 (*
	tkaodv_queue_cmp‚
Ë(
	tkaodv_queue_íåy
 *, );

66 
queue_maxÀn
 = 
KAODV_QUEUE_QMAX_DEFAULT
;

67 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,39))

68 
rwlock_t
 
queue_lock
 = 
RW_LOCK_UNLOCKED
;

70 
rwlock_t
 
queue_lock
 = 
	`__RW_LOCK_UNLOCKED
(queue_lock);

72 
queue_tŸÆ
;

73 
	`LIST_HEAD
(
queue_li°
);

75 
ölöe
 
	$__kaodv_queue_íqueue_íåy
(
kaodv_queue_íåy
 *
íåy
)

77 i‡(
queue_tŸÆ
 >
queue_maxÀn
) {

78 i‡(
	`√t_øãlimô
())

79 
	`¥ötk
(
KERN_WARNING
 "kaodv-queue: fullát %dÉntries, "

80 "dr›pögÖackë(s).\n", 
queue_tŸÆ
);

81  -
ENOSPC
;

83 
	`li°_add
(&
íåy
->
li°
, &
queue_li°
);

84 
	`¥ötk
(
KERN_ALERT
 "queuêtŸÆ i†%d\n",
queue_tŸÆ
);

85 
queue_tŸÆ
++;

87 
	}
}

93 
ölöe
 
kaodv_queue_íåy


94 *
	$__kaodv_queue_föd_íåy
(
kaodv_queue_cmp‚
 
cmp‚
, 
d©a
)

96 
li°_hód
 *
p
;

98 
	`li°_f‹_óch_¥ev
(
p
, &
queue_li°
) {

99 
kaodv_queue_íåy
 *
íåy
 = (kaodv_queue_íåy *)
p
;

101 i‡(!
cmp‚
 || 
	`cmp‚
(
íåy
, 
d©a
))

102  
íåy
;

104  
NULL
;

105 
	}
}

107 
ölöe
 
kaodv_queue_íåy


108 *
	$__kaodv_queue_föd_dequeue_íåy
(
kaodv_queue_cmp‚
 
cmp‚
, 
d©a
)

110 
kaodv_queue_íåy
 *
íåy
;

112 
íåy
 = 
	`__kaodv_queue_föd_íåy
(
cmp‚
, 
d©a
);

113 i‡(
íåy
 =
NULL
)

114  
NULL
;

116 
	`li°_dñ
(&
íåy
->
li°
);

117 
queue_tŸÆ
--;

119  
íåy
;

120 
	}
}

122 
ölöe
 
	$__kaodv_queue_Êush
()

124 
kaodv_queue_íåy
 *
íåy
;

126 (
íåy
 = 
	`__kaodv_queue_föd_dequeue_íåy
(
NULL
, 0))) {

127 
	`k‰ì_skb
(
íåy
->
skb
);

128 
	`k‰ì
(
íåy
);

130 
	}
}

132 
ölöe
 
	$__kaodv_queue_ª£t
()

134 
	`__kaodv_queue_Êush
();

135 
	}
}

137 
kaodv_queue_íåy


138 *
	$kaodv_queue_föd_dequeue_íåy
(
kaodv_queue_cmp‚
 
cmp‚
, 
d©a
)

140 
kaodv_queue_íåy
 *
íåy
;

142 
	`wrôe_lock_bh
(&
queue_lock
);

143 
íåy
 = 
	`__kaodv_queue_föd_dequeue_íåy
(
cmp‚
, 
d©a
);

144 
	`wrôe_u∆ock_bh
(&
queue_lock
);

145  
íåy
;

146 
	}
}

148 
	$kaodv_queue_Êush
()

150 
	`wrôe_lock_bh
(&
queue_lock
);

151 
	`__kaodv_queue_Êush
();

152 
	`wrôe_u∆ock_bh
(&
queue_lock
);

153 
	}
}

156 
kaodv_queue_íqueue_∑ckë
(
sk_buff
 *
skb
, (*
ok‚
) (sk_buff *))

158 
°©us
 = -
EINVAL
;

159 
kaodv_queue_íåy
 *
íåy
;

160 
ùhdr
 *
ùh
 = 
	`SKB_NETWORK_HDR_IPH
(
skb
);

162 
íåy
 = 
	`kmÆloc
((*íåy), 
GFP_ATOMIC
);

164 i‡(
íåy
 =
NULL
) {

165 
	`¥ötk
(
KERN_ERR


167  -
ENOMEM
;

171 
íåy
->
ok‚
 = okfn;

172 
íåy
->
skb
 = skb;

173 
íåy
->
π_öfo
.
tos
 = 
ùh
->tos;

174 
íåy
->
π_öfo
.
daddr
 = 
ùh
->daddr;

175 
íåy
->
π_öfo
.
ßddr
 = 
ùh
->saddr;

177 
	`wrôe_lock_bh
(&
queue_lock
);

179 
°©us
 = 
	`__kaodv_queue_íqueue_íåy
(
íåy
);

181 i‡(
°©us
 < 0)

182 
îr_out_u∆ock
;

184 
	`wrôe_u∆ock_bh
(&
queue_lock
);

185  
°©us
;

187 
îr_out_u∆ock
:

188 
	`wrôe_u∆ock_bh
(&
queue_lock
);

189 
	`k‰ì
(
íåy
);

191  
°©us
;

192 
	}
}

194 
ölöe
 
	$de°_cmp
(
kaodv_queue_íåy
 *
e
, 
daddr
)

196  (
daddr
 =
e
->
π_öfo
.daddr);

197 
	}
}

199 
	$kaodv_queue_föd
(
__u32
 
daddr
)

201 
kaodv_queue_íåy
 *
íåy
;

202 
ªs
 = 0;

204 
	`ªad_lock_bh
(&
queue_lock
);

205 
íåy
 = 
	`__kaodv_queue_föd_íåy
(
de°_cmp
, 
daddr
);

206 i‡(
íåy
 !
NULL
)

207 
ªs
 = 1;

209 
	`ªad_u∆ock_bh
(&
queue_lock
);

210  
ªs
;

211 
	}
}

213 
	$kaodv_queue_£t_vîdi˘
(
vîdi˘
, 
__u32
 
daddr
)

215 
kaodv_queue_íåy
 *
íåy
;

216 
pkts
 = 0;

218 i‡(
vîdi˘
 =
KAODV_QUEUE_DROP
) {

221 
íåy
 = 
	`kaodv_queue_föd_dequeue_íåy
(
de°_cmp
, 
daddr
);

223 i‡(
íåy
 =
NULL
)

224  
pkts
;

228 i‡(
pkts
 == 0)

229 
	`icmp_£nd
(
íåy
->
skb
, 
ICMP_DEST_UNREACH
,

230 
ICMP_HOST_UNREACH
, 0);

232 
	`k‰ì_skb
(
íåy
->
skb
);

233 
	`k‰ì
(
íåy
);

234 
pkts
++;

236 } i‡(
vîdi˘
 =
KAODV_QUEUE_SEND
) {

237 
ex∂_íåy
 
e
;

240 
íåy
 = 
	`kaodv_queue_föd_dequeue_íåy
(
de°_cmp
, 
daddr
);

242 i‡(
íåy
 =
NULL
)

243  
pkts
;

245 i‡(!
	`kaodv_ex∂_gë
(
daddr
, &
e
)) {

246 
	`k‰ì_skb
(
íåy
->
skb
);

247 
√xt
;

249 i‡(
e
.
Êags
 & 
KAODV_RT_GW_ENCAP
) {

251 
íåy
->
skb
 = 
	`ù_pkt_íˇpsuœã
”¡ry->skb, 
e
.
nh›
);

252 i‡(!
íåy
->
skb
)

253 
√xt
;

255 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,18))

256 
	`ù_rouã_me_h¨dî
(&
íåy
->
skb
);

257 #ñi‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,24))

258 
	`ù_rouã_me_h¨dî
(&
íåy
->
skb
, 
RTN_LOCAL
);

260 
	`ù_rouã_me_h¨dî
(
íåy
->
skb
, 
RTN_LOCAL
);

262 
pkts
++;

265 
íåy
->
	`ok‚
”¡ry->
skb
);

266 
√xt
:

267 
	`k‰ì
(
íåy
);

271 
	}
}

273 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,24))

274 
	$kaodv_queue_gë_öfo
(*
buf„r
, **
°¨t
, 
off_t
 
off£t
, 
Àngth
)

276 
Àn
;

278 
	`ªad_lock_bh
(&
queue_lock
);

280 
Àn
 = 
	`•rötf
(
buf„r
,

282 "Queuêmax.Üígth : %u\n", 
queue_tŸÆ
, 
queue_maxÀn
);

284 
	`ªad_u∆ock_bh
(&
queue_lock
);

286 *
°¨t
 = 
buf„r
 + 
off£t
;

287 
Àn
 -
off£t
;

288 i‡(
Àn
 > 
Àngth
)

289 
Àn
 = 
Àngth
;

290 i‡(
Àn
 < 0)

291 
Àn
 = 0;

292  
Àn
;

293 
	}
}

295 
	$kaodv_queue_gë_öfo
(*
∑ge
, **
°¨t
, 
off_t
 
off
, 
cou¡
,

296 *
eof
, *
d©a
)

298 
Àn
;

300 
	`ªad_lock_bh
(&
queue_lock
);

302 
Àn
 = 
	`•rötf
(
∑ge
,

304 "Queuêmax.Üígth : %u\n", 
queue_tŸÆ
, 
queue_maxÀn
);

306 
	`ªad_u∆ock_bh
(&
queue_lock
);

308 *
°¨t
 = 
∑ge
 + 
off
;

309 
Àn
 -
off
;

310 i‡(
Àn
 > 
cou¡
)

311 
Àn
 = 
cou¡
;

312 i‡(
Àn
 < 0)

313 
Àn
 = 0;

314  
Àn
;

315 
	}
}

318 
	$öô_‹_˛ónup
(
öô
)

320 
°©us
 = -
ENOMEM
;

321 
¥oc_dú_íåy
 *
¥oc
;

323 i‡(!
öô
)

324 
˛ónup
;

326 
queue_tŸÆ
 = 0;

328 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,24))

329 
¥oc
 = 
	`¥oc_√t_¸óã
(
KAODV_QUEUE_PROC_FS_NAME
, 0, 
kaodv_queue_gë_öfo
);

330 #ñi‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3,12,17))

331 
¥oc
 = 
	`¸óã_¥oc_ªad_íåy
(
KAODV_QUEUE_PROC_FS_NAME
, 0,

332 
öô_√t
.
¥oc_√t
, 
kaodv_queue_gë_öfo
, 
NULL
);

334 
¥oc
 = 
	`¥oc_¸óã_d©a
(
KAODV_QUEUE_PROC_FS_NAME
, 0,

335 
öô_√t
.
¥oc_√t
,(
fûe_›î©i⁄s
*)
kaodv_queue_gë_öfo


336 ,
NULL
);

338 i‡(!
¥oc
) {

339 
	`¥ötk
(
KERN_ERR
 "kaodv_queue: failedÅo createÖrocÉntry\n");

343 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,30))

344 
¥oc
->
ow√r
 = 
THIS_MODULE
;

349 
˛ónup
:

350 #ifde‡
KERNEL26


351 
	`synchr⁄ize_√t
();

353 
	`kaodv_queue_Êush
();

354 
	`¥ötk
(
KERN_ERR
 "kaodv_queue_Êush queue_tŸÆ i†%d\n",
queue_tŸÆ
);

356 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,24))

357 
	`¥oc_√t_ªmove
(
KAODV_QUEUE_PROC_FS_NAME
);

358 #ñi‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3,12,17))

359 
	`¥oc_√t_ªmove
(&
öô_√t
, 
KAODV_QUEUE_PROC_FS_NAME
);

361 
	`ªmove_¥oc_íåy
(
KAODV_QUEUE_PROC_FS_NAME
,
öô_√t
.
¥oc_√t
);

363  
°©us
;

364 
	}
}

366 
	$kaodv_queue_öô
()

369  
	`öô_‹_˛ónup
(1);

370 
	}
}

372 
	$kaodv_queue_föi
()

374 
	`öô_‹_˛ónup
(0);

375 
	}
}

	@lnx/kaodv-queue.h

22 #i‚de‡
_KAODV_QUEUE_H


23 
	#_KAODV_QUEUE_H


	)

25 
	#KAODV_QUEUE_DROP
 1

	)

26 
	#KAODV_QUEUE_SEND
 2

	)

28 
kaodv_queue_föd
(
__u32
 
daddr
);

29 
kaodv_queue_íqueue_∑ckë
(
sk_buff
 *
skb
,

30 (*
ok‚
Ë(
sk_buff
 *));

31 
	`kaodv_queue_£t_vîdi˘
(
vîdi˘
, 
__u32
 
daddr
);

32 
	`kaodv_queue_Êush
();

33 
	`kaodv_queue_öô
();

34 
	`kaodv_queue_föi
();

	@lnx/kaodv.h

22 #i‚de‡
_KAODV_H


23 
	#_KAODV_H


	)

25 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,22))

26 
	#SKB_TAIL_PTR
(
skb
Ëskb->
èû


	)

27 
	#SKB_NETWORK_HDR_RAW
(
skb
Ëskb->
nh
.
øw


	)

28 
	#SKB_NETWORK_HDR_RIPH
(
skb
Ëskb->
nh
.
ùh


	)

29 
	#SKB_MAC_HDR_RAW
(
skb
Ëskb->
mac
.
øw


	)

30 
	#SKB_SET_NETWORK_HDR
(
skb
, 
off£t
Ë(skb->
nh
.
øw
 = (skb->
d©a
 + (off£t)))

	)

32 
	#SKB_TAIL_PTR
(
skb
Ë
	`skb_èû_poöãr
(skb)

	)

33 
	#SKB_NETWORK_HDR_RAW
(
skb
Ë
	`skb_√tw‹k_hódî
(skb)

	)

34 
	#SKB_NETWORK_HDR_IPH
(
skb
Ë((
ùhdr
 *)
	`skb_√tw‹k_hódî
(skb))

	)

35 
	#SKB_MAC_HDR_RAW
(
skb
Ë
	`skb_mac_hódî
(skb)

	)

36 
	#SKB_SET_NETWORK_HDR
(
skb
, 
off£t
Ë
	`skb_£t_√tw‹k_hódî
(skb, off£t)

	)

39 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,31))

40 
ölöe
 
d°_íåy
 *
	$skb_d°
(c⁄° 
sk_buff
 *
skb
)

42  (
d°_íåy
 *)
skb
->
d°
;

43 
	}
}

45 
ölöe
 
	$skb_d°_£t
(
sk_buff
 *
skb
, 
d°_íåy
 *
d°
)

47 
skb
->
d°
 = dst;

48 
	}
}

53 
	#AODV_PORT
 654

	)

	@locality.c

22 #ifde‡
NS_PORT


23 
	~"ns-2/aodv-uu.h
"

25 
	~<√tdb.h
>

26 
h_î∫o
;

28 
	~"loˇlôy.h
"

29 
	~"defs.h
"

30 
	~"debug.h
"

32 
gw_¥efix
;

36 
NS_CLASS
 
	$loˇlôy
(
ö_addr
 
de°
, 
ifödex
)

39 #i‚de‡
NS_PORT


40 i‡(
gw_¥efix
) {

41 i‡((
de°
.
s_addr
 & 
	`DEV_IFINDEX
(
ifödex
).
√tmask
.s_addr) ==

42 (
	`DEV_IFINDEX
(
ifödex
).
ùaddr
.
s_addr
 & DEV_IFINDEX(ifödex).
√tmask
.

43 
s_addr
))

44  
HOST_ADHOC
;

46  
HOST_INET
;

49 
ho°ít
 *
hít
;

51 
hít
 = 
	`gëho°byaddr
(&
de°
, (
ö_addr
), 
AF_INET
);

53 i‡(!
hít
) {

54 
h_î∫o
) {

55 
HOST_NOT_FOUND
:

56 
	`DEBUG
(
LOG_DEBUG
, 0, "RREQ for Non-Internet dest %s",

57 
	`ù_to_°r
(
de°
));

58  
HOST_UNKNOWN
;

60 
	`DEBUG
(
LOG_DEBUG
, 0, "Unknown DNSÉrror");

65  
HOST_INET
;

68 *
d°√t
 = 
Addªss
::
	`ö°™˚
().
	`gë_sub√èddr
(
de°
.
s_addr
);

69 *
sub√t
 =

70 
Addªss
::
	`ö°™˚
().
	`gë_sub√èddr
(
	`DEV_NR
(
NS_DEV_NR
).
ùaddr
.
s_addr
);

71 
	`DEBUG
(
LOG_DEBUG
, 0, "myaddr=%d, dest=%d dstnet=%s subnet=%s",

72 
	`DEV_NR
(
NS_DEV_NR
).
ùaddr
.
s_addr
, 
de°
.s_addr, 
d°√t
, 
sub√t
);

73 i‡(
sub√t
 !
NULL
) {

74 i‡(
d°√t
 !
NULL
) {

75 i‡(
	`°rcmp
(
d°√t
, 
sub√t
) != 0) {

76 
dñëe
[]
d°√t
;

77  
HOST_INET
;

79 
dñëe
[]
d°√t
;

81 
dñëe
[]
sub√t
;

83 
	`as£π
(
d°√t
 =
NULL
);

84  
HOST_UNKNOWN
;

86  
HOST_UNKNOWN
;

87 
	}
}

	@locality.h

22 #i‚de‡
_LOCALITY_H


23 
	#_LOCALITY_H


	)

25 #i‚de‡
NS_NO_GLOBALS


28 
	mHOST_ADHOC
,

29 
	mHOST_INET
,

30 
	mHOST_UNKNOWN


34 #i‚de‡
NS_NO_DECLARATIONS


35 
loˇlôy
(
ö_addr
 
de°
, 
ifödex
);

	@main.c

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<uni°d.h
>

25 
	~<î∫o.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sys/sockë.h
>

28 
	~<sys/°©.h
>

29 
	~<löux/sockios.h
>

30 
	~<löux/if.h
>

31 
	~<löux/wúñess.h
>

32 
	~<gë›t.h
>

33 
	~<˘y≥.h
>

35 
	~"defs.h
"

36 
	~"debug.h
"

37 
	~"timî_queue.h
"

38 
	~"∑øms.h
"

39 
	~"aodv_sockë.h
"

40 
	~"aodv_timeout.h
"

41 
	~"routög_èbÀ.h
"

42 
	~"aodv_hñlo.h
"

43 
	~"∆.h
"

45 #ifde‡
LLFEEDBACK


46 
	~"Œf.h
"

50 
	glog_to_fûe
 = 0;

51 
	gπ_log_öãrvÆ
 = 0;

52 
	gunidú_hack
 = 0;

53 
	gºeq_gøtuôous
 = 0;

54 
	gex∑ndög_rög_£¨ch
 = 1;

55 
	göã∫ë_gw_mode
 = 0;

56 
	gloˇl_ª∑ú
 = 0;

57 
	gª˚ive_n_hñlos
 = 0;

58 
	ghñlo_jôãrög
 = 1;

59 
	g›timized_hñlos
 = 0;

60 
	gøãlimô
 = 1;

61 *
	g¥og«me
;

62 
	gwaô_⁄_ªboŸ
 = 1;

63 
	gquÆ_thªshﬁd
 = 0;

64 
	gŒ„edback
 = 0;

65 
	ggw_¥efix
 = 1;

66 
timî
 
	gw‹b_timî
;

69 
	ga˘ive_rouã_timeout
 = 
ACTIVE_ROUTE_TIMEOUT_HELLO
;

70 
	gâl_°¨t
 = 
TTL_START_HELLO
;

71 
	gdñëe_≥riod
 = 
DELETE_PERIOD_HELLO
;

73 
˛ónup
();

75 
›ti⁄
 
	gl⁄g›ts
[] = {

76 {"öãrÁ˚", 
ªquúed_¨gumít
, 
NULL
, 'i'},

77 {"hñlo-jôãr", 
no_¨gumít
, 
NULL
, 'j'},

78 {"log", 
no_¨gumít
, 
NULL
, 'l'},

79 {"n-hñlos", 
ªquúed_¨gumít
, 
NULL
, 'n'},

80 {"d´m⁄", 
no_¨gumít
, 
NULL
, 'd'},

81 {"f‹˚-gøtuôous", 
no_¨gumít
, 
NULL
, 'g'},

82 {"›t-hñlos", 
no_¨gumít
, 
NULL
, 'o'},

83 {"quÆôy-thªshﬁd", 
ªquúed_¨gumít
, 
NULL
, 'q'},

84 {"log-π-èbÀ", 
ªquúed_¨gumít
, 
NULL
, 'r'},

85 {"unidú_hack", 
no_¨gumít
, 
NULL
, 'u'},

86 {"g©eway-mode", 
no_¨gumít
, 
NULL
, 'w'},

87 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

88 {"no-ex∑ndög-rög", 
no_¨gumít
, 
NULL
, 'x'},

89 {"no-w‹b", 
no_¨gumít
, 
NULL
, 'D'},

90 {"loˇl-ª∑ú", 
no_¨gumít
, 
NULL
, 'L'},

91 {"øã-limô", 
no_¨gumít
, 
NULL
, 'R'},

92 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

93 {"Œ„edback", 
no_¨gumít
, 
NULL
, 'f'},

97 
	$ußge
(
°©us
)

99 i‡(
°©us
 != 0) {

100 
	`Ârötf
(
°dîr
, "Try `%†--hñp' f‹ m‹êöf‹m©i⁄.\n", 
¥og«me
);

101 
	`exô
(
°©us
);

104 
¥ötf


126 
¥og«me
, 
AODV_LOG_PATH
, 
AODV_RT_LOG_PATH
);

128 
	`exô
(
°©us
);

129 
	}
}

131 
	$£t_kî√l_›ti⁄s
()

133 
i
, 
fd
 = -1;

134 
⁄
 = '1';

135 
off
 = '0';

136 
comm™d
[64];

138 i‡((
fd
 = 
	`›í
("/¥oc/sys/√t/ùv4/ù_f‹w¨d", 
O_WRONLY
)) < 0)

140 i‡(
	`wrôe
(
fd
, &
⁄
, ()) < 0)

142 
	`˛o£
(
fd
);

162 
i
 = 0; i < 
MAX_NR_INTERFACES
; i++) {

163 i‡(!
	`DEV_NR
(
i
).
íabÀd
)

166 
	`mem£t
(
comm™d
, '\0', 64);

167 
	`•rötf
(
comm™d
, "/proc/sys/net/ipv4/conf/%s/send_redirects",

168 
	`DEV_NR
(
i
).
i‚ame
);

169 i‡((
fd
 = 
	`›í
(
comm™d
, 
O_WRONLY
)) < 0)

171 i‡(
	`wrôe
(
fd
, &
off
, ()) < 0)

173 
	`˛o£
(
fd
);

174 
	`mem£t
(
comm™d
, '\0', 64);

175 
	`•rötf
(
comm™d
, "/proc/sys/net/ipv4/conf/%s/accept_redirects",

176 
	`DEV_NR
(
i
).
i‚ame
);

177 i‡((
fd
 = 
	`›í
(
comm™d
, 
O_WRONLY
)) < 0)

179 i‡(
	`wrôe
(
fd
, &
off
, ()) < 0)

181 
	`˛o£
(
fd
);

183 
	`mem£t
(
comm™d
, '\0', 64);

184 
	`•rötf
(
comm™d
, "/proc/sys/net/ipv4/conf/all/send_redirects");

185 i‡((
fd
 = 
	`›í
(
comm™d
, 
O_WRONLY
)) < 0)

187 i‡(
	`wrôe
(
fd
, &
off
, ()) < 0)

189 
	`˛o£
(
fd
);

192 
	`mem£t
(
comm™d
, '\0', 64);

193 
	`•rötf
(
comm™d
, "/proc/sys/net/ipv4/conf/all/accept_redirects");

194 i‡((
fd
 = 
	`›í
(
comm™d
, 
O_WRONLY
)) < 0)

196 i‡(
	`wrôe
(
fd
, &
off
, ()) < 0)

198 
	`˛o£
(
fd
);

201 
	}
}

203 
	$föd_deÁu…_gw
()

205 
FILE
 *
rouã
;

206 
buf
[100], *
l
;

208 
rouã
 = 
	`f›í
("/proc/net/route", "r");

210 i‡(
rouã
 =
NULL
) {

211 
	`≥º‹
("open /proc/net/route");

212 
	`exô
(-1);

215 
	`fgës
(
buf
, (buf), 
rouã
)) {

216 
l
 = 
	`°πok
(
buf
, " \t");

217 
l
 = 
	`°πok
(
NULL
, " \t");

218 i‡(
l
 !
NULL
) {

219 i‡(
	`°rcmp
("00000000", 
l
) == 0) {

220 
l
 = 
	`°πok
(
NULL
, " \t");

221 
l
 = 
	`°πok
(
NULL
, " \t");

222 i‡(
	`°rcmp
("0003", 
l
) == 0) {

223 
	`f˛o£
(
rouã
);

229 
	`f˛o£
(
rouã
);

231 
	}
}

236 
sockaddr_ö
 *
	$gë_if_öfo
(*
i‚ame
, 
ty≥
)

238 
skfd
;

239 
sockaddr_ö
 *
öa
;

240 
i‰eq
 
i‰
;

243 
skfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

245 
	`°r˝y
(
i‰
.
i‰_«me
, 
i‚ame
);

246 i‡(
	`io˘l
(
skfd
, 
ty≥
, &
i‰
) < 0) {

247 
	`Æog
(
LOG_ERR
, 
î∫o
, 
__FUNCTION__
,

248 "CouldÇŸ gëáddªs†o‡%†", 
i‚ame
);

249 
	`˛o£
(
skfd
);

250  
NULL
;

252 
öa
 = (
sockaddr_ö
 *Ë&
i‰
.
i‰_addr
;

253 
	`˛o£
(
skfd
);

254  
öa
;

256 
	}
}

260 
	#CALLBACK_FUNCS
 5

	)

261 
	sˇŒback
 {

262 
	mfd
;

263 
ˇŒback_func_t
 
	mfunc
;

264 } 
	gˇŒbacks
[
CALLBACK_FUNCS
];

266 
	gƒ_ˇŒbacks
 = 0;

268 
	$©èch_ˇŒback_func
(
fd
, 
ˇŒback_func_t
 
func
)

270 i‡(
ƒ_ˇŒbacks
 >
CALLBACK_FUNCS
) {

271 
	`Ârötf
(
°dîr
, "callbackáttachÜimitÑeached!!\n");

272 
	`exô
(-1);

274 
ˇŒbacks
[
ƒ_ˇŒbacks
].
fd
 = fd;

275 
ˇŒbacks
[
ƒ_ˇŒbacks
].
func
 = func;

276 
ƒ_ˇŒbacks
++;

278 
	}
}

284 
	$lﬂd_moduÀs
(*
i‚ame
)

286 
°©
 
°
;

287 
buf
[1024], *
l
 = 
NULL
;

288 
found
 = 0;

289 
FILE
 *
m
;

291 
	`mem£t
(
buf
, '\0', 64);

293 i‡(
	`°©
("./kaodv.ko", &
°
) == 0)

294 
	`•rötf
(
buf
, "/sbö/ösmod kaodv.kÿi‚ame=%†&>/dev/nuŒ", 
i‚ame
);

295 i‡(
	`°©
("./kaodv.o", &
°
) == 0)

296 
	`•rötf
(
buf
, "/sbö/ösmod kaodv.ÿi‚ame=%†&>/dev/nuŒ", 
i‚ame
);

298 
	`•rötf
(
buf
, "/sbö/mod¥obêkaodv i‚ame=%†&>/dev/nuŒ", 
i‚ame
);

300 i‡(
	`sy°em
(
buf
) == -1) {

301 
	`Ârötf
(
°dîr
, "CouldÇotÜoad kaodv module\n");

302 
	`exô
(-1);

305 
	`u¶ìp
(100000);

308 
m
 = 
	`f›í
("/proc/modules", "r");

309 
	`fgës
(
buf
, (buf), 
m
)) {

310 
l
 = 
	`°πok
(
buf
, " \t");

311 i‡(!
	`°rcmp
(
l
, "kaodv"))

312 
found
++;

313 i‡(!
	`°rcmp
(
l
, "ipchains")) {

314 
	`Ârötf
(
°dîr
,

316 
	`exô
(-1);

319 
	`f˛o£
(
m
);

321 i‡(
found
 < 1) {

322 
	`Ârötf
(
°dîr
,

324 
found
);

325 
	`exô
(-1);

327 
	}
}

329 
	$ªmove_moduÀs
()

331 
ªt
;

333 
ªt
 = 
	`sy°em
("/sbin/rmmod kaodv &>/dev/null");

335 i‡(
ªt
 != 0) {

336 
	`Ârötf
(
°dîr
, "CouldÇotÑemove kernel module kaodv\n");

338 
	}
}

340 
	$ho°_öô
(*
i‚ame
)

342 
sockaddr_ö
 *
öa
;

343 
buf
[1024], 
tmp_i‚ame
[
IFNAMSIZ
],

344 
i‚ames
[(
IFNAMSIZ
 + 1Ë* 
MAX_NR_INTERFACES
], *
iÁ˚
;

345 
ifc⁄f
 
ifc
;

346 
i‰eq
 i‰eq, *
i‰
;

347 
i
, 
iw_sock
, 
if_sock
 = 0;

349 
	`mem£t
(&
this_ho°
, 0, (
ho°_öfo
));

350 
	`mem£t
(
dev_ödi˚s
, 0, (Ë* 
MAX_NR_INTERFACES
);

352 i‡(!
i‚ame
) {

354 
iw_sock
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

355 
ifc
.
ifc_Àn
 = (
buf
);

356 
ifc
.
ifc_buf
 = 
buf
;

357 i‡(
	`io˘l
(
iw_sock
, 
SIOCGIFCONF
, &
ifc
) < 0) {

358 
	`Ârötf
(
°dîr
, "CouldÇot get wireless info\n");

359 
	`exô
(-1);

361 
i‰
 = 
ifc
.
ifc_ªq
;

362 
i
 = 
ifc
.
ifc_Àn
 / (
i‰eq
); i >0; i--, 
i‰
++) {

363 
iwªq
 
ªq
;

365 
	`°r˝y
(
ªq
.
i‰_«me
, 
i‰
->ifr_name);

366 i‡(
	`io˘l
(
iw_sock
, 
SIOCGIWNAME
, &
ªq
) >= 0) {

367 
	`°r˝y
(
tmp_i‚ame
, 
i‰
->
i‰_«me
);

372 i‡(!
	`°æí
(
tmp_i‚ame
)) {

373 
	`Ârötf
(
°dîr
, "\nCouldÇot findá wireless interface!\n");

374 
	`Ârötf
(
°dîr
, "Use -i <interface>Åo override...\n\n");

375 
	`exô
(-1);

377 
	`°r˝y
(
i‰eq
.
i‰_«me
, 
tmp_i‚ame
);

378 i‡(
	`io˘l
(
iw_sock
, 
SIOCGIFINDEX
, &
i‰eq
) < 0) {

379 
	`Æog
(
LOG_ERR
, 
î∫o
, 
__FUNCTION__
,

380 "CouldÇŸ gë index o‡%s", 
tmp_i‚ame
);

381 
	`˛o£
(
if_sock
);

382 
	`exô
(-1);

384 
	`˛o£
(
iw_sock
);

386 
i‚ame
 = 
tmp_i‚ame
;

388 
	`Æog
(
LOG_NOTICE
, 0, 
__FUNCTION__
,

389 "AâachögÅÿ%s, ovîridêwôh -ò<if1,if2,...>.", 
tmp_i‚ame
);

392 
	`°r˝y
(
i‚ames
, 
i‚ame
);

395 
this_ho°
.
£qno
 = 1;

396 
this_ho°
.
ºeq_id
 = 0;

399 
this_ho°
.
nif
 = 0;

401 
	`gëtimeofday
(&
this_ho°
.
bˇ°_time
, 
NULL
);

404 
if_sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

406 
iÁ˚
 = 
	`°πok
(
i‚ame
, ",");

410 
	`°r˝y
(
i‰eq
.
i‰_«me
, 
iÁ˚
);

411 i‡(
	`io˘l
(
if_sock
, 
SIOCGIFINDEX
, &
i‰eq
) < 0) {

412 
	`Æog
(
LOG_ERR
, 
î∫o
, 
__FUNCTION__
, "CouldÇot get index of %s",

413 
iÁ˚
);

414 
	`˛o£
(
if_sock
);

415 
	`exô
(-1);

417 
this_ho°
.
devs
[this_ho°.
nif
].
ifödex
 = 
i‰eq
.
i‰_ifödex
;

419 
dev_ödi˚s
[
this_ho°
.
nif
++] = 
i‰eq
.
i‰_ifödex
;

421 
	`°r˝y
(
	`DEV_IFINDEX
(
i‰eq
.
i‰_ifödex
).
i‚ame
, 
iÁ˚
);

424 
öa
 = 
	`gë_if_öfo
(
iÁ˚
, 
SIOCGIFADDR
);

426 i‡(
öa
 =
NULL
)

427 
	`exô
(-1);

429 
	`DEV_IFINDEX
(
i‰eq
.
i‰_ifödex
).
ùaddr
 = 
öa
->
sö_addr
;

432 
öa
 = 
	`gë_if_öfo
(
iÁ˚
, 
SIOCGIFNETMASK
);

434 i‡(
öa
 =
NULL
)

435 
	`exô
(-1);

437 
	`DEV_IFINDEX
(
i‰eq
.
i‰_ifödex
).
√tmask
 = 
öa
->
sö_addr
;

439 
öa
 = 
	`gë_if_öfo
(
iÁ˚
, 
SIOCGIFBRDADDR
);

441 i‡(
öa
 =
NULL
)

442 
	`exô
(-1);

444 
	`DEV_IFINDEX
(
i‰eq
.
i‰_ifödex
).
brﬂdˇ°
 = 
öa
->
sö_addr
;

446 
	`DEV_IFINDEX
(
i‰eq
.
i‰_ifödex
).
íabÀd
 = 1;

448 i‡(
this_ho°
.
nif
 >
MAX_NR_INTERFACES
)

451 } (
iÁ˚
 = 
	`°πok
(
NULL
, ",")));

453 
	`˛o£
(
if_sock
);

456 
	`lﬂd_moduÀs
(
i‚ames
);

459 i‡(
	`£t_kî√l_›ti⁄s
() < 0) {

460 
	`Ârötf
(
°dîr
, "CouldÇot set kernel options!\n");

461 
	`exô
(-1);

463 
	}
}

466 
	$sig«l_h™dÀr
(
ty≥
)

469 
ty≥
) {

470 
SIGSEGV
:

471 
	`Æog
(
LOG_ERR
, 0, 
__FUNCTION__
, "SEGMENTATION FAULT!!!! Exiting!!! "

473 
SIGINT
:

474 
SIGHUP
:

475 
SIGTERM
:

477 
	`exô
(0);

479 
	}
}

481 
	$maö
(
¨gc
, **
¨gv
)

483 *
i‚ame
 = 
NULL
;

484 
fd_£t
 
rfds
, 
ªadîs
;

485 
n
, 
nfds
 = 0, 
i
;

486 
d´m⁄ize
 = 0;

487 
timevÆ
 *
timeout
;

488 
time•ec
 
timeout_•ec
;

489 
siga˘i⁄
 
siga˘
;

490 
sig£t_t
 
mask
, 
‹igmask
;

491 
	`sigem±y£t
(&
mask
);

494 
¥og«me
 = 
	`°ºchr
(
¨gv
[0], '/');

496 i‡(
¥og«me
)

497 
¥og«me
++;

499 
¥og«me
 = 
¨gv
[0];

502 
debug
 = 1;

504 
	`mem£t
 (&
siga˘
, 0, (
siga˘i⁄
));

505 
siga˘
.
ß_h™dÀr
 = 
sig«l_h™dÀr
;

508 
	`siga˘i⁄
(
SIGTERM
, &
siga˘
, 0);

509 
	`siga˘i⁄
(
SIGHUP
, &
siga˘
, 0);

510 
	`siga˘i⁄
(
SIGINT
, &
siga˘
, 0);

512 
	`sigadd£t
(&
mask
, 
SIGTERM
);

513 
	`sigadd£t
(&
mask
, 
SIGHUP
);

514 
	`sigadd£t
(&
mask
, 
SIGINT
);

516 #i‚de‡
DEBUG


517 
	`sigadd£t
(&
mask
, 
SIGSEGV
);

522 
	`sig¥ocmask
(
SIG_BLOCK
, &
mask
, &
‹igmask
);

526 
›t
;

528 
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "i:fj :dghoq:r:s:uwxDLRV", 
l⁄g›ts
, 0);

530 i‡(
›t
 =
EOF
)

533 
›t
) {

537 
debug
 = 0;

538 
d´m⁄ize
 = 1;

541 
Œ„edback
 = 1;

542 
a˘ive_rouã_timeout
 = 
ACTIVE_ROUTE_TIMEOUT_LLF
;

545 
ºeq_gøtuôous
 = !rreq_gratuitous;

548 
i‚ame
 = 
›èrg
;

551 
hñlo_jôãrög
 = !hello_jittering;

554 
log_to_fûe
 = !log_to_file;

557 i‡(
›èrg
 && 
	`isdigô
(*optarg)) {

558 
ª˚ive_n_hñlos
 = 
	`©oi
(
›èrg
);

559 i‡(
ª˚ive_n_hñlos
 < 2) {

560 
	`Ârötf
(
°dîr
, "-n should beátÜeast 2!\n");

561 
	`exô
(-1);

566 
›timized_hñlos
 = !optimized_hellos;

569 i‡(
›èrg
 && 
	`isdigô
(*optarg))

570 
quÆ_thªshﬁd
 = 
	`©oi
(
›èrg
);

573 i‡(
›èrg
 && 
	`isdigô
(*optarg))

574 
π_log_öãrvÆ
 = 
	`©of
(
›èrg
) * 1000;

577 
unidú_hack
 = !unidir_hack;

580 
öã∫ë_gw_mode
 = !internet_gw_mode;

583 
ex∑ndög_rög_£¨ch
 = !expanding_ring_search;

586 
loˇl_ª∑ú
 = !local_repair;

589 
waô_⁄_ªboŸ
 = !wait_on_reboot;

592 
øãlimô
 = !ratelimit;

595 
¥ötf


597 
AODV_UU_VERSION
, 
DRAFT_VERSION
);

598 
	`exô
(0);

602 
	`exô
(0);

604 
	`ußge
(0);

608 i‡(
	`gëeuid
() != 0) {

609 
	`Ârötf
(
°dîr
, "must beÑoot\n");

610 
	`exô
(1);

614 i‡(
d´m⁄ize
) {

615 i‡(
	`f‹k
() != 0)

616 
	`exô
(0);

619 
	`˛o£
(1);

620 
	`˛o£
(2);

621 
	`£tsid
();

624 
	`©exô
((*Ë&
˛ónup
);

627 
	`π_èbÀ_öô
();

628 
	`log_öô
();

630 
	`ho°_öô
(
i‚ame
);

632 
	`∆_öô
();

633 
	`∆_£nd_c⁄f_msg
();

634 
	`aodv_sockë_öô
();

635 #ifde‡
LLFEEDBACK


636 i‡(
Œ„edback
) {

637 
	`Œf_öô
();

642 
	`FD_ZERO
(&
ªadîs
);

643 
i
 = 0; i < 
ƒ_ˇŒbacks
; i++) {

644 
	`FD_SET
(
ˇŒbacks
[
i
].
fd
, &
ªadîs
);

645 i‡(
ˇŒbacks
[
i
].
fd
 >
nfds
)

646 
nfds
 = 
ˇŒbacks
[
i
].
fd
 + 1;

650 i‡(
waô_⁄_ªboŸ
) {

651 
	`timî_öô
(&
w‹b_timî
, 
waô_⁄_ªboŸ_timeout
, &
waô_⁄_ªboŸ
);

652 
	`timî_£t_timeout
(&
w‹b_timî
, 
DELETE_PERIOD
);

653 
	`Æog
(
LOG_NOTICE
, 0, 
__FUNCTION__
,

655 
DELETE_PERIOD
);

659 i‡(!
›timized_hñlos
 && !
Œ„edback
)

660 
	`hñlo_°¨t
();

662 i‡(
π_log_öãrvÆ
)

663 
	`log_π_èbÀ_öô
();

666 
	`mem˝y
((*Ë&
rfds
, (*Ë&
ªadîs
, (rfds));

668 
timeout
 = 
	`timî_age_queue
();

670 
timeout_•ec
.
tv_£c
 = 
timeout
->tv_sec;

671 
timeout_•ec
.
tv_n£c
 = 
timeout
->
tv_u£c
 * 1000;

673 i‡((
n
 = 
	`p£À˘
(
nfds
, &
rfds
, 
NULL
, NULL, &
timeout_•ec
, &
‹igmask
)) < 0) {

674 i‡(
î∫o
 !
EINTR
)

675 
	`Æog
(
LOG_WARNING
, 
î∫o
, 
__FUNCTION__
,

680 i‡(
n
 > 0) {

681 
i
 = 0; i < 
ƒ_ˇŒbacks
; i++) {

682 i‡(
	`FD_ISSET
(
ˇŒbacks
[
i
].
fd
, &
rfds
)) {

685 (*
ˇŒbacks
[
i
].
func
Ë(ˇŒbacks[i].
fd
);

691 
	}
}

693 
	$˛ónup
()

695 
	`DEBUG
(
LOG_DEBUG
, 0, "CLEANING UP!");

696 
	`π_èbÀ_de°roy
();

697 
	`aodv_sockë_˛ónup
();

698 #ifde‡
LLFEEDBACK


699 i‡(
Œ„edback
)

700 
	`Œf_˛ónup
();

702 
	`log_˛ónup
();

703 
	`∆_˛ónup
();

704 
	`ªmove_moduÀs
();

705 
	}
}

	@nl.c

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<sys/time.h
>

26 
	~<uni°d.h
>

27 
	~<î∫o.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<sys/sockë.h
>

30 
	~<asm/ty≥s.h
>

31 
	~<löux/√éök.h
>

32 
	~<sys/£À˘.h
>

33 
	~<√töë/ö.h
>

34 
	~<¨∑/öë.h
>

35 
	~<löux/π√éök.h
>

37 
	~"defs.h
"

38 
	~" x/kaodv-√éök.h
"

39 
	~"debug.h
"

40 
	~"aodv_ºeq.h
"

41 
	~"aodv_timeout.h
"

42 
	~"routög_èbÀ.h
"

43 
	~"aodv_hñlo.h
"

44 
	~"∑øms.h
"

45 
	~"aodv_sockë.h
"

46 
	~"aodv_ªº.h
"

51 
	s∆sock
 {

52 
	msock
;

53 
	m£q
;

54 
sockaddr_∆
 
	mloˇl
;

57 
sockaddr_∆
 
	g≥î
 = { 
AF_NETLINK
, 0, 0, 0 };

59 
∆sock
 
	gaodv∆
;

60 
∆sock
 
	gπ∆
;

62 
∆_kaodv_ˇŒback
(
sock
);

63 
∆_π_ˇŒback
(
sock
);

65 
Œ„edback
, 
a˘ive_rouã_timeout
, 
quÆ_thªshﬁd
, 
öã∫ë_gw_mode
,

66 
waô_⁄_ªboŸ
;

67 
timî
 
w‹b_timî
;

69 
	#BUFLEN
 256

	)

73 
	$∆_öô
()

75 
°©us
;

76 
addæí
;

78 
	`mem£t
(&
≥î
, 0, (
sockaddr_∆
));

79 
≥î
.
∆_Ámûy
 = 
AF_NETLINK
;

80 
≥î
.
∆_pid
 = 0;

81 
≥î
.
∆_groups
 = 0;

83 
	`mem£t
(&
aodv∆
, 0, (
∆sock
));

84 
aodv∆
.
£q
 = 0;

85 
aodv∆
.
loˇl
.
∆_Ámûy
 = 
AF_NETLINK
;

86 
aodv∆
.
loˇl
.
∆_groups
 = 
AODVGRP_NOTIFY
;

87 
aodv∆
.
loˇl
.
∆_pid
 = 
	`gëpid
();

88 
	`DEBUG
(
LOG_DEBUG
, 0,"aodv∆.loˇl.∆_pid i†%d",
aodv∆
.
loˇl
.
∆_pid
);

92 
aodv∆
.
sock
 = 
	`sockë
(
PF_NETLINK
, 
SOCK_RAW
, 
NETLINK_AODV
);

94 i‡(
aodv∆
.
sock
 < 0) {

95 
	`≥º‹
("UnableÅo create AODVÇetlink socket");

96 
	`exô
(-1);

100 
°©us
 = 
	`böd
(
aodv∆
.
sock
, (
sockaddr
 *Ë&aodv∆.
loˇl
,

101 (
aodv∆
.
loˇl
));

103 i‡(
°©us
 == -1) {

104 
	`≥º‹
("Bind for AODVÇetlink socket failed");

105 
	`exô
(-1);

108 
addæí
 = (
aodv∆
.
loˇl
);

110 i‡(
gësock«me


111 (
aodv∆
.
sock
, (
sockaddr
 *Ë&aodv∆.
loˇl
, &
addæí
) < 0) {

112 
	`≥º‹
("Getsockname failed ");

113 
	`exô
(-1);

116 i‡(
	`©èch_ˇŒback_func
(
aodv∆
.
sock
, 
∆_kaodv_ˇŒback
) < 0) {

117 
	`Æog
(
LOG_ERR
, 0, 
__FUNCTION__
, "CouldÇotáttach callback.");

122 
	`mem£t
(&
π∆
, 0, (
∆sock
));

123 
π∆
.
£q
 = 0;

124 
π∆
.
loˇl
.
∆_Ámûy
 = 
AF_NETLINK
;

125 
π∆
.
loˇl
.
∆_groups
 =

126 
RTMGRP_NOTIFY
 | 
RTMGRP_IPV4_IFADDR
 | 
RTMGRP_IPV4_ROUTE
;

127 
π∆
.
loˇl
.
∆_pid
 = 
	`gëpid
();

129 
	`DEBUG
(
LOG_DEBUG
, 0,"π∆.loˇl.∆_pid i†%d",
π∆
.
loˇl
.
∆_pid
 );

131 
π∆
.
sock
 = 
	`sockë
(
PF_NETLINK
, 
SOCK_RAW
, 
NETLINK_ROUTE
);

133 i‡(
π∆
.
sock
 < 0) {

134 
	`≥º‹
("UnableÅo create RTÇetlink socket");

135 
	`exô
(-1);

138 
addæí
 = (
π∆
.
loˇl
);

140 
°©us
 = 
	`böd
(
π∆
.
sock
, (
sockaddr
 *Ë&π∆.
loˇl
, 
addæí
);

142 i‡(
°©us
 == -1) {

143 
	`≥º‹
("Bind for RTÇetlink socket failed");

144 
	`exô
(-1);

147 i‡(
	`gësock«me
(
π∆
.
sock
, (
sockaddr
 *Ë&π∆.
loˇl
, &
addæí
) <

149 
	`≥º‹
("Getsockname failed ");

150 
	`exô
(-1);

153 i‡(
	`©èch_ˇŒback_func
(
π∆
.
sock
, 
∆_π_ˇŒback
) < 0) {

154 
	`Æog
(
LOG_ERR
, 0, 
__FUNCTION__
, "CouldÇotáttach callback.");

156 
	}
}

158 
	$∆_˛ónup
()

160 
	`˛o£
(
aodv∆
.
sock
);

161 
	`˛o£
(
π∆
.
sock
);

162 
	}
}

165 
	$∆_kaodv_ˇŒback
(
sock
)

167 
Àn
;

168 
sockÀn_t
 
addæí
;

169 
∆msghdr
 *
∆m
;

170 
∆msgîr
 *
∆mîr
;

171 
buf
[
BUFLEN
];

172 
ö_addr
 
de°_addr
, 
§c_addr
;

173 
kaodv_π_msg_t
 *
m
;

174 
π_èbÀ_t
 *
π
, *
fwd_π
, *
ªv_π
 = 
NULL
;

176 
addæí
 = (
sockaddr_∆
);

179 
Àn
 =

180 
	`ªcv‰om
(
sock
, 
buf
, 
BUFLEN
, 0, (
sockaddr
 *Ë&
≥î
, &
addæí
);

182 i‡(
Àn
 <= 0)

185 
∆m
 = (
∆msghdr
 *Ë
buf
;

187 
∆m
->
∆msg_ty≥
) {

188 
NLMSG_ERROR
:

189 
∆mîr
 = 
	`NLMSG_DATA
(
∆m
);

190 i‡(
∆mîr
->
îr‹
 == 0) {

191 
	`DEBUG
(
LOG_DEBUG
, 0, "NLMSG_ACK");

193 
	`DEBUG
(
LOG_DEBUG
, 0, "NLMSG_ERROR,Érror=%dÅype=%s",

194 
∆mîr
->
îr‹
,

195 
	`kaodv_msg_ty≥_to_°r
(
∆mîr
->
msg
.
∆msg_ty≥
));

199 
KAODVM_DEBUG
:

200 
	`DEBUG
(
LOG_DEBUG
, 0, "kaodv: %s", 
	`NLMSG_DATA
(
∆m
));

202 
KAODVM_TIMEOUT
:

203 
m
 = 
	`NLMSG_DATA
(
∆m
);

204 
de°_addr
.
s_addr
 = 
m
->
d°
;

206 
	`DEBUG
(
LOG_DEBUG
, 0,

208 
	`ù_to_°r
(
de°_addr
));

210 
π
 = 
	`π_èbÀ_föd
(
de°_addr
);

212 i‡(
π
 &&Ñt->
°©e
 =
VALID
)

213 
	`rouã_expúe_timeout
(
π
);

215 
	`DEBUG
(
LOG_DEBUG
, 0,

218 
KAODVM_ROUTE_REQ
:

219 
m
 = 
	`NLMSG_DATA
(
∆m
);

220 
de°_addr
.
s_addr
 = 
m
->
d°
;

222 
	`DEBUG
(
LOG_DEBUG
, 0, "Got ROUTE_REQ: %s from kernel",

223 
	`ù_to_°r
(
de°_addr
));

225 
	`ºeq_rouã_discovîy
(
de°_addr
, 0, 
NULL
);

227 
KAODVM_REPAIR
:

228 
m
 = 
	`NLMSG_DATA
(
∆m
);

229 
de°_addr
.
s_addr
 = 
m
->
d°
;

230 
§c_addr
.
s_addr
 = 
m
->
§c
;

232 
	`DEBUG
(
LOG_DEBUG
, 0, "Got REPAIR from kernel for %s",

233 
	`ù_to_°r
(
de°_addr
));

235 
fwd_π
 = 
	`π_èbÀ_föd
(
de°_addr
);

237 i‡(
fwd_π
)

238 
	`ºeq_loˇl_ª∑ú
(
fwd_π
, 
§c_addr
, 
NULL
);

241 
KAODVM_ROUTE_UPDATE
:

242 
m
 = 
	`NLMSG_DATA
(
∆m
);

245 
de°_addr
.
s_addr
 = 
m
->
d°
;

246 
§c_addr
.
s_addr
 = 
m
->
§c
;

249 i‡(
de°_addr
.
s_addr
 =
AODV_BROADCAST
 ||

250 
de°_addr
.
s_addr
 ==

251 
	`DEV_IFINDEX
(
m
->
ifödex
).
brﬂdˇ°
.
s_addr
)

254 
fwd_π
 = 
	`π_èbÀ_föd
(
de°_addr
);

255 
ªv_π
 = 
	`π_èbÀ_föd
(
§c_addr
);

257 
	`π_èbÀ_upd©e_rouã_timeouts
(
fwd_π
, 
ªv_π
);

260 
KAODVM_SEND_RERR
:

261 
m
 = 
	`NLMSG_DATA
(
∆m
);

262 
de°_addr
.
s_addr
 = 
m
->
d°
;

263 
§c_addr
.
s_addr
 = 
m
->
§c
;

265 i‡(
de°_addr
.
s_addr
 =
AODV_BROADCAST
 ||

266 
de°_addr
.
s_addr
 ==

267 
	`DEV_IFINDEX
(
m
->
ifödex
).
brﬂdˇ°
.
s_addr
)

270 
fwd_π
 = 
	`π_èbÀ_föd
(
de°_addr
);

271 
ªv_π
 = 
	`π_èbÀ_föd
(
§c_addr
);

274 
ö_addr
 
ªº_de°
;

275 
RERR
 *
ªº
;

277 
	`DEBUG
(
LOG_DEBUG
, 0,

279 
	`ù_to_°r
(
§c_addr
), ip_to_°r(
de°_addr
));

281 i‡(
fwd_π
) {

282 
ªº
 = 
	`ªº_¸óã
(0, 
fwd_π
->
de°_addr
,

283 
fwd_π
->
de°_£qno
);

285 
	`π_èbÀ_upd©e_timeout
(
fwd_π
, 
DELETE_PERIOD
);

287 
ªº
 = 
	`ªº_¸óã
(0, 
de°_addr
, 0);

292 i‡(
ªv_π
 &&Ñev_π->
°©e
 =
VALID
)

293 
ªº_de°
 = 
ªv_π
->
√xt_h›
;

295 
ªº_de°
.
s_addr
 = 
AODV_BROADCAST
;

297 
	`aodv_sockë_£nd
((
AODV_msg
 *Ë
ªº
, 
ªº_de°
,

298 
	`RERR_CALC_SIZE
(
ªº
), 1,

299 &
	`DEV_IFINDEX
(
m
->
ifödex
));

301 i‡(
waô_⁄_ªboŸ
) {

302 
	`DEBUG
(
LOG_DEBUG
, 0,

304 
	`timî_£t_timeout
(&
w‹b_timî
, 
DELETE_PERIOD
);

309 
	`DEBUG
(
LOG_DEBUG
, 0, "GŸ mesgÅy≥=%d\n", 
∆m
->
∆msg_ty≥
);

312 
	}
}

313 
	$∆_π_ˇŒback
(
sock
)

315 
Àn
, 
©åÀn
;

316 
sockÀn_t
 
addæí
;

317 
∆msghdr
 *
∆m
;

318 
∆msgîr
 *
∆mîr
;

319 
buf
[
BUFLEN
];

320 
iÁddrmsg
 *
ifm
;

321 
π©å
 *
πa
;

323 
addæí
 = (
sockaddr_∆
);

325 
Àn
 =

326 
	`ªcv‰om
(
sock
, 
buf
, 
BUFLEN
, 0, (
sockaddr
 *Ë&
≥î
, &
addæí
);

328 i‡(
Àn
 <= 0)

331 
∆m
 = (
∆msghdr
 *Ë
buf
;

333 
∆m
->
∆msg_ty≥
) {

334 
NLMSG_ERROR
:

335 
∆mîr
 = 
	`NLMSG_DATA
(
∆m
);

336 i‡(
∆mîr
->
îr‹
 == 0) {

339 
	`DEBUG
(
LOG_DEBUG
, 0, "NLMSG_ERROR,Érror=%dÅype=%d",

340 
∆mîr
->
îr‹
,Çlmîr->
msg
.
∆msg_ty≥
);

343 
RTM_NEWLINK
:

344 
	`DEBUG
(
LOG_DEBUG
, 0, "RTM_NEWADDR");

346 
RTM_NEWADDR
:

347 
ifm
 = 
	`NLMSG_DATA
(
∆m
);

349 
πa
 = (
π©å
 *Ë((*Ë
ifm
 + (ifm));

351 
©åÀn
 = 
∆m
->
∆msg_Àn
 -

352 (
∆msghdr
Ë- (
iÁddrmsg
);

354 ; 
	`RTA_OK
(
πa
, 
©åÀn
);Ñè = 
	`RTA_NEXT
(rta,áttrlen)) {

356 i‡(
πa
->
πa_ty≥
 =
IFA_ADDRESS
) {

357 
ö_addr
 
iÁddr
;

359 
	`mem˝y
(&
iÁddr
, 
	`RTA_DATA
(
πa
),

360 
	`RTA_PAYLOAD
(
πa
));

362 
	`DEBUG
(
LOG_DEBUG
, 0,

364 
ifm
->
iÁ_ödex
, 
	`ù_to_°r
(
iÁddr
));

368 
RTM_NEWROUTE
:

369 
	`DEBUG
(
LOG_DEBUG
, 0, "RTM_NEWROUTE");

373 
	}
}

375 
	$¥efix_Àngth
(
Ámûy
, *
nm
)

377 
¥efix
 = 0;

379 i‡(
Ámûy
 =
AF_INET
) {

380 
tmp
;

381 
	`mem˝y
(&
tmp
, 
nm
, ());

383 
tmp
) {

384 
tmp
 =Åmp << 1;

385 
¥efix
++;

387  
¥efix
;

390 
	`DEBUG
(
LOG_DEBUG
, 0, "Unsupportedáddress family");

394 
	}
}

398 
	$add©å
(
∆msghdr
 *
n
, 
ty≥
, *
d©a
, 
Æí
)

400 
π©å
 *
©å
;

401 
Àn
 = 
	`RTA_LENGTH
(
Æí
);

403 
©å
 = (
π©å
 *Ë(((*Ë
n
Ë+ 
	`NLMSG_ALIGN
“->
∆msg_Àn
));

404 
©å
->
πa_ty≥
 = 
ty≥
;

405 
©å
->
πa_Àn
 = 
Àn
;

406 
	`mem˝y
(
	`RTA_DATA
(
©å
), 
d©a
, 
Æí
);

407 
n
->
∆msg_Àn
 = 
	`NLMSG_ALIGN
“->∆msg_ÀnË+ 
Àn
;

410 
	}
}

413 
	#ATTR_BUFLEN
 512

	)

415 
	$∆_£nd
(
∆sock
 *
∆
, 
∆msghdr
 *
n
)

417 
ªs
;

418 
iovec
 
iov
 = { (*Ë
n
,Ç->
∆msg_Àn
 };

419 
msghdr
 
msg
 =

420 { (*Ë&
≥î
, ’ìr), &
iov
, 1, 
NULL
, 0, 0 };

423 i‡(!
∆
)

426 
n
->
∆msg_£q
 = ++
∆
->
£q
;

427 
n
->
∆msg_pid
 = 
∆
->
loˇl
.
∆_pid
;

430 
n
->
∆msg_Êags
 |
NLM_F_ACK
;

433 
ªs
 = 
	`£ndmsg
(
∆
->
sock
, &
msg
, 0);

435 i‡(
ªs
 < 0) {

436 
	`Ârötf
(
°dîr
, "îr‹: %s\n", 
	`°ªº‹
(
î∫o
));

440 
	}
}

444 
	$∆_kîn_rouã
(
a˘i⁄
, 
Êags
, 
Ámûy
,

445 
ödex
, 
ö_addr
 *
d°
, ö_add∏*
gw
,

446 
ö_addr
 *
nm
, 
mëric
)

449 
∆msghdr
 
∆h
;

450 
πmsg
 
πm
;

451 
©åbuf
[1024];

452 } 
ªq
;

454 i‡(!
d°
 || !
gw
)

457 
ªq
.
∆h
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
πmsg
));

458 
ªq
.
∆h
.
∆msg_ty≥
 = 
a˘i⁄
;

459 
ªq
.
∆h
.
∆msg_Êags
 = 
NLM_F_REQUEST
 | 
Êags
;

460 
ªq
.
∆h
.
∆msg_pid
 = 0;

462 
ªq
.
πm
.
πm_Ámûy
 = 
Ámûy
;

464 i‡(!
nm
)

465 
ªq
.
πm
.
πm_d°_Àn
 = (
ö_addr
) * 8;

467 
ªq
.
πm
.
πm_d°_Àn
 = 
	`¥efix_Àngth
(
AF_INET
, 
nm
);

469 
ªq
.
πm
.
πm_§c_Àn
 = 0;

470 
ªq
.
πm
.
πm_tos
 = 0;

471 
ªq
.
πm
.
πm_èbÀ
 = 
RT_TABLE_MAIN
;

472 
ªq
.
πm
.
πm_¥Ÿocﬁ
 = 100;

473 
ªq
.
πm
.
πm_sc›e
 = 
RT_SCOPE_LINK
;

474 
ªq
.
πm
.
πm_ty≥
 = 
RTN_UNICAST
;

475 
ªq
.
πm
.
πm_Êags
 = 0;

477 
	`add©å
(&
ªq
.
∆h
, 
RTA_DST
, 
d°
, (
ö_addr
));

479 i‡(
	`memcmp
(
d°
, 
gw
, (
ö_addr
)) != 0) {

480 
ªq
.
πm
.
πm_sc›e
 = 
RT_SCOPE_UNIVERSE
;

481 
	`add©å
(&
ªq
.
∆h
, 
RTA_GATEWAY
, 
gw
, (
ö_addr
));

484 i‡(
ödex
 > 0)

485 
	`add©å
(&
ªq
.
∆h
, 
RTA_OIF
, &
ödex
, (index));

487 
	`add©å
(&
ªq
.
∆h
, 
RTA_PRIORITY
, &
mëric
, (metric));

489  
	`∆_£nd
(&
π∆
, &
ªq
.
∆h
);

490 
	}
}

492 
	$∆_£nd_add_rouã_msg
(
ö_addr
 
de°
, ö_add∏
√xt_h›
,

493 
mëric
, 
u_öt32_t
 
li„time
, 
π_Êags
,

494 
ifödex
)

497 
∆msghdr
 
n
;

498 
kaodv_π_msg
 
m
;

499 } 
¨eq
;

501 
	`DEBUG
(
LOG_DEBUG
, 0, "ADD/UPDATE: %s:%s ifindex=%d",

502 
	`ù_to_°r
(
de°
), ip_to_°r(
√xt_h›
), 
ifödex
);

504 
	`mem£t
(&
¨eq
, 0, (areq));

506 
¨eq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
kaodv_π_msg
));

507 
¨eq
.
n
.
∆msg_ty≥
 = 
KAODVM_ADDROUTE
;

508 
¨eq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

510 
¨eq
.
m
.
d°
 = 
de°
.
s_addr
;

511 
¨eq
.
m
.
nh›
 = 
√xt_h›
.
s_addr
;

512 
¨eq
.
m
.
time
 = 
li„time
;

513 
¨eq
.
m
.
ifödex
 = ifindex;

515 i‡(
π_Êags
 & 
RT_INET_DEST
) {

516 
¨eq
.
m
.
Êags
 |
KAODV_RT_GW_ENCAP
;

519 i‡(
π_Êags
 & 
RT_REPAIR
)

520 
¨eq
.
m
.
Êags
 |
KAODV_RT_REPAIR
;

522 i‡(
	`∆_£nd
(&
aodv∆
, &
¨eq
.
n
) < 0) {

523 
	`DEBUG
(
LOG_DEBUG
, 0, "FailedÅo sendÇetlink message");

526 #ifde‡
DEBUG_NETLINK


527 
	`DEBUG
(
LOG_DEBUG
, 0, "SendingáddÑoute");

529  
	`∆_kîn_rouã
(
RTM_NEWROUTE
, 
NLM_F_CREATE
,

530 
AF_INET
, 
ifödex
, &
de°
, &
√xt_h›
, 
NULL
, 
mëric
);

531 
	}
}

533 
	$∆_£nd_no_rouã_found_msg
(
ö_addr
 
de°
)

536 
∆msghdr
 
n
;

537 
kaodv_π_msg_t
 
m
;

538 } 
¨eq
;

540 
	`mem£t
(&
¨eq
, 0, (areq));

542 
¨eq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
kaodv_π_msg
));

543 
¨eq
.
n
.
∆msg_ty≥
 = 
KAODVM_NOROUTE_FOUND
;

544 
¨eq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

546 
¨eq
.
m
.
d°
 = 
de°
.
s_addr
;

548 
	`DEBUG
(
LOG_DEBUG
, 0, "Send NOROUTE_FOUNDÅo kernel: %s",

549 
	`ù_to_°r
(
de°
));

551  
	`∆_£nd
(&
aodv∆
, &
¨eq
.
n
);

552 
	}
}

554 
	$∆_£nd_dñ_rouã_msg
(
ö_addr
 
de°
, ö_add∏
√xt_h›
, 
mëric
)

556 
ödex
 = -1;

558 
∆msghdr
 
n
;

559 
kaodv_π_msg
 
m
;

560 } 
¨eq
;

562 
	`DEBUG
(
LOG_DEBUG
, 0, "Síd DEL_ROUTEÅÿkî√l: %s", 
	`ù_to_°r
(
de°
));

564 
	`mem£t
(&
¨eq
, 0, (areq));

566 
¨eq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
kaodv_π_msg
));

567 
¨eq
.
n
.
∆msg_ty≥
 = 
KAODVM_DELROUTE
;

568 
¨eq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

576 i‡(
	`∆_£nd
(&
aodv∆
, &
¨eq
.
n
) < 0) {

577 
	`DEBUG
(
LOG_DEBUG
, 0, "FailedÅo sendÇetlink message");

580 #ifde‡
DEBUG_NETLINK


581 
	`DEBUG
(
LOG_DEBUG
, 0, "Sending delÑoute");

583  
	`∆_kîn_rouã
(
RTM_DELROUTE
, 0, 
AF_INET
, 
ödex
, &
de°
, &
√xt_h›
,

584 
NULL
, 
mëric
);

585 
	}
}

587 
	$∆_£nd_c⁄f_msg
()

590 
∆msghdr
 
n
;

591 
kaodv_c⁄f_msg_t
 
cm
;

592 } 
¨eq
;

594 
	`mem£t
(&
¨eq
, 0, (areq));

596 
¨eq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
kaodv_c⁄f_msg_t
));

597 
¨eq
.
n
.
∆msg_ty≥
 = 
KAODVM_CONFIG
;

598 
¨eq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

600 
¨eq
.
cm
.
quÆ_th
 = 
quÆ_thªshﬁd
;

601 
¨eq
.
cm
.
a˘ive_rouã_timeout
 =áctive_route_timeout;

602 
¨eq
.
cm
.
is_g©eway
 = 
öã∫ë_gw_mode
;

604 #ifde‡
DEBUG_NETLINK


605 
	`DEBUG
(
LOG_DEBUG
, 0, "Sendingáodv conf msg");

607  
	`∆_£nd
(&
aodv∆
, &
¨eq
.
n
);

608 
	}
}

	@nl.h

22 #i‚de‡
_NL_H


23 
	#_NL_H


	)

27 
∆_öô
();

28 
∆_˛ónup
();

29 
∆_£nd_add_rouã_msg
(
ö_addr
 
de°
, ö_add∏
√xt_h›
,

30 
mëric
, 
u_öt32_t
 
li„time
, 
π_Êags
,

31 
ifödex
);

32 
∆_£nd_dñ_rouã_msg
(
ö_addr
 
de°
, ö_add∏
√xt_h›
, 
mëric
);

34 
∆_£nd_no_rouã_found_msg
(
ö_addr
 
de°
);

35 
∆_£nd_c⁄f_msg
();

	@params.h

23 #i‚de‡
_PARAMS_H


24 
	#_PARAMS_H


	)

26 
	~"defs.h
"

28 
	#K
 5

	)

31 
	#ACTIVE_ROUTE_TIMEOUT
 
a˘ive_rouã_timeout


	)

32 
	#TTL_START
 
âl_°¨t


	)

33 
	#DELETE_PERIOD
 
dñëe_≥riod


	)

36 
	#ACTIVE_ROUTE_TIMEOUT_LLF
 10000

	)

37 
	#TTL_START_LLF
 1

	)

38 
	#DELETE_PERIOD_LLF
 
ACTIVE_ROUTE_TIMEOUT_LLF


	)

41 
	#ACTIVE_ROUTE_TIMEOUT_HELLO
 3000

	)

42 
	#TTL_START_HELLO
 2

	)

43 
	#DELETE_PERIOD_HELLO
 
K
 * 
	`max
(
ACTIVE_ROUTE_TIMEOUT_HELLO
, 
ALLOWED_HELLO_LOSS
 * 
HELLO_INTERVAL
)

	)

46 
	#ALLOWED_HELLO_LOSS
 2

	)

48 
	#BLACKLIST_TIMEOUT
 
RREQ_RETRIES
 * 
NET_TRAVERSAL_TIME
 + (
TTL_THRESHOLD
 - 
TTL_START
)/
TTL_INCREMENT
 + 1 + 
	)
RREQ_RETRIES

49 
	#HELLO_INTERVAL
 1000

	)

50 
	#LOCAL_ADD_TTL
 2

	)

51 
	#MAX_REPAIR_TTL
 3 * 
NET_DIAMETER
 / 10

	)

52 
	#MY_ROUTE_TIMEOUT
 2 * 
ACTIVE_ROUTE_TIMEOUT


	)

53 
	#NET_DIAMETER
 35

	)

54 
	#NET_TRAVERSAL_TIME
 2 * 
NODE_TRAVERSAL_TIME
 * 
NET_DIAMETER


	)

55 
	#NEXT_HOP_WAIT
 
NODE_TRAVERSAL_TIME
 + 10

	)

56 
	#NODE_TRAVERSAL_TIME
 40

	)

57 
	#PATH_DISCOVERY_TIME
 2 * 
NET_TRAVERSAL_TIME


	)

58 
	#RERR_RATELIMIT
 10

	)

59 
	#RING_TRAVERSAL_TIME
 2 * 
NODE_TRAVERSAL_TIME
 * (
TTL_VALUE
 + 
TIMEOUT_BUFFER
)

	)

60 
	#RREQ_RETRIES
 2

	)

61 
	#RREQ_RATELIMIT
 10

	)

62 
	#TIMEOUT_BUFFER
 2

	)

63 
	#TTL_INCREMENT
 2

	)

64 
	#TTL_THRESHOLD
 7

	)

66 #i‚de‡
NS_PORT


68 
a˘ive_rouã_timeout
;

69 
âl_°¨t
;

70 
dñëe_≥riod
;

	@routing_table.c

23 
	~<time.h
>

25 #ifde‡
NS_PORT


26 
	~"ns-2/aodv-uu.h
"

28 
	~"routög_èbÀ.h
"

29 
	~"aodv_timeout.h
"

30 
	~"aodv_ªº.h
"

31 
	~"aodv_hñlo.h
"

32 
	~"aodv_sockë.h
"

33 
	~"aodv_√ighb‹.h
"

34 
	~"timî_queue.h
"

35 
	~"defs.h
"

36 
	~"debug.h
"

37 
	~"∑øms.h
"

38 
	~"£ek_li°.h
"

39 
	~"∆.h
"

42 
hashög
(
ö_addr
 *
addr
, 
hash_vÆue
 * 
hash
);

44 
Œ„edback
;

46 
NS_CLASS
 
	$π_èbÀ_öô
()

48 
i
;

50 
π_tbl
.
num_íåõs
 = 0;

51 
π_tbl
.
num_a˘ive
 = 0;

54 
i
 = 0; i < 
RT_TABLESIZE
; i++) {

55 
	`INIT_LIST_HEAD
(&
π_tbl
.
tbl
[
i
]);

57 
	}
}

59 
NS_CLASS
 
	$π_èbÀ_de°roy
()

61 
i
;

62 
li°_t
 *
tmp
 = 
NULL
, *
pos
 = NULL;

64 
i
 = 0; i < 
RT_TABLESIZE
; i++) {

65 
	`li°_f‹óch_ß„
(
pos
, 
tmp
, &
π_tbl
.
tbl
[
i
]) {

66 
π_èbÀ_t
 *
π
 = (π_èbÀ_à*Ë
pos
;

68 
	`π_èbÀ_dñëe
(
π
);

71 
	}
}

74 
	$hashög
(
ö_addr
 *
addr
, 
hash_vÆue
 * 
hash
)

77 *
hash
 = (
hash_vÆue
Ë
addr
->
s_addr
;

79  (*
hash
 & 
RT_TABLEMASK
);

80 
	}
}

82 
π_èbÀ_t
 *
NS_CLASS
 
	$π_èbÀ_ö£π
(
ö_addr
 
de°_addr
,

83 
ö_addr
 
√xt
,

84 
u_öt8_t
 
h›s
, 
u_öt32_t
 
£qno
,

85 
u_öt32_t
 
li„
, 
u_öt8_t
 
°©e
,

86 
u_öt16_t
 
Êags
, 
ifödex
)

88 
hash_vÆue
 
hash
;

89 
ödex
;

90 
li°_t
 *
pos
;

91 
π_èbÀ_t
 *
π
;

96 
ödex
 = 
	`hashög
(&
de°_addr
, &
hash
);

99 
	`li°_f‹óch
(
pos
, &
π_tbl
.
tbl
[
ödex
]) {

100 
π
 = (
π_èbÀ_t
 *Ë
pos
;

101 i‡(
	`memcmp
(&
π
->
de°_addr
, &de°_addr, (
ö_addr
))

103 
	`DEBUG
(
LOG_INFO
, 0, "%sálreadyÉxist inÑoutingÅable!",

104 
	`ù_to_°r
(
de°_addr
));

106  
NULL
;

110 i‡((
π
 = (
π_èbÀ_t
 *Ë
	`mÆloc
(‘t_èbÀ_t))Ë=
NULL
) {

111 
	`Ârötf
(
°dîr
, "Malloc failed!\n");

112 
	`exô
(-1);

115 
	`mem£t
(
π
, 0, (
π_èbÀ_t
));

117 
π
->
de°_addr
 = dest_addr;

118 
π
->
√xt_h›
 = 
√xt
;

119 
π
->
de°_£qno
 = 
£qno
;

120 
π
->
Êags
 = flags;

121 
π
->
h˙t
 = 
h›s
;

122 
π
->
ifödex
 = ifindex;

123 
π
->
hash
 = hash;

124 
π
->
°©e
 = state;

126 
	`timî_öô
(&
π
->
π_timî
, &
NS_CLASS
 
rouã_expúe_timeout
,Ñt);

128 
	`timî_öô
(&
π
->
ack_timî
, &
NS_CLASS
 
ºï_ack_timeout
,Ñt);

130 
	`timî_öô
(&
π
->
hñlo_timî
, &
NS_CLASS
 
hñlo_timeout
,Ñt);

132 
π
->
œ°_hñlo_time
.
tv_£c
 = 0;

133 
π
->
œ°_hñlo_time
.
tv_u£c
 = 0;

134 
π
->
hñlo_˙t
 = 0;

136 
π
->
≈ªc
 = 0;

137 
	`INIT_LIST_HEAD
(&
π
->
¥ecurs‹s
);

141 
π_tbl
.
num_íåõs
++;

143 
	`DEBUG
(
LOG_INFO
, 0, "Inserting %s (bucket %d)Çext hop %s",

144 
	`ù_to_°r
(
de°_addr
), 
ödex
, ip_to_°r(
√xt
));

146 
	`li°_add
(&
π_tbl
.
tbl
[
ödex
], &
π
->
l
);

148 i‡(
°©e
 =
INVALID
) {

150 i‡(
Êags
 & 
RT_REPAIR
) {

151 
π
->
π_timî
.
h™dÀr
 = &
NS_CLASS
 
loˇl_ª∑ú_timeout
;

152 
li„
 = 
ACTIVE_ROUTE_TIMEOUT
;

154 
π
->
π_timî
.
h™dÀr
 = &
NS_CLASS
 
rouã_dñëe_timeout
;

155 
li„
 = 
DELETE_PERIOD
;

159 
π_tbl
.
num_a˘ive
++;

160 #i‚de‡
NS_PORT


161 
	`∆_£nd_add_rouã_msg
(
de°_addr
, 
√xt
, 
h›s
, 
li„
, 
Êags
,

162 
ifödex
);

166 #ifde‡
CONFIG_GATEWAY_DISABLE


167 i‡(
π
->
Êags
 & 
RT_GATEWAY
)

168 
	`π_èbÀ_upd©e_öë_π
(
π
, 
li„
);

172 
	`DEBUG
(
LOG_INFO
, 0, "NewÅimer for %s,Üife=%d",

173 
	`ù_to_°r
(
π
->
de°_addr
), 
li„
);

175 i‡(
li„
 != 0)

176 
	`timî_£t_timeout
(&
π
->
π_timî
, 
li„
);

180 i‡(
π
->
°©e
 =
VALID
 && 
	`£ek_li°_ªmove
(
	`£ek_li°_föd
(
de°_addr
))) {

181 #ifde‡
NS_PORT


182 i‡(
π
->
Êags
 & 
RT_INET_DEST
)

183 
	`∑ckë_queue_£t_vîdi˘
(
de°_addr
, 
PQ_ENC_SEND
);

185 
	`∑ckë_queue_£t_vîdi˘
(
de°_addr
, 
PQ_SEND
);

188  
π
;

189 
	}
}

191 
π_èbÀ_t
 *
NS_CLASS
 
	$π_èbÀ_upd©e
(
π_èbÀ_t
 * 
π
, 
ö_addr
 
√xt
,

192 
u_öt8_t
 
h›s
, 
u_öt32_t
 
£qno
,

193 
u_öt32_t
 
li„time
, 
u_öt8_t
 
°©e
,

194 
u_öt16_t
 
Êags
)

199 i‡(
π
->
°©e
 =
INVALID
 && sèã =
VALID
) {

204 
π_tbl
.
num_a˘ive
++;

206 i‡(
π
->
Êags
 & 
RT_REPAIR
)

207 
Êags
 &~
RT_REPAIR
;

209 #i‚de‡
NS_PORT


210 
	`∆_£nd_add_rouã_msg
(
π
->
de°_addr
, 
√xt
, 
h›s
, 
li„time
,

211 
Êags
, 
π
->
ifödex
);

214 } i‡(
π
->
√xt_h›
.
s_addr
 != 0 &&

215 
π
->
√xt_h›
.
s_addr
 !
√xt
.s_addr) {

217 
	`DEBUG
(
LOG_INFO
, 0, "rt->next_hop=%s,Çew_next_hop=%s",

218 
	`ù_to_°r
(
π
->
√xt_h›
), ip_to_°r(
√xt
));

220 #i‚de‡
NS_PORT


221 
	`∆_£nd_add_rouã_msg
(
π
->
de°_addr
, 
√xt
, 
h›s
, 
li„time
,

222 
Êags
, 
π
->
ifödex
);

226 i‡(
h›s
 > 1 && 
π
->
h˙t
 == 1) {

227 
π
->
œ°_hñlo_time
.
tv_£c
 = 0;

228 
π
->
œ°_hñlo_time
.
tv_u£c
 = 0;

229 
π
->
hñlo_˙t
 = 0;

230 
	`timî_ªmove
(&
π
->
hñlo_timî
);

234 
	`√ighb‹_lök_bªak
(
π
);

237 
π
->
Êags
 = flags;

238 
π
->
de°_£qno
 = 
£qno
;

239 
π
->
√xt_h›
 = 
√xt
;

240 
π
->
h˙t
 = 
h›s
;

242 #ifde‡
CONFIG_GATEWAY


243 i‡(
π
->
Êags
 & 
RT_GATEWAY
)

244 
	`π_èbÀ_upd©e_öë_π
(
π
, 
li„time
);

248 
π
->
π_timî
.
h™dÀr
 = &
NS_CLASS
 
rouã_expúe_timeout
;

250 i‡(!(
π
->
Êags
 & 
RT_INET_DEST
))

251 
	`π_èbÀ_upd©e_timeout
(
π
, 
li„time
);

255 
π
->
°©e
 = state;

259 i‡(
π
->
°©e
 =
VALID


260 && 
	`£ek_li°_ªmove
(
	`£ek_li°_föd
(
π
->
de°_addr
))) {

261 #ifde‡
NS_PORT


262 i‡(
π
->
Êags
 & 
RT_INET_DEST
)

263 
	`∑ckë_queue_£t_vîdi˘
(
π
->
de°_addr
, 
PQ_ENC_SEND
);

265 
	`∑ckë_queue_£t_vîdi˘
(
π
->
de°_addr
, 
PQ_SEND
);

268  
π
;

269 
	}
}

271 
NS_INLINE
 
π_èbÀ_t
 *
NS_CLASS
 
	$π_èbÀ_upd©e_timeout
(
π_èbÀ_t
 * 
π
,

272 
u_öt32_t
 
li„time
)

274 
timevÆ
 
√w_timeout
;

276 i‡(!
π
)

277  
NULL
;

279 i‡(
π
->
°©e
 =
VALID
) {

282 
	`gëtimeofday
(&
√w_timeout
, 
NULL
);

283 
	`timevÆ_add_m£c
(&
√w_timeout
, 
li„time
);

285 i‡(
	`timevÆ_diff
(&
π
->
π_timî
.
timeout
, &
√w_timeout
) < 0)

286 
	`timî_£t_timeout
(&
π
->
π_timî
, 
li„time
);

288 
	`timî_£t_timeout
(&
π
->
π_timî
, 
li„time
);

290  
π
;

291 
	}
}

294 
NS_CLASS
 
	$π_èbÀ_upd©e_rouã_timeouts
(
π_èbÀ_t
 * 
fwd_π
,

295 
π_èbÀ_t
 * 
ªv_π
)

297 
π_èbÀ_t
 *
√xt_h›_π
 = 
NULL
;

304 i‡(
fwd_π
 && fwd_π->
°©e
 =
VALID
) {

306 i‡(
Œ„edback
 || 
fwd_π
->
Êags
 & 
RT_INET_DEST
 ||

307 
fwd_π
->
h˙t
 !1 || fwd_π->
hñlo_timî
.
u£d
)

308 
	`π_èbÀ_upd©e_timeout
(
fwd_π
, 
ACTIVE_ROUTE_TIMEOUT
);

310 
√xt_h›_π
 = 
	`π_èbÀ_föd
(
fwd_π
->
√xt_h›
);

312 i‡(
√xt_h›_π
 &&Çext_h›_π->
°©e
 =
VALID
 &&

313 
√xt_h›_π
->
de°_addr
.
s_addr
 !
fwd_π
->dest_addr.s_addr &&

314 (
Œ„edback
 || 
fwd_π
->
hñlo_timî
.
u£d
))

315 
	`π_èbÀ_upd©e_timeout
(
√xt_h›_π
,

316 
ACTIVE_ROUTE_TIMEOUT
);

322 i‡(
ªv_π
 &&Ñev_π->
°©e
 =
VALID
) {

324 i‡(
Œ„edback
 || 
ªv_π
->
h˙t
 !1 ||Ñev_π->
hñlo_timî
.
u£d
)

325 
	`π_èbÀ_upd©e_timeout
(
ªv_π
, 
ACTIVE_ROUTE_TIMEOUT
);

327 
√xt_h›_π
 = 
	`π_èbÀ_föd
(
ªv_π
->
√xt_h›
);

329 i‡(
√xt_h›_π
 &&Çext_h›_π->
°©e
 =
VALID
 && 
ªv_π
 &&

330 
√xt_h›_π
->
de°_addr
.
s_addr
 !
ªv_π
->dest_addr.s_addr &&

331 (
Œ„edback
 || 
ªv_π
->
hñlo_timî
.
u£d
))

332 
	`π_èbÀ_upd©e_timeout
(
√xt_h›_π
,

333 
ACTIVE_ROUTE_TIMEOUT
);

344 
	}
}

346 
π_èbÀ_t
 *
NS_CLASS
 
	$π_èbÀ_föd
(
ö_addr
 
de°_addr
)

348 
hash_vÆue
 
hash
;

349 
ödex
;

350 
li°_t
 *
pos
;

352 i‡(
π_tbl
.
num_íåõs
 == 0)

353  
NULL
;

356 
ödex
 = 
	`hashög
(&
de°_addr
, &
hash
);

359 
	`li°_f‹óch
(
pos
, &
π_tbl
.
tbl
[
ödex
]) {

360 
π_èbÀ_t
 *
π
 = (π_èbÀ_à*Ë
pos
;

362 i‡(
π
->
hash
 != hash)

365 i‡(
	`memcmp
(&
de°_addr
, &
π
->de°_addr, (
ö_addr
))

367  
π
;

370  
NULL
;

371 
	}
}

373 
π_èbÀ_t
 *
NS_CLASS
 
	$π_èbÀ_föd_g©eway
()

375 
π_èbÀ_t
 *
gw
 = 
NULL
;

376 
i
;

378 
i
 = 0; i < 
RT_TABLESIZE
; i++) {

379 
li°_t
 *
pos
;

380 
	`li°_f‹óch
(
pos
, &
π_tbl
.
tbl
[
i
]) {

381 
π_èbÀ_t
 *
π
 = (π_èbÀ_à*Ë
pos
;

383 i‡(
π
->
Êags
 & 
RT_GATEWAY
 &&Ñt->
°©e
 =
VALID
) {

384 i‡(!
gw
 || 
π
->
h˙t
 < gw->hcnt)

385 
gw
 = 
π
;

389  
gw
;

390 
	}
}

392 #ifde‡
CONFIG_GATEWAY


393 
NS_CLASS
 
	$π_èbÀ_upd©e_öë_π
(
π_èbÀ_t
 * 
gw
, 
u_öt32_t
 
li„
)

395 
n
 = 0;

396 
i
;

398 i‡(!
gw
)

401 
i
 = 0; i < 
RT_TABLESIZE
; i++) {

402 
li°_t
 *
pos
;

403 
	`li°_f‹óch
(
pos
, &
π_tbl
.
tbl
[
i
]) {

404 
π_èbÀ_t
 *
π
 = (π_èbÀ_à*Ë
pos
;

406 i‡(
π
->
Êags
 & 
RT_INET_DEST
 &&Ñt->
°©e
 =
VALID
) {

407 
	`π_èbÀ_upd©e
(
π
, 
gw
->
de°_addr
, gw->
h˙t
, 0,

408 
li„
, 
VALID
, 
π
->
Êags
);

409 
n
++;

413  
n
;

414 
	}
}

418 
NS_CLASS
 
	$π_èbÀ_övÆid©e
(
π_èbÀ_t
 * 
π
)

420 
timevÆ
 
now
;

422 
	`gëtimeofday
(&
now
, 
NULL
);

424 i‡(
π
 =
NULL
)

428 i‡(
π
->
°©e
 =
INVALID
) {

429 
	`DEBUG
(
LOG_DEBUG
, 0, "Route %sálready invalidated!!!",

430 
	`ù_to_°r
(
π
->
de°_addr
));

434 i‡(
π
->
hñlo_timî
.
u£d
) {

435 
	`DEBUG
(
LOG_DEBUG
, 0, "last HELLO: %ld",

436 
	`timevÆ_diff
(&
now
, &
π
->
œ°_hñlo_time
));

440 
	`timî_ªmove
(&
π
->
π_timî
);

441 
	`timî_ªmove
(&
π
->
hñlo_timî
);

442 
	`timî_ªmove
(&
π
->
ack_timî
);

445 
π
->
°©e
 = 
INVALID
;

446 
π_tbl
.
num_a˘ive
--;

448 
π
->
hñlo_˙t
 = 0;

452 
	`£qno_ö¸
(
π
->
de°_£qno
);

454 
π
->
œ°_hñlo_time
.
tv_£c
 = 0;

455 
π
->
œ°_hñlo_time
.
tv_u£c
 = 0;

457 #i‚de‡
NS_PORT


458 
	`∆_£nd_dñ_rouã_msg
(
π
->
de°_addr
,Ñt->
√xt_h›
,Ñt->
h˙t
);

462 #ifde‡
CONFIG_GATEWAY


466 i‡(
π
->
Êags
 & 
RT_GATEWAY
) {

467 
i
;

469 
π_èbÀ_t
 *
gw
 = 
	`π_èbÀ_föd_g©eway
();

471 
i
 = 0; i < 
RT_TABLESIZE
; i++) {

472 
li°_t
 *
pos
;

473 
	`li°_f‹óch
(
pos
, &
π_tbl
.
tbl
[
i
]) {

474 
π_èbÀ_t
 *
π2
 = (π_èbÀ_à*Ë
pos
;

476 i‡(
π2
->
°©e
 =
VALID


477 && (
π2
->
Êags
 & 
RT_INET_DEST
)

478 && (
π2
->
√xt_h›
.
s_addr
 ==

479 
π
->
de°_addr
.
s_addr
)) {

481 
	`DEBUG
(
LOG_DEBUG
, 0,

483 
	`ù_to_°r
(
π
->
de°_addr
),

484 
	`ù_to_°r
(
gw
->
de°_addr
),

485 
	`ù_to_°r
(
π2
->

486 
de°_addr
));

487 
	`π_èbÀ_upd©e
(
π2
,

488 
gw
->
de°_addr
,

489 
gw
->
h˙t
, 0,

490 
timevÆ_diff


491 (&
π
->
π_timî
.

492 
timeout
, &
now
),

493 
VALID
,

494 
π2
->
Êags
);

496 
	`π_èbÀ_övÆid©e
(
π2
);

497 
	`¥ecurs‹_li°_de°roy
(
π2
);

505 i‡(
π
->
Êags
 & 
RT_REPAIR
) {

508 
π
->
π_timî
.
h™dÀr
 = &
NS_CLASS
 
loˇl_ª∑ú_timeout
;

509 
	`timî_£t_timeout
(&
π
->
π_timî
, 
ACTIVE_ROUTE_TIMEOUT
);

511 
	`DEBUG
(
LOG_DEBUG
, 0, "%s kept forÑepairs during %u msecs",

512 
	`ù_to_°r
(
π
->
de°_addr
), 
ACTIVE_ROUTE_TIMEOUT
);

516 
π
->
π_timî
.
h™dÀr
 = &
NS_CLASS
 
rouã_dñëe_timeout
;

517 
	`timî_£t_timeout
(&
π
->
π_timî
, 
DELETE_PERIOD
);

519 
	`DEBUG
(
LOG_DEBUG
, 0, "%sÑemoved in %u msecs",

520 
	`ù_to_°r
(
π
->
de°_addr
), 
DELETE_PERIOD
);

524 
	}
}

526 
NS_CLASS
 
	$π_èbÀ_dñëe
(
π_èbÀ_t
 * 
π
)

528 i‡(!
π
) {

529 
	`DEBUG
(
LOG_ERR
, 0, "NoÑouteÉntryÅo delete");

533 
	`li°_dëach
(&
π
->
l
);

535 
	`¥ecurs‹_li°_de°roy
(
π
);

537 i‡(
π
->
°©e
 =
VALID
) {

539 #i‚de‡
NS_PORT


540 
	`∆_£nd_dñ_rouã_msg
(
π
->
de°_addr
,Ñt->
√xt_h›
,Ñt->
h˙t
);

542 
π_tbl
.
num_a˘ive
--;

545 
	`timî_ªmove
(&
π
->
π_timî
);

546 
	`timî_ªmove
(&
π
->
hñlo_timî
);

547 
	`timî_ªmove
(&
π
->
ack_timî
);

549 
π_tbl
.
num_íåõs
--;

551 
	`‰ì
(
π
);

553 
	}
}

559 
NS_CLASS
 
	$¥ecurs‹_add
(
π_èbÀ_t
 * 
π
, 
ö_addr
 
addr
)

561 
¥ecurs‹_t
 *
¥
;

562 
li°_t
 *
pos
;

565 i‡(!
π
)

569 
	`li°_f‹óch
(
pos
, &
π
->
¥ecurs‹s
) {

570 
¥
 = (
¥ecurs‹_t
 *Ë
pos
;

572 i‡(
¥
->
√ighb‹
.
s_addr
 =
addr
.s_addr)

576 i‡((
¥
 = (
¥ecurs‹_t
 *Ë
	`mÆloc
(’ªcurs‹_t))Ë=
NULL
) {

577 
	`≥º‹
("CouldÇotállocate memory forÖrecursorÇode!!\n");

578 
	`exô
(-1);

581 
	`DEBUG
(
LOG_INFO
, 0, "AddingÖrecursor %sÅoÑte %s",

582 
	`ù_to_°r
(
addr
), ip_to_°r(
π
->
de°_addr
));

584 
¥
->
√ighb‹
.
s_addr
 = 
addr
.s_addr;

588 
	`li°_add
(&
π
->
¥ecurs‹s
, &
¥
->
l
);

589 
π
->
≈ªc
++;

592 
	}
}

598 
NS_CLASS
 
	$¥ecurs‹_ªmove
(
π_èbÀ_t
 * 
π
, 
ö_addr
 
addr
)

600 
li°_t
 *
pos
;

603 i‡(!
π
)

606 
	`li°_f‹óch
(
pos
, &
π
->
¥ecurs‹s
) {

607 
¥ecurs‹_t
 *
¥
 = (¥ecurs‹_à*Ë
pos
;

608 i‡(
¥
->
√ighb‹
.
s_addr
 =
addr
.s_addr) {

609 
	`DEBUG
(
LOG_INFO
, 0, "RemovingÖrecursor %s fromÑte %s",

610 
	`ù_to_°r
(
addr
), ip_to_°r(
π
->
de°_addr
));

612 
	`li°_dëach
(
pos
);

613 
π
->
≈ªc
--;

614 
	`‰ì
(
¥
);

618 
	}
}

624 
	$¥ecurs‹_li°_de°roy
(
π_èbÀ_t
 * 
π
)

626 
li°_t
 *
pos
, *
tmp
;

629 i‡(!
π
)

632 
	`li°_f‹óch_ß„
(
pos
, 
tmp
, &
π
->
¥ecurs‹s
) {

633 
¥ecurs‹_t
 *
¥
 = (¥ecurs‹_à*Ë
pos
;

634 
	`li°_dëach
(
pos
);

635 
π
->
≈ªc
--;

636 
	`‰ì
(
¥
);

638 
	}
}

	@routing_table.h

23 #i‚de‡
_ROUTING_TABLE_H


24 
	#_ROUTING_TABLE_H


	)

26 #i‚de‡
NS_NO_GLOBALS


27 
	~"defs.h
"

28 
	~"li°.h
"

30 
π_èbÀ
 
	tπ_èbÀ_t
;

33 
	s¥ecurs‹
 {

34 
li°_t
 
	ml
;

35 
ö_addr
 
	m√ighb‹
;

36 } 
	t¥ecurs‹_t
;

38 
	#FIRST_PREC
(
h
Ë((
¥ecurs‹_t
 *)((h).
√xt
))

	)

40 
	#£qno_ö¸
(
s
Ë((†=0Ë? 0 : ((†=0xFFFFFFFFË? s = 1 : s++))

	)

42 
u_öt32_t
 
	thash_vÆue
;

45 
	sπ_èbÀ
 {

46 
li°_t
 
	ml
;

47 
ö_addr
 
	mde°_addr
;

48 
u_öt32_t
 
	mde°_£qno
;

49 
	mifödex
;

50 
ö_addr
 
	m√xt_h›
;

51 
u_öt8_t
 
	mh˙t
;

52 
u_öt16_t
 
	mÊags
;

53 
u_öt8_t
 
	m°©e
;

54 
timî
 
	mπ_timî
;

55 
timî
 
	mack_timî
;

56 
timî
 
	mhñlo_timî
;

57 
timevÆ
 
	mœ°_hñlo_time
;

58 
u_öt8_t
 
	mhñlo_˙t
;

59 
hash_vÆue
 
	mhash
;

60 
	m≈ªc
;

61 
li°_t
 
	m¥ecurs‹s
;

66 
	#RT_UNIDIR
 0x1

	)

67 
	#RT_REPAIR
 0x2

	)

68 
	#RT_INV_SEQNO
 0x4

	)

69 
	#RT_INET_DEST
 0x8

	)

71 
	#RT_GATEWAY
 0x10

	)

74 
	#INVALID
 0

	)

75 
	#VALID
 1

	)

78 
	#RT_TABLESIZE
 64

	)

79 
	#RT_TABLEMASK
 (
RT_TABLESIZE
 - 1)

	)

81 
	sroutög_èbÀ
 {

82 
	mnum_íåõs
;

83 
	mnum_a˘ive
;

84 
li°_t
 
	mtbl
[
RT_TABLESIZE
];

87 
¥ecurs‹_li°_de°roy
(
π_èbÀ_t
 * 
π
);

90 #i‚de‡
NS_NO_DECLARATIONS


92 
routög_èbÀ
 
	gπ_tbl
;

94 
π_èbÀ_öô
();

95 
π_èbÀ_de°roy
();

96 
π_èbÀ_t
 *
π_èbÀ_ö£π
(
ö_addr
 
de°
, ö_add∏
√xt
,

97 
u_öt8_t
 
h›s
, 
u_öt32_t
 
£qno
, u_öt32_à
li„
,

98 
u_öt8_t
 
°©e
, 
u_öt16_t
 
Êags
,

99 
ifödex
);

100 
π_èbÀ_t
 *
π_èbÀ_upd©e
‘t_èbÀ_à* 
π
, 
ö_addr
 
√xt
, 
u_öt8_t
 
h›s
,

101 
u_öt32_t
 
£qno
, u_öt32_à
li„time
, 
u_öt8_t
 
°©e
,

102 
u_öt16_t
 
Êags
);

103 
NS_INLINE
 
π_èbÀ_t
 *
π_èbÀ_upd©e_timeout
‘t_èbÀ_à* 
π
,

104 
u_öt32_t
 
li„time
);

105 
π_èbÀ_upd©e_rouã_timeouts
(
π_èbÀ_t
 * 
fwd_π
,Ñt_èbÀ_à* 
ªv_π
);

106 
π_èbÀ_t
 *
π_èbÀ_föd
(
ö_addr
 
de°
);

107 
π_èbÀ_t
 *
π_èbÀ_föd_g©eway
();

108 
π_èbÀ_upd©e_öë_π
(
π_èbÀ_t
 * 
gw
, 
u_öt32_t
 
li„
);

109 
π_èbÀ_övÆid©e
(
π_èbÀ_t
 * 
π
);

110 
π_èbÀ_dñëe
(
π_èbÀ_t
 * 
π
);

111 
¥ecurs‹_add
(
π_èbÀ_t
 * 
π
, 
ö_addr
 
addr
);

112 
¥ecurs‹_ªmove
(
π_èbÀ_t
 * 
π
, 
ö_addr
 
addr
);

	@seek_list.c

23 
	~<°dlib.h
>

25 #ifde‡
NS_PORT


26 
	~"ns-2/aodv-uu.h
"

27 
	~"li°.h
"

29 
	~"£ek_li°.h
"

30 
	~"timî_queue.h
"

31 
	~"aodv_timeout.h
"

32 
	~"defs.h
"

33 
	~"∑øms.h
"

34 
	~"debug.h
"

35 
	~"li°.h
"

38 #i‚de‡
NS_PORT


42 
LIST
(
£ekhód
);

44 #ifde‡
SEEK_LIST_DEBUG


45 
£ek_li°_¥öt
();

49 
£ek_li°_t
 *
NS_CLASS
 
	$£ek_li°_ö£π
(
ö_addr
 
de°_addr
,

50 
u_öt32_t
 
de°_£qno
,

51 
âl
, 
u_öt8_t
 
Êags
,

52 
ù_d©a
 *
ùd
)

54 
£ek_li°_t
 *
íåy
;

56 i‡((
íåy
 = (
£ek_li°_t
 *Ë
	`mÆloc
((£ek_li°_t))Ë=
NULL
) {

57 
	`Ârötf
(
°dîr
, "Failed malloc\n");

58 
	`exô
(-1);

61 
íåy
->
de°_addr
 = dest_addr;

62 
íåy
->
de°_£qno
 = dest_seqno;

63 
íåy
->
Êags
 = flags;

64 
íåy
->
ªqs
 = 0;

65 
íåy
->
âl
 =Åtl;

66 
íåy
->
ùd
 = ipd;

68 
	`timî_öô
(&
íåy
->
£ek_timî
, &
NS_CLASS
 
rouã_discovîy_timeout
,Éntry);

70 
	`li°_add
(&
£ekhód
, &
íåy
->
l
);

71 #ifde‡
SEEK_LIST_DEBUG


72 
	`£ek_li°_¥öt
();

74  
íåy
;

75 
	}
}

77 
NS_CLASS
 
	$£ek_li°_ªmove
(
£ek_li°_t
 * 
íåy
)

79 i‡(!
íåy
)

82 
	`li°_dëach
(&
íåy
->
l
);

85 
	`timî_ªmove
(&
íåy
->
£ek_timî
);

87 i‡(
íåy
->
ùd
)

88 
	`‰ì
(
íåy
->
ùd
);

90 
	`‰ì
(
íåy
);

92 
	}
}

94 
£ek_li°_t
 *
NS_CLASS
 
	$£ek_li°_föd
(
ö_addr
 
de°_addr
)

96 
li°_t
 *
pos
;

98 
	`li°_f‹óch
(
pos
, &
£ekhód
) {

99 
£ek_li°_t
 *
íåy
 = (£ek_li°_à*Ë
pos
;

101 i‡(
íåy
->
de°_addr
.
s_addr
 == dest_addr.s_addr)

102  
íåy
;

104  
NULL
;

105 
	}
}

107 #ifde‡
SEEK_LIST_DEBUG


108 
NS_CLASS
 
	$£ek_li°_¥öt
()

110 
li°_t
 *
pos
;

112 
	`li°_f‹óch
(
pos
, &
£ekhód
) {

113 
£ek_li°_t
 *
íåy
 = (£ek_li°_à*Ë
pos
;

114 
	`¥ötf
("%†%u %d %d\n", 
	`ù_to_°r
(
íåy
->
de°_addr
),

115 
íåy
->
de°_£qno
,É¡ry->
ªqs
,É¡ry->
âl
);

117 
	}
}

	@seek_list.h

23 #i‚de‡
_SEEK_LIST_H


24 
	#_SEEK_LIST_H


	)

26 #i‚de‡
NS_NO_GLOBALS


27 
	~"defs.h
"

28 
	~"timî_queue.h
"

29 
	~"li°.h
"

31 
	#IP_DATA_MAX_LEN
 60 + 8

	)

33 
	sù_d©a
 {

34 
	md©a
[
IP_DATA_MAX_LEN
];

35 
	mÀn
;

39 
	s£ek_li°
 {

40 
li°_t
 
	ml
;

41 
ö_addr
 
	mde°_addr
;

42 
u_öt32_t
 
	mde°_£qno
;

43 
ù_d©a
 *
	mùd
;

44 
u_öt8_t
 
	mÊags
;

45 
	mªqs
;

46 
	mâl
;

47 
timî
 
	m£ek_timî
;

48 } 
	t£ek_li°_t
;

51 #i‚de‡
NS_NO_DECLARATIONS


52 
£ek_li°_t
 *
£ek_li°_ö£π
(
ö_addr
 
de°_addr
, 
u_öt32_t
 
de°_£qno
,

53 
âl
, 
u_öt8_t
 
Êags
, 
ù_d©a
 *
ùd
);

54 
£ek_li°_ªmove
(
£ek_li°_t
 * 
íåy
);

55 
£ek_li°_t
 *
£ek_li°_föd
(
ö_addr
 
de°_addr
);

57 #ifde‡
NS_PORT


58 #ifde‡
SEEK_LIST_DEBUG


59 
£ek_li°_¥öt
();

	@timer_queue.c

22 
	~<°dlib.h
>

23 
	~<sig«l.h
>

24 
	~<sys/time.h
>

26 #ifde‡
NS_PORT


27 
	~"ns-2/aodv-uu.h
"

29 
	~"timî_queue.h
"

30 
	~"defs.h
"

31 
	~"debug.h
"

32 
	~"li°.h
"

34 
LIST
(
TQ
);

38 #ifde‡
DEBUG_TIMER_QUEUE


39 
¥ötTQ
(
li°_t
 * 
l
);

43 
NS_CLASS
 
	$timî_öô
(
timî
 *
t
, 
timeout_func_t
 
f
, *
d©a
)

45 i‡(!
t
)

48 
	`INIT_LIST_ELM
(&
t
->
l
);

49 
t
->
h™dÀr
 = 
f
;

50 
t
->
d©a
 = data;

51 
t
->
timeout
.
tv_£c
 = 0;

52 
t
->
timeout
.
tv_u£c
 = 0;

53 
t
->
u£d
 = 0;

56 
	}
}

59 
NS_CLASS
 
	$timî_timeout
(
timevÆ
 *
now
)

61 
	`LIST
(
expTQ
);

62 
li°_t
 *
pos
, *
tmp
;

64 #ifde‡
DEBUG_TIMER_QUEUE


65 
	`¥ötf
("\n########Åimer_timeout: called!!\n");

68 
	`li°_f‹óch_ß„
(
pos
, 
tmp
, &
TQ
) {

69 
timî
 *
t
 = (timî *Ë
pos
;

71 i‡(
	`timevÆ_diff
(&
t
->
timeout
, 
now
) > 0)

74 
	`li°_dëach
(&
t
->
l
);

75 
	`li°_add_èû
(&
expTQ
, &
t
->
l
);

79 !
	`li°_em±y
(&
expTQ
)) {

80 
timî
 *
t
 = (timî *Ë
	`li°_fú°
(&
expTQ
);

81 
	`li°_dëach
(&
t
->
l
);

82 
t
->
u£d
 = 0;

83 #ifde‡
DEBUG_TIMER_QUEUE


84 
	`¥ötf
("ªmovögÅimî %lu %d\n", 
pos
);

87 i‡(
t
->
h™dÀr
) {

88 #ifde‡
NS_PORT


89 (*
this
.*
t
->
h™dÀr
Ë—->
d©a
);

91 
t
->
	`h™dÀr
—->
d©a
);

95 
	}
}

97 
NS_STATIC
 
NS_CLASS
 
	$timî_add
(
timî
 *
t
)

99 
li°_t
 *
pos
;

102 i‡(!
t
) {

103 
	`≥º‹
("NULLÅimer!!!\n");

104 
	`exô
(-1);

106 i‡(!
t
->
h™dÀr
) {

107 
	`≥º‹
("NULL handler!!!\n");

108 
	`exô
(-1);

112 i‡(
t
->
u£d
)

113 
	`timî_ªmove
(
t
);

115 
t
->
u£d
 = 1;

117 #ifde‡
DEBUG_TIMER_QUEUE


118 
	`¥ötf
("NewÅimerádded!\n");

122 i‡(
	`li°_em±y
(&
TQ
)) {

123 
	`li°_add
(&
TQ
, &
t
->
l
);

126 
	`li°_f‹óch
(
pos
, &
TQ
) {

127 
timî
 *
cuº
 = (timî *Ë
pos
;

128 i‡(
	`timevÆ_diff
(&
t
->
timeout
, &
cuº
->timeout) < 0) {

132 
	`li°_add
(
pos
->
¥ev
, &
t
->
l
);

135 #ifde‡
DEBUG_TIMER_QUEUE


136 
	`¥ötTQ
(&
TQ
);

139 
	}
}

141 
NS_CLASS
 
	$timî_ªmove
(
timî
 *
t
)

143 
ªs
 = 1;

145 i‡(!
t
)

149 i‡(
	`li°_u«âached
(&
t
->
l
))

150 
ªs
 = 0;

152 
	`li°_dëach
(&
t
->
l
);

154 
t
->
u£d
 = 0;

156  
ªs
;

157 
	}
}

160 
NS_CLASS
 
	$timî_timeout_now
(
timî
 *
t
)

162 i‡(
	`timî_ªmove
(
t
)) {

164 #ifde‡
NS_PORT


165 (*
this
.*
t
->
h™dÀr
Ë—->
d©a
);

167 
t
->
	`h™dÀr
—->
d©a
);

172 
	}
}

175 
NS_CLASS
 
	$timî_£t_timeout
(
timî
 *
t
, 
m£c
)

177 i‡(
t
->
u£d
) {

178 
	`timî_ªmove
(
t
);

181 
	`gëtimeofday
(&
t
->
timeout
, 
NULL
);

183 i‡(
m£c
 < 0)

184 
	`DEBUG
(
LOG_WARNING
, 0, "NegativeÅimeout!!!");

186 
t
->
timeout
.
tv_u£c
 +
m£c
 * 1000;

187 
t
->
timeout
.
tv_£c
 +t->timeout.
tv_u£c
 / 1000000;

188 
t
->
timeout
.
tv_u£c
 =Å->timeout.tv_usec % 1000000;

190 
	`timî_add
(
t
);

191 
	}
}

193 
	$timî_À·
(
timî
 *
t
)

195 
timevÆ
 
now
;

197 i‡(!
t
)

200 
	`gëtimeofday
(&
now
, 
NULL
);

202  
	`timevÆ_diff
(&
now
, &
t
->
timeout
);

203 
	}
}

204 
timevÆ
 *
NS_CLASS
 
	$timî_age_queue
()

206 
timevÆ
 
now
;

207 
timî
 *
t
;

208 
timevÆ
 
ªmaöög
;

210 
	`gëtimeofday
(&
now
, 
NULL
);

212 
	`fÊush
(
°dout
);

214 i‡(
	`li°_em±y
(&
TQ
))

215  
NULL
;

217 
	`timî_timeout
(&
now
);

221 i‡(
	`li°_em±y
(&
TQ
))

222  
NULL
;

224 
t
 = (
timî
 *Ë
TQ
.
√xt
;

226 
ªmaöög
.
tv_u£c
 = (
t
->
timeout
.tv_u£¯- 
now
.tv_usec);

227 
ªmaöög
.
tv_£c
 = (
t
->
timeout
.tv_£¯- 
now
.tv_sec);

229 i‡(
ªmaöög
.
tv_u£c
 < 0) {

230 
ªmaöög
.
tv_u£c
 += 1000000;

231 
ªmaöög
.
tv_£c
 -= 1;

233  (&
ªmaöög
);

234 
	}
}

237 #ifde‡
DEBUG_TIMER_QUEUE


238 
NS_CLASS
 
	$¥ötTQ
(
li°_t
 * 
l
)

240 
timevÆ
 
now
;

241 
n
 = 0;

242 
li°_t
 *
pos
;

244 
	`gëtimeofday
(&
now
, 
NULL
);

246 
	`Ârötf
(
°dîr
, "================\n");

247 
	`Ârötf
(
°dîr
, "%-12†%-4†%lu\n", "À·", "n", (Ë
l
);

249 
	`li°_f‹óch
(
pos
, 
l
) {

250 
timî
 *
t
 = (timî *Ë
pos
;

251 
	`Ârötf
(
°dîr
, "%-12ld %-4d %lu\n", 
	`timevÆ_diff
(&
t
->
timeout
, &
now
), 
n
,

252 (Ë
pos
);

253 
n
++;

255 
	}
}

	@timer_queue.h

22 #i‚de‡
_TIMER_QUEUE_H


23 
	#_TIMER_QUEUE_H


	)

25 #i‚de‡
NS_NO_GLOBALS


26 
	~<sys/time.h
>

28 
	~"defs.h
"

29 
	~"li°.h
"

31 #ifde‡
NS_PORT


32 (
	gAODVUU
::*
	ttimeout_func_t
) (*);

34 (*
	ttimeout_func_t
) (*);

37 
	stimî
 {

38 
li°_t
 
l
;

39 
u£d
;

40 
timevÆ
 
timeout
;

41 
timeout_func_t
 
h™dÀr
;

42 *
d©a
;

45 
ölöe
 
	$timevÆ_diff
(
timevÆ
 *
t1
, timevÆ *
t2
)

47 
ªs
;

49 i‡(!
t1
 || !
t2
)

53 
ªs
 = 
t1
->
tv_£c
;

54 
ªs
 = (‘e†- 
t2
->
tv_£c
Ë* 1000000 + 
t1
->
tv_u£c
 -Å2->tv_usec) / 1000;

55  (Ë
ªs
;

57 
	}
}

59 
ölöe
 
	$timevÆ_add_m£c
(
timevÆ
 *
t
, 
m£c
)

61 
add
;

63 i‡(!
t
)

66 
add
 = 
t
->
tv_u£c
 + (
m£c
 * 1000);

67 
t
->
tv_£c
 +
add
 / 1000000;

68 
t
->
tv_u£c
 = 
add
 % 1000000;

71 
	}
}

74 #i‚de‡
NS_NO_DECLARATIONS


75 
timî_queue_öô
();

76 
timî_ªmove
(
timî
 *
t
);

77 
timî_£t_timeout
(
timî
 *
t
, 
m£c
);

78 
timî_timeout_now
(
timî
 *
t
);

79 
timevÆ
 *
timî_age_queue
();

81 
timî_öô
(
timî
 *
t
, 
timeout_func_t
 
f
, *
d©a
);

83 #ifde‡
NS_PORT


84 
timî_add
(
timî
 *
t
);

85 
timî_timeout
(
timevÆ
 *
now
);

87 #ifde‡
DEBUG_TIMER_QUEUE


88 
NS_CLASS
 
¥ötTQ
();

	@
1
.
0
49
626
Makefile
aodv_hello.c
aodv_hello.h
aodv_neighbor.c
aodv_neighbor.h
aodv_rerr.c
aodv_rerr.h
aodv_rrep.c
aodv_rrep.h
aodv_rreq.c
aodv_rreq.h
aodv_socket.c
aodv_socket.h
aodv_timeout.c
aodv_timeout.h
debug.c
debug.h
defs.h
endian.c
list.c
list.h
llf.c
llf.h
lnx/Makefile
lnx/kaodv-debug.c
lnx/kaodv-debug.h
lnx/kaodv-expl.c
lnx/kaodv-expl.h
lnx/kaodv-ipenc.c
lnx/kaodv-ipenc.h
lnx/kaodv-mod.c
lnx/kaodv-mod.h
lnx/kaodv-netlink.c
lnx/kaodv-netlink.h
lnx/kaodv-queue.c
lnx/kaodv-queue.h
lnx/kaodv.h
locality.c
locality.h
main.c
nl.c
nl.h
params.h
routing_table.c
routing_table.h
seek_list.c
seek_list.h
timer_queue.c
timer_queue.h
